{"version":3,"sources":["model/playerProfile.ts","model/powerRanking.ts","model/houseguest.ts","utils/utilities.ts","utils/relationshipMap.ts","components/playerPortrait/selectedPortrait.ts","model/color.ts","components/playerPortrait/houseguestPortraitController.ts","components/playerPortrait/houseguestPortrait.tsx","components/playerPortrait/houseguestToPortrait.tsx","components/tooltip/tooltip.tsx","components/playerPortrait/portraits.tsx","components/memoryWall/memoryWall.tsx","components/nextEpisodeButton/nextEpisodeButton.tsx","utils/ai/classifyRelationship.ts","components/playerPortrait/setupPortrait.tsx","components/castingScreen/importLinks.tsx","components/playerPortrait/subtitle.tsx","model/portraitDisplayMode.ts","components/viewsBar/viewBarTag.tsx","components/viewsBar/viewBar.tsx","components/episode/episodes.tsx","components/episode/pregameEpisode.tsx","components/castingScreen/randomXButton.tsx","components/castingScreen/castingScreen.tsx","subjects/subjects.tsx","components/topbar/topBar.tsx","components/pregameScreen/pregameScreen.tsx","utils/BbRandomGenerator.ts","model/gameState.ts","model/season.ts","components/episode/scene.tsx","utils/ai/aiUtils.ts","utils/ai/aiApi.ts","components/layout/centered.tsx","components/episode/scenes/juryVoteScene.tsx","components/episode/bigBrotherFinale.tsx","components/episode/scenes/finalHohCompScene.tsx","components/episode/scenes/finalEvictionScene.tsx","components/episode/episodeFactory.ts","components/episode/bigBrotherEpisode.tsx","components/episode/scenes/hohCompScene.tsx","components/episode/scenes/nomCeremonyScene.tsx","components/episode/scenes/vetoCompScene.tsx","components/episode/scenes/vetoCeremonyScene.tsx","components/episode/scenes/evictionScene.tsx","components/layout/box.tsx","components/sidebar/sidebarController.ts","components/sidebar/sidebar.tsx","components/mainPage/mainContentArea.tsx","components/mainPage/mainPage.tsx","components/mainPage/mainPageController.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlayerProfile","init","Object","classCallCheck","this","name","imageURL","assign","PowerRanking","beats","outOf","Error","createClass","key","get","Houseguest","_PlayerProfile","_this","possibleConstructorReturn","getPrototypeOf","call","isEvicted","isJury","id","nominations","hohWins","povWins","popularity","deltaPopularity","relationships","powerRanking","superiors","Set","getFriendEnemyCount","friends","enemies","assertThisInitialized","inherits","value","villain","roundTwoDigits","number","Math","round","newRelationshipMap","size","exclude","result","i","selectPlayer","player","getSelectedPlayer","selectedPlayer$","next","componentToHex","c","hex","toString","length","Rgb","r","g","b","concat","interpolateColor","min","max","percent","toHex","selectedColor","HouseguestPortraitController","view","subs","refreshData","data","props","setState","comparePowerRankings","defaultState","selectedPlayer","undefined","state","displayMode","backgroundColor","_this2","push","subscribe","displayMode$","forEach","sub","unsubscribe","has","HouseguestPortrait","_React$Component","controller","isNullOrUndefined","subtitle","imageClass","getImageClass","generateSubtitle","detailed","className","react_default","a","createElement","onClick","style","src","width","height","React","Component","houseguestToPortrait","houseguest","houseguestPortrait_HouseguestPortrait","Text","styled","p","_templateObject","Tooltip","visible","Popover_default","position","isOpen","content","text","onMouseEnter","onMouseLeave","children","PortraitWrapper","centered","Portrait","tooltip","tooltip_Tooltip","Portraits","rows","houseguests","memoryWallPortrait","MemoryWall","margin","maxWidth","getPlayers","NextEpisodeButton","switchSceneRelative","RelationshipType","SetupPortrait","textAlign","onDoubleClick","onDelete","imageUrl","contentEditable","onChange","spellCheck","ImportLinks","lines","split","profiles","line","temp","pop","replace","substr","indexOf","onSubmit","event","target","RelationshipTypeToSymbol","FRIEND","ENEMY","PAWN","QUEEN","classifyRelationship","heroPopularity","villainPopularity","relationship","benefitsHero","benefitsVillain","Friend","Pawn","Queen","Enemy","addPopularityLine","hero","popularitySubtitle","deltaPop","statePopularity","getDeltaPopularity","addCompsLine","compWins","lineHeight","popularityMinColor","popularityMaxColor","popularityMode","minColor","maxColor","extremePopularity","x","xSquared","extremeValues","_addFriendshipCountTi","titles","friendOrEnemyTitle","map","txt","count","Relationship","friendEnemyCountTitle","addFriendshipCountTitles","arguments","powerMaxColor","powerMinColor","powerMode","toFloat","_","ViewBarTag","selected","mode","_this3","disabled","background","toRgba","cursor","ViewsBar","apply","viewBarTag_ViewBarTag","Episode","scenes","title","gameState","type","viewBar_ViewsBar","PregameEpisodeType","eliminates","canPlayWith","n","PregameEpisode","_Episode","PregameScreen","cast","RandomButton","_useState","useState","_useState2","slicedToArray","setNumber","random","parseInt","NumericInput","marginLeft","test","CastingScreen","appendProfiles","newState","objectSpread","profile","players","submit","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","newCast","cast$","mainContentStream$","newEpisode","GameState","stop","amount","shuffle","slice","handleUpload","handleFiles","files","handleDrop","newName","splice","_this4","setupPortrait_SetupPortrait","deleteMethod","handleChange","_this5","FileDrop","onDrop","importLinks_ImportLinks","multiple","getFiles","file","match","lastIndexOf","URL","createObjectURL","EditCastLink","castingScreen_CastingScreen","getCast","EditSeasonLink","Topbar","marginTop","BehaviorSubject","episodes$","switchEpisode$","Subject","episode","BbRandomGenerator","seed","rng","prand","xorshift128plus","_this$rng$next","_this$rng$next2","_prand$uniformIntDist","uniformIntDistribution","_prand$uniformIntDist2","_this$rng$next3","_this$rng$next4","rng$","castNames","string","hash","charCodeAt","hashcode","getById","find","hg","inclusions","exclusions","excludedIds","filter","includes","randomPlayer","options","randomInt","nonEvictedHouseguests","getJurors","inJury","remainingPlayers","finalJurySize","phase","previousHOH","Array","MutableGameState","copy","cloneDeep","Scene","render","favouriteIndex","callback","highestIndex","highestScore","Infinity","currentScore","lowestScore","lowestIndex","doesHeroWinTheFinale","hgs","jury","heroVotes","villainVotes","juror","heroShouldTargetSuperiors","castEvictionVote","nominees","nom0","nom1","zeroIsInferior","oneIsInferior","cutthroatVote","nonVote","decision","reason","nonTarget","excuse","targetIsFriend","nonTargetIsNonFriend","nonTargetIsFriend","targetIsNonFriend","cutthroatVoteJury","r0","r1","vote","nominateNPlayers","hitlist","hitList","trueOptions","useGoldenVetoPreJury","save","rel0","relationshipWith","rel1","Centered","CenteredBold","juryVoteScene","initialGameState","jurors","finalists","voteCount","votes","castJuryVote","voteBlocks","winner","BigBrotherFinale","generateBbFinaleInit","currentGameState","hohCompScene","finalHoH","finalEviction","_finalHohCompScene","newGameState","final3","enduranceWinner","enduranceLosers","skillWinner","scene","finalHohCompScene","_finalHohCompScene2","_finalEvictionScene","HoH","_castEvictionVote","evictee","hoh","evictHouseguest","finalEvictionScene","_finalEvictionScene2","BigBrotherFinaleEpisode","EpisodeFactory","episodeType","iMap","j","jMap","impression","randomFloat","firstImpressions","heroWinsTheFinale","add","populateSuperiors","house","sum","targetId","calculatePopularity","updatePopularity","rel","updateFriendCounts","finalState","BigBrotherVanilla","nomCeremonyScene","_generateHohCompScene","previousHoh","newHoH","generateHohCompScene","_generateHohCompScene2","vetoCompScene","povWinner","_generateNomCeremonyS","nom2","noms","DividerBox","generateNomCeremonyScene","_generateNomCeremonyS2","vetoCeremonyScene","_generateVetoCompScen","choices","povPlayers","everyoneWillPlay","introText","extras","generateVetoCompScene","_generateVetoCompScen2","evictionScene","_generateVetoCeremony","initialNominees","povTarget","descisionText","vetoChoice","useGoldenVeto","replacementSpeech","nameAReplacement","finalNominees","toConsumableArray","replacementNom","replacementIndex","findIndex","generateVetoCeremonyScene","_generateVetoCeremony2","_generateEvictionScen","logic","votesFor0","votesFor1","tieVote","tieBreaker","voteCountText","displayHoH","generateEvictionScene","_generateEvictionScen2","BigBrotherVanillaEpisode","generateBbVanilla","ShadowBox","div","box_templateObject","delete","Season","factory","nextEpisode","SidebarController","subscriptions","season","selectedEpisode","delta","selectedScene","renderedScenes","targetScene","lastEpisode","episodes","switchToScene","newPlayerCount","nextEpisodeType","whichEpisodeType","renderEpisode","onNewEpisode","_switchToScene","index","_x","keyCode","Sidebar","document","addEventListener","handleKeyDown","destroy","minWidth","getEpisodes","episodeKey","breakKey","getHighlight","getSelectedEpisode","MainContentArea","contentStream","prevProps","prevState","window","scrollTo","MainPage","inject","sidebar_Sidebar","mainContentArea_MainContentArea","MainPageController","page","App","mainPage_MainPage","Boolean","location","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc550b00.chunk.js","sourcesContent":["export class PlayerProfile {\n    readonly name: string = \"\";\n    readonly imageURL: string = \"\";\n    constructor(init: PlayerProfile) {\n        if (!init) {\n            return;\n        }\n        Object.assign(this, init);\n    }\n}\n","export class PowerRanking {\n    readonly beats: number;\n    readonly outOf: number;\n    get toFloat(): number {\n        return this.beats / this.outOf;\n    }\n\n    constructor(beats: number, outOf: number) {\n        if (outOf === 0) throw new Error(\"Power ranking attempted to divide by zero\");\n        this.beats = beats;\n        this.outOf = outOf;\n    }\n}\n","import { PlayerProfile } from \"./playerProfile\";\nimport { RelationshipMap } from \"../utils\";\nimport { PowerRanking } from \"./powerRanking\";\n\ninterface HouseguestInit extends PlayerProfile {\n    id: number;\n    relationships: RelationshipMap;\n}\n\nexport class Houseguest extends PlayerProfile {\n    public isEvicted: boolean = false;\n    public isJury: boolean = false;\n\n    readonly id: number = 0;\n\n    public nominations: number = 0;\n    public hohWins: number = 0;\n    public povWins: number = 0;\n\n    // Popularity ranges from -1 to 1\n    public popularity: number = 0;\n    public deltaPopularity: number = 0;\n    readonly relationships: RelationshipMap = {};\n\n    // power rankings range from 0 to 1\n    public powerRanking: PowerRanking = new PowerRanking(0, 1);\n    readonly superiors: Set<number> = new Set<number>();\n\n    public relationshipWith(villain: Houseguest): number {\n        return this.relationships[villain.id];\n    }\n\n    public getFriendEnemyCount: () => { friends: number; enemies: number } = () => {\n        return { friends: 0, enemies: 0 };\n    };\n\n    constructor(init: HouseguestInit) {\n        super(init);\n        Object.assign(this, init);\n    }\n}\n","// spits out the next episode given a gamestate, in addition to the new gamestate.\n// allows for re-use, because you can give it the initial gamestate, and then just keep asking for the next season.\nexport function hashcode(string: string): number {\n    var hash = 0,\n        i,\n        chr;\n    if (string.length === 0) return hash;\n    for (i = 0; i < string.length; i++) {\n        chr = string.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0;\n    }\n    return hash;\n}\n\nexport function roundTwoDigits(number: number | undefined) {\n    if (!number) {\n        return 0;\n    }\n    return Math.round(number * 100);\n}\n\nexport function extremeValues(x: number | undefined): number {\n    if (!x) {\n        return 0;\n    }\n    const xSquared = x * x;\n    if (x >= 0) {\n        return -xSquared + 2 * x;\n    } else {\n        return xSquared + 2 * x;\n    }\n}\n","export interface RelationshipMap {\n    [id: number]: number;\n}\n\nexport function newRelationshipMap(size: number, exclude: number): RelationshipMap {\n    const result: RelationshipMap = {};\n    for (let i = 0; i < size; i++) {\n        if (i !== exclude) result[i] = 0;\n    }\n    return result;\n}\n","import { Houseguest } from \"../../model\";\nimport { RelationshipMap } from \"../../utils\";\nimport { getSelectedPlayer, selectedPlayer$ } from \"../../subjects/subjects\";\n\nexport interface SelectedPlayerData {\n    id: number;\n    popularity: number;\n    relationships: RelationshipMap;\n    isEvicted: boolean;\n    superiors?: Set<number>;\n}\n\nexport function selectPlayer(player: SelectedPlayerData | null) {\n    if (!player || (getSelectedPlayer() && (getSelectedPlayer() as Houseguest).id === player.id)) {\n        selectedPlayer$.next(null);\n    } else {\n        selectedPlayer$.next(player);\n    }\n}\n","function componentToHex(c: any) {\n    var hex = Math.round(c).toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nexport class Rgb {\n    public r: number;\n    public g: number;\n    public b: number;\n    public toHex() {\n        return \"#\" + componentToHex(this.r) + componentToHex(this.g) + componentToHex(this.b);\n    }\n    public toRgba(): string {\n        return `rgba(${this.r}, ${this.g}, ${this.b}, 1)`;\n    }\n    constructor(r: number, g: number, b: number) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n}\n\nexport function interpolateColor(min: Rgb, max: Rgb, percent: number): string {\n    return new Rgb(\n        min.r + percent * (max.r - min.r),\n        min.g + percent * (max.g - min.g),\n        min.b + percent * (max.b - min.b)\n    ).toHex();\n}\n","import { PortraitProps, HouseguestPortrait, PortraitState } from \"../memoryWall\";\nimport { Subscription } from \"rxjs\";\nimport { selectedPlayer$, displayMode$, getSelectedPlayer } from \"../../subjects/subjects\";\nimport { SelectedPlayerData } from \"./selectedPortrait\";\nimport { Rgb } from \"../../model/color\";\nimport { PowerRanking } from \"../../model/powerRanking\";\n\nconst selectedColor = new Rgb(51, 255, 249);\n\nexport class HouseguestPortraitController {\n    private subs: Subscription[] = [];\n    private view: HouseguestPortrait;\n    constructor(view: HouseguestPortrait) {\n        this.view = view;\n    }\n\n    get defaultState() {\n        return {\n            popularity: this.view.props.popularity,\n            displayMode: displayMode$.value,\n            powerRanking: this.view.props.powerRanking\n        };\n    }\n\n    public backgroundColor(props: PortraitProps): undefined | string {\n        const selectedPlayer = getSelectedPlayer();\n        if (selectedPlayer !== null && selectedPlayer.id === props.id) {\n            return selectedColor.toHex();\n        }\n        return props.isEvicted ? undefined : this.view.state.displayMode.backgroundColor(this.view.state);\n    }\n\n    public subscribe() {\n        const subs: Subscription[] = [];\n        subs.push(\n            selectedPlayer$.subscribe({\n                next: this.refreshData\n            })\n        );\n        subs.push(\n            displayMode$.subscribe({\n                next: displayMode => this.view.setState({ displayMode })\n            })\n        );\n        this.subs = subs;\n    }\n\n    public unsubscribe() {\n        this.subs.forEach(sub => sub.unsubscribe());\n    }\n\n    private comparePowerRankings(data: SelectedPlayerData): PowerRanking {\n        // 0 is blue. 1 is orange\n        if (!data.superiors) return new PowerRanking(0, 1);\n        const id = this.view.props.id === undefined ? -1 : this.view.props.id;\n        return data.superiors.has(id) ? new PowerRanking(1, 1) : new PowerRanking(0, 1);\n    }\n\n    private refreshData = (data: SelectedPlayerData | null) => {\n        if (!data) {\n            this.view.setState(this.defaultState);\n        } else {\n            if (data.id !== this.view.props.id) {\n                this.view.setState({\n                    popularity: data.relationships[this.view.props.id!],\n                    powerRanking: this.comparePowerRankings(data)\n                });\n            } else {\n                this.view.setState({ popularity: 2, powerRanking: new PowerRanking(2, 1) });\n            }\n        }\n    };\n}\n","import React from \"react\";\nimport { selectPlayer } from \"./selectedPortrait\";\nimport { isNullOrUndefined } from \"util\";\nimport { RelationshipMap } from \"../../utils\";\nimport _ from \"lodash\";\nimport { HouseguestPortraitController } from \"./houseguestPortraitController\";\nimport { PortraitDisplayMode } from \"../../model/portraitDisplayMode\";\nimport { PowerRanking } from \"../../model/powerRanking\";\n\nexport interface PortraitProps {\n    imageURL: string;\n    name: string;\n    id?: number;\n    relationships?: RelationshipMap;\n    isEvicted?: boolean;\n    isJury?: boolean;\n    popularity?: number;\n    powerRanking?: PowerRanking;\n    deltaPopularity?: number;\n    detailed?: boolean;\n    superiors?: Set<number>;\n    getFriendEnemyCount?: () => { friends: number; enemies: number };\n}\n\nexport interface PortraitState {\n    popularity?: number;\n    powerRanking?: PowerRanking;\n    displayMode: PortraitDisplayMode;\n}\nexport class HouseguestPortrait extends React.Component<PortraitProps, PortraitState> {\n    private controller: HouseguestPortraitController;\n\n    public constructor(props: PortraitProps) {\n        super(props);\n        this.controller = new HouseguestPortraitController(this);\n        this.state = this.controller.defaultState;\n    }\n\n    public componentDidMount() {\n        if (isNullOrUndefined(this.props.id)) {\n            return;\n        }\n        this.controller.subscribe();\n    }\n\n    public componentWillUnmount() {\n        this.controller.unsubscribe();\n    }\n\n    private onClick(): void {\n        if (isNullOrUndefined(this.props.id) || !this.props.relationships) {\n            return;\n        }\n        const data = {\n            id: this.props.id,\n            relationships: this.props.relationships,\n            isEvicted: !!this.props.isEvicted,\n            popularity: this.props.popularity || 0,\n            superiors: this.props.superiors\n        };\n        selectPlayer(data);\n    }\n\n    public render() {\n        const props = this.props;\n        const imageClass = getImageClass(props);\n        let subtitle: any[] = [];\n        subtitle = this.state.displayMode.generateSubtitle(this.props, this.state, !!props.detailed);\n\n        let className = \"\";\n        if (props.isJury) {\n            className = \"jury\";\n        } else if (props.isEvicted) {\n            className = \"evicted\";\n        }\n        return (\n            <div\n                onClick={() => this.onClick()}\n                style={{\n                    backgroundColor: this.controller.backgroundColor(props)\n                }}\n                className={`memory-wall-portrait ${className}`}\n            >\n                <img className={imageClass} src={props.imageURL} style={{ width: 100, height: 100 }} />\n                <br />\n                {props.name}\n                <br />\n                {<small className=\"portrait-history\">{subtitle}</small>}\n            </div>\n        );\n    }\n}\n\nfunction getImageClass(props: PortraitProps) {\n    let imageClass = props.isEvicted ? \"grayscale\" : \"\";\n    imageClass = props.isJury ? \"sepia\" : imageClass;\n    return imageClass;\n}\n","import { ProfileHouseguest, HouseguestPortrait } from \"../memoryWall\";\nimport React from \"react\";\n\nexport function houseguestToPortrait(houseguest: ProfileHouseguest, key?: any): JSX.Element {\n    return <HouseguestPortrait {...houseguest} key={key} detailed={false} />;\n}\n\nexport function memoryWallPortrait(houseguest: ProfileHouseguest, key?: any): JSX.Element {\n    return <HouseguestPortrait {...houseguest} key={key} detailed={true} />;\n}\n","import React from \"react\";\nimport Popover from \"react-tiny-popover\";\nimport styled from \"styled-components\";\n\nconst Text = styled.p`\n    max-width: 200px;\n    padding: 3px 8px;\n    color: #fff;\n    text-align: center;\n    background-color: #000;\n    border-radius: 4px;\n`;\n\ninterface TooltipProps {\n    text: string;\n    children: any;\n}\n\ninterface ToolTipState {\n    visible: boolean;\n}\n\nexport class Tooltip extends React.Component<TooltipProps, ToolTipState> {\n    constructor(props: TooltipProps) {\n        super(props);\n        this.state = { visible: false };\n    }\n\n    public render() {\n        return (\n            <Popover\n                position={[\"top\", \"bottom\"]}\n                isOpen={this.state.visible}\n                content={<Text>{this.props.text}</Text>}\n            >\n                <div\n                    onMouseEnter={() => this.setState({ visible: true })}\n                    onMouseLeave={() => this.setState({ visible: false })}\n                >\n                    {this.props.children}\n                </div>\n            </Popover>\n        );\n    }\n}\n","import React from \"react\";\nimport { ProfileHouseguest } from \"../memoryWall\";\nimport { houseguestToPortrait, memoryWallPortrait } from \"./houseguestToPortrait\";\nimport { Tooltip } from \"../tooltip/tooltip\";\n\nlet key = -1;\n\nfunction PortraitWrapper(props: { centered?: boolean; children: any }): JSX.Element {\n    return (\n        <div\n            key={key++}\n            className={`columns is-gapless is-mobile is-multiline ${props.centered ? \"is-centered\" : \"\"}`}\n        >\n            {props.children}\n        </div>\n    );\n}\n\nexport function Portrait(props: { houseguest: ProfileHouseguest; centered?: boolean }): JSX.Element {\n    const result = (\n        <PortraitWrapper centered={props.centered}>{houseguestToPortrait(props.houseguest)}</PortraitWrapper>\n    );\n    if (props.houseguest.tooltip) {\n        return (\n            <PortraitWrapper centered={props.centered}>\n                <Tooltip text={props.houseguest.tooltip}>{houseguestToPortrait(props.houseguest)}</Tooltip>\n            </PortraitWrapper>\n        );\n    }\n    return result;\n}\n\nexport function Portraits(props: {\n    houseguests: ProfileHouseguest[];\n    centered?: boolean;\n    detailed?: boolean;\n}): JSX.Element {\n    const rows: JSX.Element[] = [];\n    if (!props.houseguests || props.houseguests.length === 0) {\n        return <div />;\n    }\n    props.houseguests.forEach((houseguest: ProfileHouseguest) => {\n        let result;\n        if (props.detailed) {\n            result = memoryWallPortrait(houseguest, key++);\n        } else {\n            result = houseguestToPortrait(houseguest, key++);\n        }\n        if (houseguest.tooltip) {\n            result = <Tooltip text={houseguest.tooltip}>{result}</Tooltip>;\n        }\n        rows.push(result);\n    });\n    return (\n        <div className={`columns is-gapless is-mobile is-multiline ${props.centered && \"is-centered\"}`}>\n            {rows}\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./memoryWall.scss\";\nimport { PlayerProfile } from \"../../model\";\nimport { Portraits } from \"../playerPortrait/portraits\";\nimport { RelationshipMap } from \"../../utils\";\nexport interface IMemoryWallProps {\n    readonly houseguests: ProfileHouseguest[];\n}\n\nexport interface ProfileHouseguest extends PlayerProfile {\n    id?: number;\n    relationships?: RelationshipMap;\n    isEvicted?: boolean;\n    isJury?: boolean;\n    popularity?: number;\n    deltaPopularity?: number;\n    hohWins?: number;\n    povWins?: number;\n    nominations?: number;\n    tooltip?: string;\n    getFriendEnemyCount?: () => { friends: number; enemies: number };\n}\n\nexport function MemoryWall(props: IMemoryWallProps): JSX.Element {\n    return <div className=\"memory-wall\">{getPlayers(props)}</div>;\n}\n\nfunction getPlayers(props: IMemoryWallProps): any {\n    if (!props.houseguests || props.houseguests.length === 0) {\n        return null;\n    }\n    return (\n        <div\n            style={{\n                margin: \"auto\",\n                maxWidth: props.houseguests.length < 26 ? 700 : -1\n            }}\n        >\n            <Portraits houseguests={props.houseguests} centered={true} detailed={true} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { switchSceneRelative } from \"../../subjects/subjects\";\n\nexport function NextEpisodeButton(): JSX.Element {\n    return (\n        <button className=\"button is-primary\" onClick={() => switchSceneRelative(1)}>\n            Continue\n        </button>\n    );\n}\n","export enum RelationshipType {\n    Friend = \"FRIEND\",\n    Queen = \"QUEEN\",\n    Pawn = \"PAWN\",\n    Enemy = \"ENEMY\"\n}\n\nexport const RelationshipTypeToSymbol = { FRIEND: \"♥\", ENEMY: \"💔\", PAWN: \"PAWN\", QUEEN: \"QUEEN\" };\n\nexport function classifyRelationship(\n    heroPopularity: number,\n    villainPopularity: number,\n    relationship: number\n): RelationshipType {\n    const benefitsHero = relationship > heroPopularity;\n    const benefitsVillain = relationship > villainPopularity;\n    if (benefitsHero && benefitsVillain) {\n        return RelationshipType.Friend;\n    } else if (benefitsHero && !benefitsVillain) {\n        return RelationshipType.Pawn;\n    } else if (!benefitsHero && benefitsVillain) {\n        return RelationshipType.Queen;\n    }\n    return RelationshipType.Enemy;\n}\n","import React from \"react\";\n\ninterface SetupPortraitProps {\n    name: string;\n    imageUrl: string;\n    onDelete: () => void;\n    onChange: (arg0: Event) => void;\n}\n\ninterface SetupPortraitState {\n    name: string;\n}\n\nexport class SetupPortrait extends React.Component<SetupPortraitProps, SetupPortraitState> {\n    // TODO: When you click on the text, you can edit the text.\n\n    public constructor(props: SetupPortraitProps) {\n        super(props);\n        this.state = { name: props.name };\n    }\n\n    public UNSAFE_componentWillReceiveProps(props: SetupPortraitProps) {\n        this.setState({ name: props.name });\n    }\n\n    public render() {\n        return (\n            <div className={`edit-portrait`}>\n                <div style={{ textAlign: \"center\" }}>\n                    <div className=\"x-button noselect\" onDoubleClick={() => this.props.onDelete()}>\n                        ✘\n                    </div>\n                    <img src={this.props.imageUrl} style={{ width: 100, height: 100 }} />\n                    <br />\n                    <input\n                        className=\"memory-wall-portrait\"\n                        contentEditable={true}\n                        onChange={() => this.props.onChange}\n                        spellCheck={false}\n                        value={this.state.name}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { PlayerProfile } from \"../../model\";\n\ninterface ImportLinksProps {\n    onSubmit: (profiles: PlayerProfile[]) => void;\n    className?: string;\n}\n\nexport class ImportLinks extends React.Component<ImportLinksProps, any> {\n    public constructor(props: ImportLinksProps) {\n        super(props);\n        this.state = { text: \"\" };\n    }\n\n    private onSubmit() {\n        const lines = this.state.text.split(/\\r?\\n/);\n        // ugly, but it works.\n        const profiles: PlayerProfile[] = [];\n        lines.forEach((line: string) => {\n            const temp = line.split(\"/\").pop();\n            let name = temp\n                ? temp\n                      .split(\"#\")[0]\n                      .split(\"?\")[0]\n                      .replace(/\\.[^/.]+$/, \"\")\n                      .replace(/[-_]/g, \" \")\n                : null;\n\n            if (line.substr(0, line.indexOf(\" \"))) {\n                name = line.substr(line.indexOf(\" \") + 1);\n            }\n            if (name) {\n                profiles.push({\n                    name,\n                    imageURL: line\n                });\n            }\n        });\n        this.props.onSubmit(profiles);\n        this.setState({ text: \"\" });\n    }\n\n    public render() {\n        return (\n            <div className={this.props.className}>\n                <textarea\n                    className=\"textarea\"\n                    onChange={event => {\n                        this.setState({ text: event.target.value });\n                    }}\n                    value={this.state.text}\n                />\n                <button onClick={() => this.onSubmit()}>Import links</button>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { roundTwoDigits } from \"../../utils\";\nimport { ProfileHouseguest, PortraitProps, PortraitState } from \"../memoryWall\";\nimport { SelectedPlayerData } from \"./selectedPortrait\";\nimport {\n    RelationshipTypeToSymbol,\n    RelationshipType as Relationship,\n    classifyRelationship\n} from \"../../utils/ai/classifyRelationship\";\nimport { getSelectedPlayer } from \"../../subjects/subjects\";\n\nexport function generatePowerSubtitle(\n    hero: PortraitProps,\n    state: PortraitState,\n    _: boolean | undefined\n): any[] {\n    let key = 0;\n    let subtitle: any[] = [];\n    key = addPopularityLine(state, hero, !!_, subtitle, key);\n    key = addCompsLine(hero, subtitle, key);\n    if (!hero.isEvicted && state.powerRanking) {\n        const data = getSelectedPlayer() as SelectedPlayerData | null;\n        if (data && data.id !== hero.id) {\n            subtitle.push(<div key={key++}>{`${state.powerRanking!.beats > 0 ? \"LOSE\" : \"WIN\"}`}</div>);\n        } else if (data && data.id === hero.id) {\n            subtitle.push(<div key={key++}>I WOULD</div>);\n        } else {\n            subtitle.push(\n                <div key={key++}>{`WINS ${state.powerRanking.beats}/${state.powerRanking.outOf}`}</div>\n            );\n        }\n    } else {\n        subtitle.push(<br key={key++} style={{ lineHeight: 1 }} />);\n    }\n    return subtitle;\n}\n\nexport function generatePopularitySubtitle(\n    hero: PortraitProps,\n    state: PortraitState,\n    detailed: boolean = false\n): any[] {\n    let key = 0;\n    let subtitle: any[] = [];\n    // popularity\n    key = addPopularityLine(state, hero, detailed, subtitle, key);\n    // competition wins\n    key = addCompsLine(hero, subtitle, key);\n    // friendship count / relationship classification titles\n    ({ subtitle, key } = addFriendshipCountTitles(hero, subtitle, key));\n    return subtitle;\n}\n\nfunction addFriendshipCountTitles(hero: PortraitProps, subtitle: any[], key: number) {\n    if (!hero.isEvicted) {\n        const data = getSelectedPlayer() as SelectedPlayerData | null;\n        if (data && data.id !== hero.id) {\n            const titles = friendOrEnemyTitle(hero, data);\n            subtitle = subtitle.concat(titles.map(txt => <div key={key++}>{txt}</div>));\n        } else {\n            const titles = friendEnemyCountTitle(hero);\n            subtitle = subtitle.concat(titles.map(txt => <div key={key++}>{txt}</div>));\n        }\n    } else {\n        subtitle.push(<br key={key++} style={{ lineHeight: 1 }} />);\n    }\n    return { subtitle, key };\n}\n\nfunction addPopularityLine(\n    state: { popularity?: number },\n    hero: PortraitProps,\n    detailed: boolean,\n    subtitle: any[],\n    key: number\n) {\n    let popularity = state.popularity;\n    if (popularity && (popularity > 1 || popularity < -1)) {\n        popularity = hero.popularity;\n    }\n    if (popularity && !hero.isEvicted) {\n        let popularitySubtitle = `${roundTwoDigits(popularity)}%`;\n        const deltaPop = getDeltaPopularity(hero, popularity);\n        if (detailed && deltaPop !== 0) {\n            const arrow = deltaPop > 0 ? \" | ↑\" : \" | ↓\";\n            popularitySubtitle += `${arrow} ${deltaPop}%`;\n        }\n        subtitle.push(<div key={key++}>{popularitySubtitle}</div>);\n    }\n    return key;\n}\n\nfunction addCompsLine(hero: PortraitProps, subtitle: any[], key: number) {\n    if (compWins(hero)) {\n        subtitle.push(<div key={key++}>{`${compWins(hero)}`}</div>);\n    } else {\n        subtitle.push(<br key={key++} style={{ lineHeight: 1 }} />);\n    }\n    return key;\n}\n\nfunction getDeltaPopularity(houseguest: PortraitProps, statePopularity: number) {\n    if (roundTwoDigits(houseguest.popularity) !== roundTwoDigits(statePopularity)) {\n        return 0;\n    }\n    return houseguest.deltaPopularity ? roundTwoDigits(houseguest.deltaPopularity) : 0;\n}\n\nfunction compWins(houseguest: ProfileHouseguest): string {\n    return `${houseguest.hohWins ? `♔ ${houseguest.hohWins}` : \"\"}${\n        houseguest.povWins && houseguest.hohWins\n            ? `|🛇 ${houseguest.povWins}`\n            : houseguest.povWins\n            ? `🛇 ${houseguest.povWins}`\n            : \"\"\n    }${(houseguest.hohWins || houseguest.povWins) && houseguest.nominations ? \"|\" : \"\"}${\n        houseguest.nominations ? `✘ ${houseguest.nominations}` : \"\"\n    }`;\n}\n\nfunction friendOrEnemyTitle(hero: PortraitProps, villain: SelectedPlayerData): string[] {\n    const titles: string[] = [];\n    titles.push(\n        RelationshipTypeToSymbol[\n            classifyRelationship(hero.popularity || 0, villain.popularity, hero.relationships![villain.id])\n        ]\n    );\n    return titles;\n}\n\nfunction friendEnemyCountTitle(hero: PortraitProps): string[] {\n    const titles: string[] = [];\n    const count = hero.getFriendEnemyCount ? hero.getFriendEnemyCount() : { friends: 0, enemies: 0 };\n    titles.push(\n        `${count.friends} ${RelationshipTypeToSymbol[Relationship.Friend]} | ${count.enemies} ${\n            RelationshipTypeToSymbol[Relationship.Enemy]\n        }`\n    );\n    return titles;\n}\n","import { Rgb, interpolateColor } from \"./color\";\nimport { PortraitState, PortraitProps } from \"../components/memoryWall\";\nimport { extremeValues } from \"../utils\";\nimport { generatePopularitySubtitle, generatePowerSubtitle } from \"../components/playerPortrait/subtitle\";\n\nexport interface PortraitDisplayMode {\n    minColor: Rgb;\n    maxColor: Rgb;\n    backgroundColor: (state: PortraitState) => string;\n    generateSubtitle: (props: PortraitProps, state: PortraitState, detailed?: boolean) => any[];\n}\n\nconst popularityMinColor = new Rgb(252, 137, 137);\nconst popularityMaxColor = new Rgb(137, 252, 137);\n\nexport const popularityMode: PortraitDisplayMode = {\n    minColor: popularityMinColor,\n    maxColor: popularityMaxColor,\n    backgroundColor: (state: PortraitState) => {\n        const popularity = state.popularity;\n\n        const extremePopularity = extremeValues(popularity);\n        const percent = (extremePopularity + 1) / 2;\n        return interpolateColor(popularityMinColor, popularityMaxColor, percent);\n    },\n    generateSubtitle: generatePopularitySubtitle\n};\n\nconst powerMaxColor = new Rgb(255, 204, 94);\nconst powerMinColor = new Rgb(192, 181, 255);\nexport const powerMode: PortraitDisplayMode = {\n    minColor: powerMinColor,\n    maxColor: powerMaxColor,\n    backgroundColor: (state: PortraitState) => {\n        const powerRanking = state.powerRanking;\n        if (powerRanking === undefined) return \"\";\n\n        return interpolateColor(powerMinColor, powerMaxColor, powerRanking.toFloat);\n    },\n    generateSubtitle: generatePowerSubtitle\n};\n","import React, { useState } from \"react\";\nimport { PortraitDisplayMode } from \"../../model/portraitDisplayMode\";\nimport { displayMode$ } from \"../../subjects/subjects\";\nimport { Subscription } from \"rxjs\";\n\nfunction setDisplayMode(p: PortraitDisplayMode) {\n    displayMode$.next(p);\n}\n\ninterface ViewBarTagProps {\n    mode: PortraitDisplayMode;\n    text: string;\n    disabled?: boolean;\n}\n\nexport class ViewBarTag extends React.Component<ViewBarTagProps, { selected: boolean }> {\n    private sub: Subscription | null = null;\n\n    public constructor(props: ViewBarTagProps) {\n        super(props);\n        this.state = { selected: props.mode === displayMode$.value };\n    }\n\n    public componentDidMount() {\n        this.sub = displayMode$.subscribe({\n            next: mode => {\n                if (mode !== this.props.mode) {\n                    this.setState({ selected: false });\n                }\n            }\n        });\n    }\n\n    public componentWillUnmount() {\n        if (this.sub) this.sub.unsubscribe();\n    }\n\n    public render() {\n        const name = \"level-item tag is-medium is-light\";\n        const style = getStyle(this.props);\n        return (\n            <span\n                className={name}\n                style={style}\n                onClick={() => {\n                    !this.props.disabled && setDisplayMode(this.props.mode);\n                    !this.props.disabled && this.setState({ selected: true });\n                }}\n            >\n                {styleText(this.props.text, this.state.selected)}\n            </span>\n        );\n    }\n}\n\nfunction styleText(text: string, selected: boolean): JSX.Element {\n    return selected ? <b>{text}</b> : <i>{text}</i>;\n}\n\nfunction getStyle(props: ViewBarTagProps) {\n    return props.disabled\n        ? {}\n        : {\n              background: `linear-gradient(90deg, ${props.mode.minColor.toRgba()} 0%, ${props.mode.maxColor.toRgba()} 100%)`,\n              cursor: \"pointer\"\n          };\n}\n","import React from \"react\";\nimport { popularityMode, powerMode } from \"../../model/portraitDisplayMode\";\nimport { ViewBarTag } from \"./viewBarTag\";\n\nexport class ViewsBar extends React.Component {\n    public render() {\n        return (\n            <div className=\"level box is-mobile\" key=\"viewsbar\">\n                <ViewBarTag mode={popularityMode} text={\"Relationships\"}></ViewBarTag>\n                <ViewBarTag mode={powerMode} text={\"Power Rankings\"}></ViewBarTag>\n                <ViewBarTag mode={powerMode} disabled={true} text={\"Cliques [Coming Soon™]\"}></ViewBarTag>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { GameState } from \"../../model/gameState\";\nimport { Scene } from \"./scene\";\nimport { ViewsBar } from \"../viewsBar/viewBar\";\n\nexport interface InitEpisode {\n    scenes: Scene[];\n    title: string;\n    content: JSX.Element;\n    gameState: GameState;\n    type: EpisodeType;\n}\n\nexport class Episode {\n    readonly scenes: Scene[];\n    readonly title: string;\n    readonly content: JSX.Element;\n    readonly gameState: GameState;\n    readonly type: EpisodeType;\n    get render(): JSX.Element {\n        return (\n            <div>\n                <ViewsBar />\n                {this.content}\n            </div>\n        );\n    }\n\n    constructor(init: InitEpisode) {\n        this.scenes = init.scenes;\n        this.title = init.title;\n        this.content = init.content;\n        this.gameState = init.gameState;\n        this.type = init.type;\n    }\n}\n\nexport interface EpisodeType {\n    readonly canPlayWith: (n: number) => boolean;\n    readonly eliminates: number;\n}\n","import React from \"react\";\nimport { Episode, EpisodeType } from \"./episodes\";\nimport { PregameScreen } from \"../pregameScreen/pregameScreen\";\nimport { GameState } from \"../../model/gameState\";\n\nconst PregameEpisodeType: EpisodeType = {\n    eliminates: 0,\n    canPlayWith: (n: number) => {\n        return n > 2;\n    }\n};\n\nexport class PregameEpisode extends Episode {\n    readonly title = \"Pregame\";\n    readonly scenes = [];\n    readonly content: JSX.Element;\n    readonly gameState: GameState;\n    readonly type = PregameEpisodeType;\n\n    public constructor(gameState: GameState) {\n        super({\n            title: \"Pregame\",\n            scenes: [],\n            content: <PregameScreen cast={gameState.houseguests} />,\n            gameState,\n            type: PregameEpisodeType\n        });\n        this.gameState = gameState;\n        this.content = <PregameScreen cast={gameState.houseguests} />;\n    }\n}\n","import React, { useState } from \"react\";\n\ninterface RandomButtonProps {\n    random: (n: number) => void;\n}\n\nexport function RandomButton(props: RandomButtonProps): JSX.Element {\n    const [number, setNumber] = useState(\"16\");\n    return (\n        <div>\n            <button\n                disabled={number === \"\"}\n                className=\"button is-primary\"\n                onClick={() => props.random(parseInt(number))}\n            >\n                Random\n            </button>\n            <NumericInput value={number} onChange={setNumber} />\n        </div>\n    );\n}\n\ninterface NumericInputProps {\n    value: string;\n    onChange: (newValue: string) => void;\n}\n\nfunction NumericInput(props: NumericInputProps) {\n    return (\n        <input\n            className=\"input\"\n            type=\"text\"\n            style={{ width: \"3em\", marginLeft: 5 }}\n            value={props.value}\n            onChange={event => {\n                const value = event.target.value;\n                if (/^\\d*$/g.test(value)) {\n                    props.onChange(value);\n                }\n            }}\n        />\n    );\n}\n","import React from \"react\";\nimport FileDrop from \"react-file-drop\";\nimport { PlayerProfile, GameState } from \"../../model\";\nimport { SetupPortrait } from \"../playerPortrait/setupPortrait\";\nimport { ImportLinks } from \"./importLinks\";\nimport { PregameScreen } from \"../pregameScreen/pregameScreen\";\nimport { PregameEpisode } from \"../episode/pregameEpisode\";\nimport { shuffle } from \"lodash\";\nimport { RandomButton } from \"./randomXButton\";\nimport { selectPlayer } from \"../playerPortrait/selectedPortrait\";\nimport { mainContentStream$, newEpisode, updateCast } from \"../../subjects/subjects\";\n\ninterface CastingScreenState {\n    players: PlayerProfile[];\n}\n\ninterface CastingScreenProps {\n    cast?: PlayerProfile[];\n}\n\nexport class CastingScreen extends React.Component<CastingScreenProps, CastingScreenState> {\n    constructor(props: CastingScreenProps) {\n        super(props);\n        this.state = { players: props.cast || [] };\n    }\n\n    private handleChange(i: number) {\n        return (event: any) => {\n            const newName = event.target.value.replace(/\\r?\\n|\\r/g, \"\");\n            const newState = { ...this.state };\n            newState.players[i] = new PlayerProfile({\n                imageURL: newState.players[i].imageURL,\n                name: newName\n            });\n            this.setState(newState);\n        };\n    }\n\n    private deleteMethod(i: number) {\n        return () => {\n            const newState = { ...this.state };\n            newState.players.splice(i, 1);\n            this.setState(newState);\n        };\n    }\n\n    private getFiles() {\n        const players = this.state.players;\n        if (!players) {\n            return;\n        }\n        const rows: JSX.Element[] = [];\n        let i = 0;\n        players.forEach(player =>\n            rows.push(\n                <SetupPortrait\n                    name={player.name}\n                    imageUrl={player.imageURL}\n                    onDelete={this.deleteMethod(i)}\n                    onChange={this.handleChange(i)}\n                    key={(++i).toString()}\n                />\n            )\n        );\n        return <div className=\"columns is-gapless is-mobile is-multiline is-centered\">{rows}</div>;\n    }\n\n    private appendProfiles = (profiles: PlayerProfile[]) => {\n        const newState = { ...this.state };\n        profiles.forEach(profile => newState.players.push(profile));\n        this.setState(newState);\n    };\n\n    private submit = async () => {\n        updateCast(this.state.players);\n        mainContentStream$.next(<PregameScreen cast={this.state.players} />);\n        selectPlayer(null);\n        await newEpisode(null);\n        await newEpisode(new PregameEpisode(new GameState(this.state.players)));\n    };\n\n    private random = (amount: number) => {\n        let players = this.state.players;\n        players = shuffle(players);\n        players = players.slice(0, amount);\n        this.setState({ players });\n    };\n\n    public render() {\n        return (\n            <FileDrop onDrop={this.handleDrop}>\n                <div className=\"level\">\n                    <ImportLinks onSubmit={this.appendProfiles} />\n                    <div className=\"level-item\">\n                        <button className=\"button is-danger\" onClick={() => this.setState({ players: [] })}>\n                            Delete all\n                        </button>\n                    </div>\n                    <div className=\"level-item\">\n                        <RandomButton random={this.random} />\n                    </div>\n                    <div className=\"level-item\">\n                        <button\n                            className=\"button is-primary\"\n                            disabled={this.state.players.length < 3}\n                            onClick={this.submit}\n                        >\n                            Submit\n                        </button>\n                    </div>\n                </div>\n                ~ Drop images ~<input type=\"file\" multiple onChange={this.handleUpload} />\n                {this.getFiles()}\n            </FileDrop>\n        );\n    }\n\n    private handleUpload = (event: any) => {\n        this.handleFiles(event.target.files);\n    };\n\n    private handleDrop = (files: FileList | null, event: React.DragEvent) => {\n        if (!files) return;\n        this.handleFiles(files);\n    };\n\n    private handleFiles(files: FileList) {\n        const newState = { ...this.state };\n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            if (file.type.match(/image\\/*/)) {\n                newState.players.push(\n                    new PlayerProfile({\n                        name: file.name.substr(0, file.name.lastIndexOf(\".\")) || file.name,\n                        imageURL: URL.createObjectURL(file)\n                    })\n                );\n            }\n        }\n        this.setState(newState);\n    }\n}\n","import { BehaviorSubject, Subject } from \"rxjs\";\nimport { PregameScreen } from \"../components/pregameScreen/pregameScreen\";\nimport { Episode, PlayerProfile } from \"../model\";\nimport { SelectedPlayerData } from \"../components/playerPortrait/selectedPortrait\";\nimport React from \"react\";\nimport { PortraitDisplayMode, popularityMode } from \"../model/portraitDisplayMode\";\n\n// What is currently being displayed.\nexport const mainContentStream$ = new BehaviorSubject(<PregameScreen cast={[]} />);\n// Push episodes to this subject to add them to the sidebar. Null resets everything.\nexport const episodes$ = new BehaviorSubject<Episode | null>(null);\n// Forcibly switches to an episode. Used when adding a new episode.\nexport const switchEpisode$ = new Subject<number>();\nexport function newEpisode(episode: Episode | null) {\n    episodes$.next(episode);\n}\nexport function switchSceneRelative(n: number) {\n    switchEpisode$.next(n);\n}\n// the list of players in the game\nexport const cast$ = new BehaviorSubject<PlayerProfile[]>([]);\nexport function updateCast(newCast: PlayerProfile[]) {\n    cast$.next(newCast);\n}\nexport function getCast(): PlayerProfile[] {\n    return cast$.value;\n}\n// The player that the user has clicked on.\nexport const selectedPlayer$ = new BehaviorSubject<SelectedPlayerData | null>(null);\nexport function getSelectedPlayer() {\n    return selectedPlayer$.value;\n}\n\n// The display mode selected by the viewsbar.\nexport const displayMode$ = new BehaviorSubject<PortraitDisplayMode>(popularityMode);\n","import React from \"react\";\nimport { CastingScreen } from \"../castingScreen/castingScreen\";\nimport \"./topBar.scss\";\nimport { mainContentStream$, getCast } from \"../../subjects/subjects\";\n\nexport function EditCastLink(): JSX.Element {\n    return (\n        <div\n            className=\"topbar-link\"\n            onClick={() => {\n                mainContentStream$.next(<CastingScreen cast={getCast()} />);\n            }}\n        >\n            Edit Cast\n        </div>\n    );\n}\n\nexport function EditSeasonLink(): JSX.Element {\n    return (\n        <div\n            className=\"topbar-link\"\n            onClick={() => {\n                mainContentStream$.next(<CastingScreen cast={getCast()} />);\n            }}\n        >\n            Edit Season\n        </div>\n    );\n}\n\nexport function Topbar(): JSX.Element {\n    return (\n        <div className=\"level box is-mobile\" style={{ marginTop: 30 }}>\n            <div className=\"level-item\">\n                <EditCastLink />\n            </div>\n            <div className=\"level-item\">\n                <EditSeasonLink />\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { PlayerProfile } from \"../../model\";\nimport { MemoryWall } from \"../memoryWall\";\nimport { NextEpisodeButton } from \"../nextEpisodeButton/nextEpisodeButton\";\nimport { EditCastLink } from \"../topbar/topBar\";\n\ninterface PregameScreenProps {\n    cast: PlayerProfile[];\n}\n\nexport function PregameScreen(props: PregameScreenProps): JSX.Element {\n    if (props.cast.length === 0) {\n        return (\n            <div>\n                Cast is empty. <EditCastLink />\n            </div>\n        );\n    }\n    return (\n        <div>\n            Welcome to Big Brother!\n            <MemoryWall houseguests={props.cast} />\n            <NextEpisodeButton />\n        </div>\n    );\n}\n","import prand from \"pure-rand\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { hashcode } from \"./utilities\";\nimport { cast$ } from \"../subjects/subjects\";\n\nexport class BbRandomGenerator {\n    private rng: prand.RandomGenerator;\n\n    public randomFloat(): number {\n        let result: number;\n        [result, this.rng] = this.rng.next();\n        return result / 2147483647.0;\n    }\n\n    public randomInt(a: number, b: number): number {\n        let result: number;\n        [result, this.rng] = prand.uniformIntDistribution(a, b, this.rng);\n        return result;\n    }\n\n    public flipCoin(): boolean {\n        let result: number;\n        [result, this.rng] = this.rng.next();\n        return result % 2 === 0;\n    }\n\n    public seed(seed: number) {\n        this.rng = prand.xorshift128plus(seed);\n    }\n\n    public constructor(seed: number) {\n        this.rng = prand.xorshift128plus(seed);\n    }\n}\n\nexport function rng() {\n    return rng$.value;\n}\n\nconst rng$ = new BehaviorSubject(new BbRandomGenerator(0));\n\nconst castSub = cast$.subscribe({\n    next: cast => {\n        let castNames = \"\";\n        cast.forEach(houseguest => (castNames += houseguest.name));\n        rng$.next(new BbRandomGenerator(hashcode(castNames)));\n    }\n});\n","import { Houseguest } from \"./houseguest\";\nimport { PlayerProfile } from \"./playerProfile\";\nimport _ from \"lodash\";\nimport { newRelationshipMap, rng } from \"../utils\";\nimport { finalJurySize, getFinalists } from \"./season\";\n\n// TODO: might want to make houseguests a dictionary. {id: houseguest}\nexport function getById(gameState: GameState, id: number): Houseguest {\n    const result = gameState.houseguests.find(hg => hg.id === id);\n    if (!result) {\n        throw new Error(`Failed to find houseguest with id ${id}`);\n    }\n    return result;\n}\n\nexport function exclude(inclusions: Houseguest[], exclusions: Houseguest[]) {\n    const excludedIds = exclusions.map(hg => hg.id);\n    return inclusions.filter(hg => !excludedIds.includes(hg.id) && !hg.isEvicted);\n}\n\nexport function randomPlayer(inclusions: Houseguest[], exclusions: Houseguest[] = []): Houseguest {\n    if (inclusions.length === 0) {\n        throw new Error(\"Tried to get a random player from a list of 0 players.\");\n    }\n    const options = exclude(inclusions, exclusions);\n    const choice = rng().randomInt(0, options.length - 1);\n\n    return options[choice];\n}\n\nexport function nonEvictedHouseguests(gameState: GameState) {\n    return gameState.houseguests.filter(hg => !hg.isEvicted);\n}\nexport function getJurors(gameState: GameState) {\n    return gameState.houseguests.filter(hg => hg.isJury);\n}\n\nexport function inJury(gameState: GameState): Boolean {\n    return gameState.remainingPlayers - getFinalists() <= finalJurySize();\n}\n\nexport function calculatePopularity(hero: Houseguest, house: Houseguest[]) {\n    let sum = 0;\n    let count = 0;\n    const targetId = hero.id;\n    house.forEach(houseguest => {\n        if (houseguest.id !== targetId) {\n            count++;\n            sum += houseguest.relationships[targetId];\n        }\n    });\n    return count === 0 ? 0 : sum / count;\n}\n\nexport class GameState {\n    // Current state of the game after a phase.\n\n    readonly houseguests: Houseguest[] = [];\n    readonly remainingPlayers: number = 0;\n    readonly phase: number = 0;\n    readonly previousHOH?: Houseguest;\n\n    public constructor(init: PlayerProfile[] | GameState) {\n        if (!(init instanceof Array)) {\n            Object.assign(this, init);\n        } else {\n            const profiles = init as PlayerProfile[];\n            this.remainingPlayers = profiles.length;\n            let id = -1;\n            profiles.forEach(profile => {\n                this.houseguests.push(\n                    new Houseguest({\n                        ...profile,\n                        id: ++id,\n                        // popularity: 0,\n                        // deltaPopularity: 0,\n                        relationships: newRelationshipMap(profiles.length, id)\n                    })\n                );\n            });\n        }\n    }\n}\n\nexport class MutableGameState {\n    public houseguests: Houseguest[] = [];\n    public remainingPlayers: number = 0;\n    public phase: number = 0;\n    public previousHOH?: Houseguest;\n\n    public constructor(init: GameState | MutableGameState) {\n        const copy = _.cloneDeep(init);\n        Object.assign(this, copy);\n    }\n}\n","import { BigBrotherVanilla } from \"../components/episode/bigBrotherEpisode\";\nimport { EpisodeFactory } from \"../components/episode/episodeFactory\";\nimport { GameState } from \"./gameState\";\nimport { EpisodeType, Episode } from \".\";\nimport { BigBrotherFinale } from \"../components/episode/bigBrotherFinale\";\nimport { cast$ } from \"../subjects/subjects\";\n\nexport function finalJurySize() {\n    return jurors;\n}\n\nlet jurors = 7;\nconst sub = cast$.subscribe({\n    next: newCast => {\n        let players = newCast.length;\n        players = Math.round(players * 0.55);\n        if (players % 2 === 0) {\n            players--;\n        }\n        jurors = players;\n    }\n});\n\nexport function getFinalists() {\n    return 2;\n}\n\nexport class Season {\n    private factory: EpisodeFactory;\n\n    public constructor() {\n        this.factory = new EpisodeFactory();\n    }\n\n    // In the future, this would all be customizable,\n    // and not just all big brother episodes by default.\n\n    public renderEpisode(gameState: GameState, type: EpisodeType): Episode {\n        return this.factory.nextEpisode(gameState, type);\n    }\n\n    public whichEpisodeType(players: number) {\n        if (players === 3) {\n            return BigBrotherFinale;\n        }\n        return BigBrotherVanilla;\n    }\n}\n","import React from \"react\";\nimport { GameState } from \"../../model/gameState\";\nimport { ViewsBar } from \"../viewsBar/viewBar\";\ninterface InitScene {\n    readonly title: string;\n    readonly gameState: GameState;\n    readonly content: JSX.Element;\n}\nexport class Scene {\n    readonly title: string = \"\";\n    readonly gameState: GameState = new GameState([]);\n    readonly content: JSX.Element = <div>{`Error while rendering ${this.title}`}</div>;\n    public render: JSX.Element;\n    public constructor(init: Partial<InitScene>) {\n        Object.assign(this, init);\n        this.render = (\n            <div>\n                <ViewsBar />\n                {this.content}\n            </div>\n        );\n    }\n}\n","import { Houseguest, inJury, GameState } from \"../../model\";\n\nexport const relationship = (hero: Houseguest, villain: Houseguest) => hero.relationships[villain.id];\n\nexport function favouriteIndex(hero: Houseguest, options: Houseguest[]) {\n    // Return the index of the houseguest that hero has the best relationship with.\n    return highestScore(hero, options, relationship);\n}\n\nexport function highestScore(\n    hero: Houseguest,\n    options: Houseguest[],\n    callback: (hero: Houseguest, villain: Houseguest) => number\n) {\n    let highestIndex = 0;\n    let highestScore = -Infinity;\n    options.forEach((villain, i) => {\n        const currentScore = callback(hero, villain);\n        if (currentScore > highestScore) {\n            highestIndex = i;\n            highestScore = currentScore;\n        }\n    });\n    return highestIndex;\n}\nexport function lowestScore(\n    hero: Houseguest,\n    options: Houseguest[],\n    callback: (hero: Houseguest, villain: Houseguest) => number\n) {\n    let lowestIndex = 0;\n    let lowestScore = Infinity;\n    options.forEach((villain, i) => {\n        const currentScore = callback(hero, villain);\n        if (currentScore < lowestScore) {\n            lowestIndex = i;\n            lowestScore = currentScore;\n        }\n    });\n    return lowestIndex;\n}\n\nexport function doesHeroWinTheFinale(\n    hgs: { hero: Houseguest; villain: Houseguest },\n    jury: Houseguest[]\n): boolean {\n    const hero = hgs.hero;\n    const villain = hgs.villain;\n    let heroVotes = 0;\n    let villainVotes = 0;\n    jury.forEach(juror => {\n        if (juror.id === hero.id || juror.id === villain.id) {\n            return;\n        }\n        if (relationship(hero, juror) > relationship(villain, juror)) {\n            heroVotes++;\n        } else {\n            villainVotes++;\n        }\n    });\n    return heroVotes > villainVotes;\n}\n\nexport function heroShouldTargetSuperiors(hero: Houseguest, gameState: GameState): boolean {\n    const superiors = hero.superiors.size;\n    const inferiors = gameState.remainingPlayers - 1 - hero.superiors.size;\n    // Target the larger group. If they are equal, target superiors.\n    return superiors >= inferiors;\n}\n\n// TODO: this function can just honestly die. it's only used in nomination logic (which sucks anyways)\n// when I do the new logic, I think people who are dead center should target their superiors. works in F5.\n\nexport function hitList(hero: Houseguest, options: Houseguest[], gameState: GameState): Set<number> {\n    let result = options;\n    // jury logic is not affected by someone who is dead center in power rankings\n    if (inJury(gameState) && heroShouldTargetSuperiors(hero, gameState)) {\n        if (hero.superiors.size * 2 < gameState.remainingPlayers - 1) {\n            result = options.filter(hg => !hero.superiors.has(hg.id));\n        } else {\n            result = options.filter(hg => hero.superiors.has(hg.id));\n        }\n    } else {\n    }\n    return new Set(result.map(hg => hg.id));\n}\n","import { Houseguest, GameState, nonEvictedHouseguests, inJury, exclude } from \"../../model\";\nimport { favouriteIndex, relationship, lowestScore, hitList, heroShouldTargetSuperiors } from \"./aiUtils\";\nimport { classifyRelationship, RelationshipType as Relationship } from \"./classifyRelationship\";\n\ninterface NumberWithLogic {\n    decision: number;\n    reason: string;\n}\n\ninterface HouseguestWithLogic {\n    decision: Houseguest | null;\n    reason: string;\n}\n\n// Return the index of the eviction target.\nexport function castEvictionVote(\n    hero: Houseguest,\n    nominees: Houseguest[],\n    gameState: GameState\n): NumberWithLogic {\n    if (inJury(gameState)) {\n        return cutthroatVoteJury(hero, nominees, gameState);\n    } else {\n        return cutthroatVote(hero, nominees);\n    }\n}\n\nfunction cutthroatVoteJury(hero: Houseguest, nominees: Houseguest[], gameState: GameState): NumberWithLogic {\n    const nom0 = nominees[0];\n    const nom1 = nominees[1];\n    const zeroIsInferior = !hero.superiors.has(nom0.id);\n    const oneIsInferior = !hero.superiors.has(nom1.id);\n    // if there is no sup/inf difference, no point in doing special logic for it\n    if (zeroIsInferior === oneIsInferior) {\n        return cutthroatVote(hero, nominees);\n    }\n    // Don't evict the last person in the game you can beat\n    if (gameState.remainingPlayers - hero.superiors.size - 1 === 1 && (zeroIsInferior || oneIsInferior)) {\n        const nonVote = zeroIsInferior ? 0 : 1;\n        return {\n            decision: zeroIsInferior ? 1 : 0,\n            reason: `I can't evict ${nominees[nonVote].name}, because they are the last person I can beat.`\n        };\n    }\n    const target = heroShouldTargetSuperiors(hero, gameState) === oneIsInferior ? 0 : 1;\n    const nonTarget = target ? 0 : 1;\n    const excuse = heroShouldTargetSuperiors(hero, gameState)\n        ? `I can't beat ${nominees[target].name} in the end.`\n        : `I need to keep ${nominees[nonTarget].name} around as a shield.`;\n    const targetIsFriend =\n        classifyRelationship(\n            hero.popularity,\n            nominees[target].popularity,\n            hero.relationships[nominees[target].id]\n        ) === Relationship.Friend;\n    const nonTargetIsNonFriend =\n        classifyRelationship(\n            hero.popularity,\n            nominees[nonTarget].popularity,\n            hero.relationships[nominees[nonTarget].id]\n        ) !== Relationship.Friend;\n    const nonTargetIsFriend = !nonTargetIsNonFriend;\n    const targetIsNonFriend = !targetIsFriend;\n    // the only reason to not evict your target is if he is your only friend on the block\n    if (targetIsFriend && nonTargetIsNonFriend) {\n        return { decision: nonTarget, reason: `${nominees[nonTarget].name} is my enemy.` };\n    } else if (targetIsFriend && nonTargetIsFriend) {\n        return { decision: target, reason: `Both noms are my friends, but ${excuse}` };\n    } else if (targetIsNonFriend && nonTargetIsNonFriend) {\n        return { decision: target, reason: `Neither of the noms are my friends, but ${excuse}` };\n    } else {\n        return { decision: target, reason: `${excuse}` };\n    }\n}\n\n// TODO: only works for 2 nominees\nfunction cutthroatVote(hero: Houseguest, nominees: Houseguest[]): NumberWithLogic {\n    const nom0 = nominees[0];\n    const nom1 = nominees[1];\n    const r0 = classifyRelationship(hero.popularity, nom0.popularity, hero.relationships[nom0.id]);\n    const r1 = classifyRelationship(hero.popularity, nom1.popularity, hero.relationships[nom1.id]);\n    if (r0 === Relationship.Enemy && r1 === Relationship.Enemy) {\n        return {\n            decision: nom0.popularity > nom1.popularity ? 0 : 1,\n            reason: \"Both noms are my enemies, so I voted for the more popular one.\"\n        };\n    } else if (\n        (r0 === Relationship.Enemy && r1 !== Relationship.Enemy) ||\n        (r1 === Relationship.Enemy && r0 !== Relationship.Enemy)\n    ) {\n        const vote = r0 === Relationship.Enemy ? 0 : 1;\n        return { decision: vote, reason: `${nominees[vote].name} is my enemy.` };\n    } else if (\n        (r0 !== Relationship.Friend && r1 === Relationship.Friend) ||\n        (r1 !== Relationship.Friend && r0 === Relationship.Friend)\n    ) {\n        const vote = r0 !== Relationship.Friend ? 0 : 1;\n        const nonVote = vote === 0 ? 1 : 0;\n        return { decision: vote, reason: `${nominees[nonVote].name} is my friend.` };\n    }\n    const vote = lowestScore(hero, nominees, relationship);\n    return {\n        decision: vote,\n        reason: `Both noms are my friends. but I like ${nominees[vote === 0 ? 1 : 0].name} more.`\n    };\n}\n\n// TODO: target and pawn based nominations, different pre and post jury.\nexport function nominateNPlayers(\n    hero: Houseguest,\n    options: Houseguest[],\n    gameState: GameState,\n    n: number\n): NumberWithLogic[] {\n    const result: NumberWithLogic[] = [];\n    const hitlist = hitList(hero, options, gameState);\n    let trueOptions = options.filter(hg => hitlist.has(hg.id));\n    if (trueOptions.length === 0) {\n        // if there are no options, we must sadly deviate from the hit list\n        trueOptions = options;\n    }\n    while (result.length < n) {\n        const decision = trueOptions[lowestScore(hero, trueOptions, relationship)];\n        const reason = \"I think you are ugly\";\n        result.push({ decision: decision.id, reason });\n        trueOptions = exclude(trueOptions, [decision]);\n        if (trueOptions.length === 0) {\n            trueOptions = options.filter(hg => !hitlist.has(hg.id));\n        }\n    }\n    return result;\n}\n\nexport function useGoldenVeto(\n    hero: Houseguest,\n    nominees: Houseguest[],\n    gameState: GameState\n): HouseguestWithLogic {\n    let result: HouseguestWithLogic;\n    if (hero.id == nominees[0].id || hero.id == nominees[1].id) {\n        result = { decision: hero, reason: \"I am going to save myself.\" };\n    } else {\n        if (inJury(gameState)) {\n            // Note that I am currently not using the post-jury veto logic, primarily because it sucks at the moment\n            result = useGoldenVetoPreJury(hero, nominees);\n        } else {\n            result = useGoldenVetoPreJury(hero, nominees);\n        }\n        if (nonEvictedHouseguests(gameState).length === 4) {\n            result = {\n                decision: null,\n                reason: \"It doesn't make sense to use the veto here.\"\n            };\n        }\n    }\n    return result || null;\n}\n\n// works with any number of nominees\nfunction useGoldenVetoPostJury(\n    hero: Houseguest,\n    nominees: Houseguest[],\n    gameState: GameState\n): HouseguestWithLogic {\n    let save = -1;\n    let reason = \"No reason specified.\";\n    let potentialSave: Houseguest | null = null;\n    let alwaysSave: Houseguest | null = null;\n    // identify potential save targets\n    nominees.forEach((nominee: Houseguest) => {\n        const relationship = classifyRelationship(\n            hero.popularity,\n            nominee.popularity,\n            hero.relationships[nominee.id]\n        );\n        const shouldTargetSuperiors = heroShouldTargetSuperiors(hero, gameState);\n        const nomineeIsSuperior: boolean = hero.superiors.has(nominee.id);\n        // always save the last person you can beat\n        if (gameState.remainingPlayers - hero.superiors.size - 1 === 1 && !nomineeIsSuperior) {\n            alwaysSave = nominee;\n            reason = `I have to save ${nominee.name}, because they are the last person I can beat.`;\n        }\n        // must be a friend and a non-target\n        // TODO: some people have the entire game as targets. they shouldn't be affected. --------------------------\n        if (relationship === Relationship.Friend && nomineeIsSuperior !== shouldTargetSuperiors) {\n            const excuse = heroShouldTargetSuperiors(hero, gameState)\n                ? `I can beat them in the end.`\n                : `I need to keep them around as a shield.`;\n            if (potentialSave) {\n                potentialSave =\n                    hero.relationshipWith(nominee) > hero.relationshipWith(potentialSave)\n                        ? nominee\n                        : potentialSave;\n            } else {\n                reason = `${nominee.name} is my friend, and ${excuse} `;\n                potentialSave = nominee;\n            }\n        }\n    });\n    if (alwaysSave) {\n        return { decision: alwaysSave, reason };\n    } else if (potentialSave) {\n        return { decision: potentialSave, reason };\n    } else {\n        return { decision: null, reason: \"Not sure what to put here yet.\" };\n    }\n}\n\n// TODO: only save your top 25% of friends. but if you have very few friends, save all your friends.\nfunction useGoldenVetoPreJury(hero: Houseguest, nominees: Houseguest[]): HouseguestWithLogic {\n    let save = -1;\n    let reason = \"Neither of these nominees are my friends.\";\n    const rel0 = classifyRelationship(\n        hero.popularity,\n        nominees[0].popularity,\n        hero.relationshipWith(nominees[0])\n    );\n    const rel1 = classifyRelationship(\n        hero.popularity,\n        nominees[1].popularity,\n        hero.relationshipWith(nominees[1])\n    );\n    // basic logic that only saves friends. Doesn't take into account jury stuff.\n    if (rel0 === Relationship.Friend && rel1 !== Relationship.Friend) {\n        save = 0;\n        reason = `${nominees[0].name} is my friend.`;\n    } else if (rel1 === Relationship.Friend && rel0 !== Relationship.Friend) {\n        save = 1;\n        reason = `${nominees[1].name} is my friend.`;\n    } else if (rel0 === Relationship.Friend && rel1 === Relationship.Friend) {\n        save = Math.max(nominees[0].popularity, nominees[1].popularity) === nominees[0].popularity ? 0 : 1;\n        reason = `Both nominees are my friends, but I like ${nominees[save].name} more.`;\n    }\n    return { decision: nominees[save], reason };\n}\n\nexport function castJuryVote(juror: Houseguest, finalists: Houseguest[]): number {\n    return favouriteIndex(juror, finalists);\n}\n","import React from \"react\";\n\nexport function Centered(props: any): JSX.Element {\n    return <p style={{ textAlign: \"center\" }}>{props.children} </p>;\n}\n\nexport function CenteredBold(props: any): JSX.Element {\n    return (\n        <Centered>\n            <b>{props.children} </b>\n        </Centered>\n    );\n}\n","import { GameState, getJurors, nonEvictedHouseguests } from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { castJuryVote } from \"../../../utils/ai/aiApi\";\nimport { Portrait } from \"../../playerPortrait/portraits\";\nimport React from \"react\";\n\nexport function juryVoteScene(initialGameState: GameState): Scene {\n    const jurors = getJurors(initialGameState);\n    const finalists = nonEvictedHouseguests(initialGameState);\n    let voteCount = [0, 0];\n    const votes = jurors.map(juror => {\n        const result = castJuryVote(juror, finalists);\n        voteCount[result]++;\n        return result;\n    });\n    const voteBlocks = [];\n\n    for (let i = 0; i < votes.length; i++) {\n        voteBlocks.push(\n            <div className=\"columns\" key={`jury-vote${i}`}>\n                <Portrait houseguest={jurors[i]} />\n                <p>\n                    <b>{`${jurors[i].name} has voted for...`}</b>\n                </p>\n                <Portrait houseguest={finalists[votes[i]]} />\n            </div>\n        );\n    }\n    const winner = voteCount[0] > voteCount[1] ? finalists[0] : finalists[1];\n\n    const scene: Scene = new Scene({\n        title: \"Jury Votes\",\n        gameState: initialGameState,\n        content: (\n            <div>\n                {voteBlocks}\n                <Portrait houseguest={winner} />\n                {`Congratulations, ${winner.name}, you are the winner of Big Brother!!!`}\n            </div>\n        )\n    });\n    return scene;\n}\n","import React from \"react\";\nimport { EpisodeType, Episode, InitEpisode } from \"./episodes\";\nimport { Scene } from \"./scene\";\nimport { GameState } from \"../../model\";\nimport { MemoryWall } from \"../memoryWall\";\nimport { NextEpisodeButton } from \"../nextEpisodeButton/nextEpisodeButton\";\nimport { finalHohCompScene } from \"./scenes/finalHohCompScene\";\nimport { finalEvictionScene } from \"./scenes/finalEvictionScene\";\nimport { juryVoteScene } from \"./scenes/juryVoteScene\";\n\nexport const BigBrotherFinale: EpisodeType = {\n    canPlayWith: (n: number) => n === 3,\n    eliminates: 2\n};\n\nexport function generateBbFinaleInit(initialGameState: GameState): BigBrotherFinaleEpisode {\n    const title = \"Finale\";\n    const content = (\n        <div>\n            Finale Night\n            <MemoryWall houseguests={initialGameState.houseguests} /> <br />\n            <NextEpisodeButton />\n        </div>\n    );\n    let currentGameState;\n    let hohCompScene;\n    let finalHoH;\n    const scenes = [];\n    [currentGameState, hohCompScene, finalHoH] = finalHohCompScene(initialGameState);\n    scenes.push(hohCompScene);\n    let finalEviction;\n    [currentGameState, finalEviction] = finalEvictionScene(currentGameState, finalHoH);\n    scenes.push(finalEviction);\n    scenes.push(juryVoteScene(currentGameState));\n    const gameState = currentGameState;\n    return new BigBrotherFinaleEpisode({ gameState, content, title, scenes, type: BigBrotherFinale });\n}\n\nexport class BigBrotherFinaleEpisode extends Episode {\n    readonly title: string;\n    readonly scenes: Scene[];\n    readonly content: JSX.Element;\n    readonly gameState: GameState;\n    readonly type = BigBrotherFinale;\n\n    public constructor(init: InitEpisode) {\n        super(init);\n        this.title = init.title;\n        this.scenes = init.scenes;\n        this.content = init.content;\n        this.gameState = init.gameState;\n    }\n}\n","import {\n    GameState,\n    Houseguest,\n    MutableGameState,\n    nonEvictedHouseguests,\n    randomPlayer,\n    getById\n} from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { Portraits, Portrait } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\n\nexport function finalHohCompScene(initialGameState: GameState): [GameState, Scene, Houseguest] {\n    const newGameState = new MutableGameState(initialGameState);\n    const final3 = nonEvictedHouseguests(initialGameState);\n    const enduranceWinner = randomPlayer(final3);\n    const enduranceLosers = final3.filter(hg => hg.id !== enduranceWinner.id);\n    const skillWinner = randomPlayer(final3, [enduranceWinner]);\n    const finalHoH = getById(newGameState, randomPlayer([enduranceWinner, skillWinner]).id);\n    finalHoH.hohWins++;\n    const scene: Scene = new Scene({\n        title: \"Final HoH Competition\",\n        gameState: newGameState,\n        content: (\n            <div>\n                <p>The final 3 houseguests compete in the endurance competition.</p>\n                <Portraits houseguests={final3} />\n                <Portrait houseguest={enduranceWinner} />\n                <p>\n                    <b>{`${enduranceWinner.name} has won the endurance competition!`}</b>\n                </p>\n                <hr />\n                <p>{`${enduranceLosers[0].name} and ${\n                    enduranceLosers[1].name\n                } compete in the skill competition.`}</p>\n                <Portraits houseguests={enduranceLosers} />\n                <Portrait houseguest={skillWinner} />\n                <p>\n                    <b>{`${skillWinner.name} has won the skill competition!`}</b>\n                </p>\n                <hr />\n                <p>{`${enduranceWinner.name} and ${skillWinner.name} compete in the quiz competition.`}</p>\n                <Portraits houseguests={[enduranceWinner, skillWinner]} />\n                <Portrait houseguest={finalHoH} />\n                <p>\n                    <b>{`Congratulations ${finalHoH.name}, you are the final Head of Household!`}</b>\n                </p>\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    newGameState.phase++;\n    return [new GameState(newGameState), scene, finalHoH];\n}\n","import { GameState, Houseguest, MutableGameState, nonEvictedHouseguests } from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { castEvictionVote } from \"../../../utils/ai/aiApi\";\nimport { ProfileHouseguest } from \"../../memoryWall\";\nimport { evictHouseguest } from \"../bigBrotherEpisode\";\nimport { Portrait, Portraits } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\nimport { CenteredBold, Centered } from \"../../layout/centered\";\n\nexport function finalEvictionScene(initialGameState: GameState, HoH: Houseguest): [GameState, Scene] {\n    const newGameState = new MutableGameState(initialGameState);\n    const nominees = nonEvictedHouseguests(newGameState).filter(hg => hg.id !== HoH.id);\n    const { decision: vote, reason } = castEvictionVote(HoH, nominees, newGameState);\n    const evictee = nominees[vote];\n    const hoh: ProfileHouseguest = { ...HoH };\n    hoh.tooltip = reason;\n    evictHouseguest(newGameState, evictee.id);\n    const scene: Scene = new Scene({\n        title: \"Final Eviction\",\n        gameState: newGameState,\n        content: (\n            <div>\n                <div style={{ textAlign: \"center\" }}>\n                    {`As the final HoH of the season, ${HoH.name}, you may now cast the sole vote to evict.`}\n                    <Portrait houseguest={hoh} centered={true} />\n                    <CenteredBold>{`I vote to evict ${evictee.name}.`}</CenteredBold>\n                    <Portraits houseguests={nominees} centered={true} />\n                    <Centered>\n                        It's official... {evictee.name}, you will be the final person leaving the Big Brother\n                        House.\n                    </Centered>\n                </div>\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    return [new GameState(newGameState), scene];\n}\n","import {\n    GameState,\n    MutableGameState,\n    calculatePopularity,\n    nonEvictedHouseguests,\n    inJury,\n    getJurors\n} from \"../../model/gameState\";\nimport { Episode, Houseguest } from \"../../model\";\nimport { EpisodeType } from \"./episodes\";\nimport { BigBrotherVanilla, generateBbVanilla } from \"./bigBrotherEpisode\";\nimport { BigBrotherFinale, generateBbFinaleInit } from \"./bigBrotherFinale\";\nimport { rng, roundTwoDigits } from \"../../utils\";\nimport { doesHeroWinTheFinale as heroWinsTheFinale } from \"../../utils/ai/aiUtils\";\nimport { classifyRelationship, RelationshipType as Relationship } from \"../../utils/ai/classifyRelationship\";\nimport { PowerRanking } from \"../../model/powerRanking\";\n\nfunction firstImpressions(houseguests: Houseguest[]) {\n    for (let i = 0; i < houseguests.length; i++) {\n        const iMap = houseguests[i].relationships;\n        for (let j = i + 1; j < houseguests.length; j++) {\n            // creates a bunch of 100% random mutual relationships\n            const jMap = houseguests[j].relationships;\n            const impression = rng().randomFloat();\n            jMap[i] = impression;\n            iMap[j] = impression;\n        }\n    }\n}\n\nfunction populateSuperiors(houseguests: Houseguest[]) {\n    for (let i = 0; i < houseguests.length; i++) {\n        const hero = houseguests[i];\n        for (let j = i + 1; j < houseguests.length; j++) {\n            const villain = houseguests[j];\n            if (heroWinsTheFinale({ hero, villain }, houseguests)) {\n                villain.superiors.add(hero.id);\n            } else {\n                hero.superiors.add(villain.id);\n            }\n        }\n    }\n}\n\nfunction updatePowerRankings(houseguests: Houseguest[]) {\n    houseguests.forEach(hg => {\n        hg.powerRanking = new PowerRanking(\n            houseguests.length - 1 - hg.superiors.size,\n            houseguests.length - 1\n        );\n    });\n}\n\nfunction updatePopularity(gameState: GameState) {\n    const houseguests = nonEvictedHouseguests(gameState);\n    houseguests.forEach(hg => {\n        const result = calculatePopularity(hg, nonEvictedHouseguests(gameState));\n        hg.deltaPopularity = (roundTwoDigits(result) - roundTwoDigits(hg.popularity)) / 100;\n        hg.popularity = result;\n    });\n}\n\nfunction updateFriendCounts(gameState: GameState) {\n    const houseguests = nonEvictedHouseguests(gameState);\n    houseguests.forEach(hero => {\n        hero.getFriendEnemyCount = () => {\n            let friends = 0;\n            let enemies = 0;\n            houseguests.forEach(villain => {\n                const rel = classifyRelationship(\n                    hero.popularity,\n                    villain.popularity,\n                    hero.relationshipWith(villain)\n                );\n                if (hero.id === villain.id) {\n                    return;\n                } else if (rel === Relationship.Friend) {\n                    friends++;\n                } else if (rel === Relationship.Enemy) {\n                    enemies++;\n                }\n            });\n            return { friends, enemies };\n        };\n    });\n}\n\nexport class EpisodeFactory {\n    public nextEpisode(gameState: GameState, episodeType: EpisodeType): Episode {\n        let newState = new MutableGameState(gameState);\n        if (gameState.phase === 0) {\n            firstImpressions(newState.houseguests);\n        }\n        // If jury starts this episode, populate superior/inferior data. In the future, every jury ep. (dynamic rels)\n        if (inJury(gameState) && getJurors(gameState).length === 0) {\n            populateSuperiors(nonEvictedHouseguests(newState));\n        }\n        if (inJury(gameState)) {\n            updatePowerRankings(nonEvictedHouseguests(newState));\n        }\n        updatePopularity(newState);\n        updateFriendCounts(newState);\n        const finalState = new GameState(newState);\n        switch (episodeType) {\n            case BigBrotherVanilla:\n                return generateBbVanilla(finalState);\n            case BigBrotherFinale:\n                return generateBbFinaleInit(finalState);\n            default:\n                throw new Error(\"Unsupported Episode Type\");\n        }\n    }\n}\n","import {\n    MutableGameState,\n    getById,\n    inJury,\n    nonEvictedHouseguests,\n    GameState,\n    Houseguest,\n    EpisodeType,\n    Episode,\n    InitEpisode\n} from \"../../model\";\nimport { getFinalists, finalJurySize } from \"../../model/season\";\nimport { generateHohCompScene } from \"./scenes/hohCompScene\";\nimport { generateNomCeremonyScene } from \"./scenes/nomCeremonyScene\";\nimport { generateVetoCompScene } from \"./scenes/vetoCompScene\";\nimport { generateVetoCeremonyScene } from \"./scenes/vetoCeremonyScene\";\nimport { generateEvictionScene } from \"./scenes/evictionScene\";\nimport { MemoryWall } from \"../memoryWall\";\nimport { NextEpisodeButton } from \"../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\nimport { Scene } from \"./scene\";\n\nexport const BigBrotherVanilla: EpisodeType = {\n    canPlayWith: (n: number) => {\n        return n > 1;\n    },\n    eliminates: 1\n};\n\n// Refactoring ideas\n/**\n * Might be best to start passing ids instead of houseguests for HoH/nominees/veto winner\n */\n\nexport function evictHouseguest(gameState: MutableGameState, id: number) {\n    const evictee = getById(gameState, id);\n    evictee.isEvicted = true;\n    if (gameState.remainingPlayers - getFinalists() <= finalJurySize()) {\n        evictee.isJury = true;\n    }\n    if (inJury(gameState)) {\n        nonEvictedHouseguests(gameState).forEach(hg => {\n            hg.superiors.delete(evictee.id);\n        });\n    }\n    gameState.remainingPlayers--;\n}\n\nexport function generateBbVanilla(initialGameState: GameState): BigBrotherVanillaEpisode {\n    let currentGameState;\n    let hohCompScene;\n    let hoh: Houseguest;\n    const scenes = [];\n\n    [currentGameState, hohCompScene, hoh] = generateHohCompScene(initialGameState);\n    scenes.push(hohCompScene);\n\n    let nomCeremonyScene;\n    let nominees: Houseguest[];\n    [currentGameState, nomCeremonyScene, nominees] = generateNomCeremonyScene(currentGameState, hoh);\n    scenes.push(nomCeremonyScene);\n\n    let vetoCompScene;\n    let povWinner: Houseguest;\n    [currentGameState, vetoCompScene, povWinner] = generateVetoCompScene(\n        currentGameState,\n        hoh,\n        nominees[0],\n        nominees[1]\n    );\n    scenes.push(vetoCompScene);\n    let vetoCeremonyScene;\n\n    [vetoCeremonyScene, nominees] = generateVetoCeremonyScene(currentGameState, hoh, nominees, povWinner);\n    scenes.push(vetoCeremonyScene);\n\n    let evictionScene;\n    [currentGameState, evictionScene] = generateEvictionScene(currentGameState, hoh, nominees);\n    scenes.push(evictionScene);\n\n    const title = `Week ${currentGameState.phase}`;\n    const content = (\n        <div>\n            {`Week ${currentGameState.phase}`}\n            <MemoryWall houseguests={initialGameState.houseguests} /> <br />\n            <NextEpisodeButton />\n        </div>\n    );\n    const gameState = new GameState(currentGameState);\n    return new BigBrotherVanillaEpisode({ title, scenes, content, gameState, type: BigBrotherVanilla });\n}\nexport class BigBrotherVanillaEpisode extends Episode {\n    readonly title: string;\n    readonly scenes: Scene[];\n    readonly content: JSX.Element;\n    readonly gameState: GameState;\n    readonly type = BigBrotherVanilla;\n\n    public constructor(init: InitEpisode) {\n        super(init);\n        this.title = init.title;\n        this.scenes = init.scenes;\n        this.content = init.content;\n        this.gameState = init.gameState;\n    }\n}\n","import { GameState, Houseguest, MutableGameState, randomPlayer } from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { Portrait } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\nimport { Centered, CenteredBold } from \"../../layout/centered\";\n\nexport function generateHohCompScene(initialGameState: GameState): [GameState, Scene, Houseguest] {\n    const newGameState = new MutableGameState(initialGameState);\n\n    const previousHoh = initialGameState.previousHOH ? [initialGameState.previousHOH] : [];\n    const newHoH: Houseguest = randomPlayer(newGameState.houseguests, previousHoh);\n    newGameState.previousHOH = newHoH;\n    newGameState.phase++;\n    newHoH.hohWins += 1;\n\n    const scene = new Scene({\n        title: \"HoH Competition\",\n        gameState: initialGameState,\n        content: (\n            <div>\n                <Centered>\n                    {previousHoh.length > 0 &&\n                        `Houseguests, it's time to find a new Head of Household. As outgoing HoH, ${previousHoh[0].name} will not compete. `}\n                </Centered>\n                <Portrait centered={true} houseguest={newHoH} />\n                <CenteredBold>{newHoH.name} has won Head of Household!</CenteredBold>\n                <br />\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n\n    return [new GameState(newGameState), scene, newHoH];\n}\n","import {\n    GameState,\n    Houseguest,\n    MutableGameState,\n    exclude,\n    nonEvictedHouseguests,\n    getById\n} from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { shuffle } from \"lodash\";\nimport { Portrait } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\nimport { nominateNPlayers } from \"../../../utils/ai/aiApi\";\nimport { Centered, CenteredBold } from \"../../layout/centered\";\nimport { DividerBox } from \"../../layout/box\";\n\nexport function generateNomCeremonyScene(\n    initialGameState: GameState,\n    HoH: Houseguest\n): [GameState, Scene, Houseguest[]] {\n    const newGameState = new MutableGameState(initialGameState);\n    const options = exclude(nonEvictedHouseguests(newGameState), [HoH]);\n    const nom1 = getById(newGameState, nominateNPlayers(HoH, options, newGameState, 2)[0].decision);\n    const nom2 = getById(\n        newGameState,\n        nominateNPlayers(HoH, exclude(options, [nom1]), newGameState, 2)[1].decision\n    );\n    nom1.nominations++;\n    nom2.nominations++;\n    const noms = shuffle([nom1, nom2]);\n    const scene = new Scene({\n        title: \"Nomination Ceremony\",\n        gameState: newGameState,\n        content: (\n            <div>\n                <Centered>\n                    This is the nomination ceremony. It is my responsibility as the Head of Household to\n                    nominate two houseguests for eviction.\n                </Centered>\n                <Portrait centered={true} houseguest={HoH} />\n                <div className=\"columns is-marginless is-centered\">\n                    <DividerBox className=\"column\">\n                        <Centered> My first nominee is...</Centered>\n                        <Portrait centered={true} houseguest={noms[0]} />\n                    </DividerBox>\n                    <DividerBox className=\"column\">\n                        <Centered>My second nominee is...</Centered>\n                        <Portrait centered={true} houseguest={noms[1]} />\n                    </DividerBox>\n                </div>\n                <CenteredBold>{`I have nominated you, ${noms[0].name} and you, ${noms[1].name} for eviction.`}</CenteredBold>\n                <br />\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    return [new GameState(newGameState), scene, [nom1, nom2]];\n}\n","import {\n    GameState,\n    Houseguest,\n    MutableGameState,\n    nonEvictedHouseguests,\n    randomPlayer,\n    getById\n} from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { Portraits } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\nimport { Centered, CenteredBold } from \"../../layout/centered\";\n\nexport function generateVetoCompScene(\n    initialGameState: GameState,\n    HoH: Houseguest,\n    nom1: Houseguest,\n    nom2: Houseguest\n): [GameState, Scene, Houseguest] {\n    const newGameState = new MutableGameState(initialGameState);\n\n    // pick players\n    const choices = nonEvictedHouseguests(newGameState);\n    let povPlayers: any[] = [];\n    const everyoneWillPlay = choices.length <= 6;\n\n    if (everyoneWillPlay) {\n        povPlayers.push({ ...HoH });\n        povPlayers.push({ ...nom1 });\n        povPlayers.push({ ...nom2 });\n        while (povPlayers.length < choices.length) {\n            povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n        }\n    } else {\n        // TODO: houseguests choice picks\n        povPlayers.push({ ...HoH });\n        povPlayers.push({ ...nom1 });\n        povPlayers.push({ ...nom2 });\n        povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n        povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n        povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n    }\n    let povWinner = randomPlayer(povPlayers);\n    povWinner = getById(newGameState, povWinner.id);\n    povWinner.povWins++;\n    let introText: string;\n    if (everyoneWillPlay) {\n        introText = \"Everyone left in the house will compete in this challenge.\";\n    } else {\n        introText = `${HoH.name}, as Head of Household, and ${nom1.name} and ${nom2.name} as nominees, will compete, as well as 3 others chosen by random draw.`;\n    }\n    const extras = [povPlayers[3]];\n    povPlayers[4] && extras.push(povPlayers[4]);\n    povPlayers[5] && extras.push(povPlayers[5]);\n    const scene = new Scene({\n        title: \"Veto Competition\",\n        gameState: initialGameState,\n        content: (\n            <div>\n                <Centered>It's time to pick players for the veto competition.</Centered>\n                <Portraits centered={true} houseguests={[HoH, nom1, nom2]} />\n                <Centered>{introText}</Centered>\n                <Portraits centered={true} houseguests={extras} />\n                <Centered>...</Centered>\n                <Portraits centered={true} houseguests={[povWinner]} />\n                <CenteredBold>{`${povWinner.name} has won the Golden Power of Veto!`}</CenteredBold>\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    return [new GameState(newGameState), scene, povWinner];\n}\n","import { GameState, Houseguest, getById, exclude } from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { useGoldenVeto, nominateNPlayers } from \"../../../utils/ai/aiApi\";\nimport { Portrait } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\nimport { Centered, CenteredBold } from \"../../layout/centered\";\nimport { DividerBox } from \"../../layout/box\";\n\nexport function generateVetoCeremonyScene(\n    initialGameState: GameState,\n    HoH: Houseguest,\n    initialNominees: Houseguest[],\n    povWinner: Houseguest\n): [Scene, Houseguest[]] {\n    let povTarget: Houseguest | null = null;\n    let descisionText = \"\";\n    initialNominees[0] = getById(initialGameState, initialNominees[0].id);\n    initialNominees[1] = getById(initialGameState, initialNominees[1].id);\n    HoH = getById(initialGameState, HoH.id);\n    const vetoChoice = useGoldenVeto(povWinner, initialNominees, initialGameState);\n    povTarget = vetoChoice.decision;\n    if (!povTarget) {\n        descisionText += \"... not to use the power of veto.\";\n    } else if (povWinner.id == initialNominees[0].id || povWinner.id == initialNominees[1].id) {\n        descisionText += \"...to use the power of veto on myself.\";\n    } else {\n        descisionText += `...to use the power of veto on ${povTarget.name}.`;\n    }\n    let replacementSpeech = \"\";\n    let nameAReplacement = \"\";\n    let finalNominees: any[] = [...initialNominees];\n    if (povTarget) {\n        nameAReplacement += ` ${HoH.name}, since I have just vetoed one of your nominations, you must name a replacement nominee.`;\n        const replacementNom = {\n            ...getById(\n                initialGameState,\n                nominateNPlayers(\n                    HoH,\n                    exclude(initialGameState.houseguests, [\n                        HoH,\n                        initialNominees[0],\n                        initialNominees[1],\n                        povWinner\n                    ]),\n                    initialGameState,\n                    1\n                )[0].decision\n            )\n        };\n        const replacementIndex = initialNominees.findIndex(hg => hg.id === vetoChoice.decision!.id);\n        finalNominees[replacementIndex] = replacementNom;\n        replacementNom.nominations++;\n        getById(initialGameState, replacementNom.id).nominations++;\n        replacementSpeech = `My replacement nominee is ${replacementNom.name}.`;\n    }\n    const scene = new Scene({\n        title: \"Veto Ceremony\",\n        gameState: initialGameState,\n        content: (\n            <div>\n                <Centered>This is the Veto Ceremony.</Centered>\n                <Centered>\n                    {`${initialNominees[0].name} and ${initialNominees[1].name} have been nominated for eviction, \n                    but I have the power to veto one of these nominations.`}\n                </Centered>\n                <div className=\"columns is-marginless is-centered\">\n                    <DividerBox className=\"column\">\n                        <Portrait centered={true} houseguest={initialNominees[0]} />\n                    </DividerBox>\n                    <DividerBox className=\"column\">\n                        <Portrait centered={true} houseguest={initialNominees[1]} />\n                    </DividerBox>\n                </div>\n                <CenteredBold>\n                    I have decided... <br />\n                    <Portrait centered={true} houseguest={{ ...povWinner, tooltip: vetoChoice.reason }} />\n                    {descisionText}\n                </CenteredBold>\n                <Centered>{nameAReplacement}</Centered>\n                {replacementSpeech && <Portrait centered={true} houseguest={HoH} />}\n                <CenteredBold>{replacementSpeech}</CenteredBold>\n                <div className=\"columns is-marginless is-centered\">\n                    <DividerBox className=\"column\">\n                        <Portrait centered={true} houseguest={finalNominees[0]} />\n                    </DividerBox>\n                    <DividerBox className=\"column\">\n                        <Portrait centered={true} houseguest={finalNominees[1]} />\n                    </DividerBox>\n                </div>\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    return [scene, finalNominees];\n}\n","import { GameState, Houseguest, MutableGameState, nonEvictedHouseguests, getById } from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { shuffle } from \"lodash\";\nimport { ProfileHouseguest } from \"../../memoryWall\";\nimport { castEvictionVote } from \"../../../utils/ai/aiApi\";\nimport { evictHouseguest } from \"../bigBrotherEpisode\";\nimport { Portraits } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\nimport { CenteredBold, Centered } from \"../../layout/centered\";\nimport { DividerBox } from \"../../layout/box\";\n\nexport function generateEvictionScene(\n    initialGameState: GameState,\n    HoH: Houseguest,\n    nominees: Houseguest[]\n): [GameState, Scene] {\n    const newGameState = new MutableGameState(initialGameState);\n    nominees = shuffle(nominees);\n    const votes: Array<ProfileHouseguest[]> = [[], []];\n    nonEvictedHouseguests(newGameState).forEach(hg => {\n        if (hg.id !== nominees[0].id && hg.id !== nominees[1].id && hg.id !== HoH.id) {\n            const logic = castEvictionVote(hg, nominees, newGameState);\n            const result: ProfileHouseguest = { ...hg };\n            result.tooltip = logic.reason;\n            votes[logic.decision].push(result);\n        }\n    });\n    const votesFor0 = votes[0].length;\n    const votesFor1 = votes[1].length;\n\n    let tieVote = votesFor0 === votesFor1;\n    let tieBreaker = { decision: 0, reason: \"Error you should not be seeing this\" };\n    if (tieVote) {\n        tieBreaker = castEvictionVote(HoH, nominees, newGameState);\n    }\n    let evictee: Houseguest;\n    if (votesFor0 > votesFor1) {\n        evictee = nominees[0];\n    } else if (votesFor1 > votesFor0) {\n        evictee = nominees[1];\n    } else {\n        evictee = nominees[tieBreaker.decision];\n    }\n    evictHouseguest(newGameState, evictee.id);\n\n    const isUnanimous = votesFor0 === 0 || votesFor1 === 0;\n    const voteCountText = isUnanimous\n        ? \"By a unanimous vote...\"\n        : `By a vote of ${votesFor0} to ${votesFor1}...`;\n\n    const displayHoH: ProfileHouseguest = { ...HoH };\n    displayHoH.tooltip = tieBreaker.reason;\n    const scene = new Scene({\n        title: \"Live Eviction\",\n        gameState: initialGameState,\n        content: (\n            <div>\n                <CenteredBold>{voteCountText}</CenteredBold>\n                <div className=\"columns is-centered\">\n                    <DividerBox className=\"column\">\n                        <Portraits houseguests={votes[0]} centered={true} />\n                    </DividerBox>\n                    <DividerBox className=\"column\">\n                        <Portraits houseguests={votes[1]} centered={true} />\n                    </DividerBox>\n                </div>\n                {tieVote && (\n                    <div>\n                        <CenteredBold> We have a tie.</CenteredBold>\n                        <Centered>{`${HoH.name}, as current Head of Household, you must cast the sole vote to evict.`}</Centered>\n                        <Portraits houseguests={[displayHoH]} centered={true} />\n                        <CenteredBold>I vote to evict {`${evictee.name}.`}</CenteredBold>\n                    </div>\n                )}\n                <Portraits\n                    houseguests={[\n                        getById(newGameState, nominees[0].id),\n                        getById(newGameState, nominees[1].id)\n                    ]}\n                    centered={true}\n                />\n                <CenteredBold>{`${evictee.name}... you have been evicted from the Big Brother House.`}</CenteredBold>\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    return [newGameState, scene];\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst ShadowBox = styled.div`\n    box-shadow: 0 2px 3px rgba(10, 10, 10, 0.1), 0 0 0 1px rgba(10, 10, 10, 0.1);\n    border-radius: 6px;\n    margin-left: 3px;\n    margin-right: 3px;\n`;\n\nexport function DividerBox(props: any): JSX.Element {\n    return <ShadowBox className={props.className}>{props.children}</ShadowBox>;\n}\n","import { Subscription } from \"rxjs\";\nimport { Sidebar } from \"./sidebar\";\nimport { Season } from \"../../model/season\";\nimport { Episode, nonEvictedHouseguests, getById } from \"../../model\";\nimport { Scene } from \"../episode/scene\";\nimport {\n    mainContentStream$,\n    episodes$,\n    switchEpisode$,\n    newEpisode,\n    switchSceneRelative,\n    cast$,\n    getSelectedPlayer,\n    selectedPlayer$\n} from \"../../subjects/subjects\";\n\ninterface IndexedScene {\n    scene: Scene;\n    index: number;\n}\n\nconst LEFT = 37;\nconst RIGHT = 39;\n\nexport class SidebarController {\n    private view: Sidebar;\n    private subscriptions: Subscription[] = [];\n    private season: Season = new Season();\n    private scenes: IndexedScene[] = [];\n    private selectedEpisode: number = 0;\n\n    public constructor(view: Sidebar) {\n        this.view = view;\n        this.subscriptions.push(\n            episodes$.subscribe({\n                next: episode => this.onNewEpisode(episode)\n            })\n        );\n        this.subscriptions.push(\n            switchEpisode$.subscribe({\n                next: (value: number) => {\n                    this.switchSceneRelative(value);\n                }\n            })\n        );\n        this.subscriptions.push(\n            cast$.subscribe({\n                next: () => (this.season = new Season())\n            })\n        );\n    }\n\n    public getSelectedEpisode() {\n        return this.selectedEpisode;\n    }\n\n    public async switchToScene(id: number) {\n        mainContentStream$.next(this.scenes[id].scene.render);\n        this.selectedEpisode = this.scenes[id].index;\n        await this.view.setState({ selectedScene: id });\n        if (getSelectedPlayer() !== null) {\n            selectedPlayer$.next(\n                getById(this.scenes[this.view.state.selectedScene].scene.gameState, getSelectedPlayer()!.id)\n            );\n        }\n    }\n\n    private switchSceneRelative = (delta: number) => {\n        const selectedScene = this.view.state.selectedScene;\n        const renderedScenes = this.scenes.length;\n        const targetScene = selectedScene + delta;\n        if (targetScene < 0) {\n            return;\n        }\n        const lastEpisode = this.view.state.episodes[this.view.state.episodes.length - 1];\n        if (targetScene < renderedScenes) {\n            // Go back to an earlier scene\n            this.switchToScene(targetScene);\n        } else if (targetScene === renderedScenes) {\n            // Generate a new scene, then jump to it\n            const currentGameState = lastEpisode.gameState;\n            const newPlayerCount = nonEvictedHouseguests(lastEpisode.gameState).length;\n            const nextEpisodeType = this.season.whichEpisodeType(newPlayerCount);\n            if (newPlayerCount > 2) {\n                newEpisode(this.season.renderEpisode(currentGameState, nextEpisodeType));\n                this.switchSceneRelative(1);\n            }\n        }\n    };\n\n    public handleKeyDown(event: any) {\n        if (event.keyCode === LEFT) {\n            switchSceneRelative(-1);\n        } else if (event.keyCode === RIGHT) {\n            switchSceneRelative(1);\n        }\n    }\n\n    private onNewEpisode(episode: Episode | null) {\n        if (!episode) {\n            this.view.setState({ episodes: [], selectedScene: 0 });\n            this.scenes = [];\n        } else {\n            const newState = { ...this.view.state };\n            // starts at -1: prevent OBOE\n            const latestIndex = this.scenes.length === 0 ? -1 : this.scenes[this.scenes.length - 1].index;\n            const index = latestIndex + 1;\n            this.scenes.push({ scene: episode, index });\n            episode.scenes.forEach(scene => this.scenes.push({ scene, index }));\n            newState.episodes.push(episode);\n            this.view.setState(newState);\n        }\n    }\n\n    public destroy() {\n        this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n}\n","import React from \"react\";\nimport { SidebarController } from \"./sidebarController\";\nimport { PregameEpisode } from \"../episode/pregameEpisode\";\nimport { Episode, GameState } from \"../../model\";\nimport { Scene } from \"../episode/scene\";\nimport { newEpisode } from \"../../subjects/subjects\";\ninterface SidebarState {\n    episodes: Episode[];\n    selectedScene: number;\n}\n\nexport class Sidebar extends React.Component<{}, SidebarState> {\n    private controller: SidebarController;\n    public constructor(props: {}) {\n        super(props);\n        this.controller = new SidebarController(this);\n        this.state = { episodes: [], selectedScene: 0 };\n        newEpisode(new PregameEpisode(new GameState([])));\n    }\n\n    public componentDidMount() {\n        document.addEventListener(\"keydown\", this.controller.handleKeyDown);\n    }\n\n    public componentWillUnmount() {\n        this.controller.destroy();\n    }\n\n    public render() {\n        return (\n            <div className=\"box\" style={{ minWidth: 140 }}>\n                {this.getEpisodes()}\n            </div>\n        );\n    }\n\n    private getHighlight(title: string, key: number) {\n        if (key === this.state.selectedScene) {\n            return <mark>{title}</mark>;\n        }\n        return title;\n    }\n\n    private getEpisodes() {\n        const result: JSX.Element[] = [];\n        // Weird OBOE to make keys start at 0\n        let episodeKey = -1;\n        let breakKey = 0;\n        this.state.episodes.forEach((episode: Episode) => {\n            const id = ++episodeKey;\n            result.push(\n                <b\n                    key={id}\n                    onClick={() => {\n                        this.controller.switchToScene(id);\n                    }}\n                >\n                    {this.getHighlight(episode.title, id)}\n                </b>\n            );\n            result.push(<br key={--breakKey} />);\n            episode.scenes.forEach((scene: Scene) => {\n                const id = ++episodeKey;\n                if (this.controller.getSelectedEpisode() === episode.gameState.phase) {\n                    result.push(\n                        <a key={id} onClick={() => this.controller.switchToScene(id)}>\n                            {this.getHighlight(scene.title, id)}\n                        </a>\n                    );\n                    result.push(<br key={--breakKey} />);\n                }\n            });\n        });\n        return result;\n    }\n}\n","import React from \"react\";\nimport { mainContentStream$ } from \"../../subjects/subjects\";\n\nexport class MainContentArea extends React.Component<{}, { content: any }> {\n    // a simple class that displays whatever it gets fed through the main content stream.\n\n    private contentStream: any;\n\n    public constructor(props: any) {\n        super(props);\n        this.state = { content: null };\n    }\n\n    public componentDidMount() {\n        this.contentStream = mainContentStream$.subscribe(content => {\n            this.setState({ content });\n        });\n    }\n\n    public componentDidUpdate(prevProps: never, prevState: any) {\n        if (prevState.content !== this.state.content) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    public componentWillUnmount() {\n        this.contentStream.unsubscribe();\n    }\n\n    public render() {\n        return <div className=\"box\">{this.state.content}</div>;\n    }\n}\n","import \"./mainPage.scss\";\nimport React from \"react\";\nimport { Sidebar } from \"../sidebar/sidebar\";\nimport { Topbar } from \"../topbar/topBar\";\nimport { MainContentArea } from \"./mainContentArea\";\nimport { MainPageController } from \"./mainPageController\";\n\ninterface MainPageProps {\n    controller: MainPageController;\n}\n\nexport class MainPage extends React.Component<MainPageProps, any> {\n    public constructor(props: MainPageProps) {\n        super(props);\n        props.controller.inject(this);\n    }\n\n    public render() {\n        return (\n            <div className=\"main-page\">\n                <Topbar />\n                <div className=\"columns\">\n                    <div className=\"column is-narrow\">\n                        <Sidebar />\n                    </div>\n                    <div className=\"column\">\n                        <MainContentArea />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import { MainPage } from \"./mainPage\";\n\nexport class MainPageController {\n    private view: MainPage = new MainPage({ controller: this });\n\n    public inject(page: MainPage) {\n        this.view = page;\n    }\n}\n","import React, { Component } from \"react\";\nimport { MainPage } from \"./components/mainPage/mainPage\";\nimport { MainPageController } from \"./components/mainPage/mainPageController\";\n\nclass App extends Component {\n    render() {\n        return <MainPage controller={new MainPageController()} />;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {});\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {});\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}