{"version":3,"sources":["model/playerProfile.ts","model/powerRanking.ts","model/houseguest.ts","utils/utilities.ts","utils/relationshipMap.ts","components/playerPortrait/selectedPortrait.ts","model/color.ts","components/playerPortrait/houseguestPortraitController.ts","components/playerPortrait/houseguestPortrait.tsx","components/playerPortrait/houseguestToPortrait.tsx","components/tooltip/tooltip.tsx","components/playerPortrait/portraits.tsx","components/memoryWall/memoryWall.tsx","components/nextEpisodeButton/nextEpisodeButton.tsx","utils/ai/classifyRelationship.ts","components/playerPortrait/setupPortrait.tsx","components/castingScreen/importLinks.tsx","components/playerPortrait/subtitle.tsx","model/portraitDisplayMode.ts","components/viewsBar/viewBarTag.tsx","components/viewsBar/viewBar.tsx","components/episode/episodes.tsx","components/episode/pregameEpisode.tsx","components/castingScreen/randomXButton.tsx","components/castingScreen/castingScreen.tsx","subjects/subjects.tsx","components/topbar/topBar.tsx","components/pregameScreen/pregameScreen.tsx","utils/BbRandomGenerator.ts","model/gameState.ts","model/season.ts","components/episode/scene.tsx","utils/ai/aiUtils.ts","utils/ai/aiApi.ts","components/episode/scenes/juryVoteScene.tsx","components/episode/bigBrotherFinale.tsx","components/episode/scenes/finalHohCompScene.tsx","components/episode/scenes/finalEvictionScene.tsx","components/episode/episodeFactory.ts","components/episode/bigBrotherEpisode.tsx","components/episode/scenes/hohCompScene.tsx","components/episode/scenes/nomCeremonyScene.tsx","components/episode/scenes/vetoCompScene.tsx","components/episode/scenes/vetoCeremonyScene.tsx","components/episode/scenes/evictionScene.tsx","components/sidebar/sidebarController.ts","components/sidebar/sidebar.tsx","components/mainPage/mainContentArea.tsx","components/mainPage/mainPage.tsx","components/mainPage/mainPageController.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlayerProfile","init","Object","classCallCheck","this","name","imageURL","assign","PowerRanking","beats","outOf","Error","createClass","key","get","Houseguest","_PlayerProfile","_this","possibleConstructorReturn","getPrototypeOf","call","isEvicted","isJury","id","nominations","hohWins","povWins","popularity","deltaPopularity","relationships","powerRanking","superiors","Set","getFriendEnemyCount","friends","enemies","assertThisInitialized","inherits","value","villain","roundTwoDigits","number","Math","round","newRelationshipMap","size","exclude","result","i","selectPlayer","player","getSelectedPlayer","selectedPlayer$","next","componentToHex","c","hex","toString","length","Rgb","r","g","b","concat","interpolateColor","min","max","percent","toHex","selectedColor","HouseguestPortraitController","view","subs","refreshData","data","props","setState","comparePowerRankings","defaultState","selectedPlayer","undefined","state","displayMode","backgroundColor","_this2","push","subscribe","displayMode$","forEach","sub","unsubscribe","has","HouseguestPortrait","_React$Component","controller","isNullOrUndefined","subtitle","imageClass","getImageClass","generateSubtitle","detailed","className","react_default","a","createElement","onClick","style","src","width","height","React","Component","houseguestToPortrait","houseguest","houseguestPortrait_HouseguestPortrait","Text","styled","p","_templateObject","Tooltip","visible","Popover_default","isOpen","content","text","onMouseEnter","onMouseLeave","children","Portrait","centered","tooltip","tooltip_Tooltip","Portraits","rows","houseguests","memoryWallPortrait","MemoryWall","margin","maxWidth","getPlayers","NextEpisodeButton","switchSceneRelative","RelationshipType","SetupPortrait","textAlign","onDoubleClick","onDelete","imageUrl","contentEditable","onChange","spellCheck","ImportLinks","lines","split","profiles","line","temp","pop","replace","substr","indexOf","onSubmit","event","target","RelationshipTypeToSymbol","FRIEND","ENEMY","PAWN","QUEEN","classifyRelationship","heroPopularity","villainPopularity","relationship","benefitsHero","benefitsVillain","Friend","Pawn","Queen","Enemy","addPopularityLine","hero","popularitySubtitle","deltaPop","statePopularity","getDeltaPopularity","addCompsLine","compWins","lineHeight","popularityMinColor","popularityMaxColor","popularityMode","minColor","maxColor","extremePopularity","x","xSquared","extremeValues","_addFriendshipCountTi","titles","friendOrEnemyTitle","map","txt","count","Relationship","friendEnemyCountTitle","addFriendshipCountTitles","arguments","powerMaxColor","powerMinColor","powerMode","toFloat","_","ViewBarTag","selected","mode","_this3","disabled","background","toRgba","cursor","ViewsBar","apply","viewBarTag_ViewBarTag","Episode","scenes","title","gameState","type","viewBar_ViewsBar","PregameEpisodeType","eliminates","canPlayWith","n","PregameEpisode","_Episode","PregameScreen","cast","RandomButton","_useState","useState","_useState2","slicedToArray","setNumber","random","parseInt","NumericInput","marginLeft","test","CastingScreen","appendProfiles","newState","objectSpread","profile","players","submit","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","newCast","cast$","mainContentStream$","newEpisode","GameState","stop","amount","shuffle","slice","handleUpload","handleFiles","files","handleDrop","newName","splice","_this4","setupPortrait_SetupPortrait","deleteMethod","handleChange","_this5","FileDrop","onDrop","importLinks_ImportLinks","multiple","getFiles","file","match","lastIndexOf","URL","createObjectURL","EditCastLink","castingScreen_CastingScreen","getCast","EditSeasonLink","Topbar","marginTop","BehaviorSubject","episodes$","switchEpisode$","Subject","episode","BbRandomGenerator","seed","rng","prand","xorshift128plus","_this$rng$next","_this$rng$next2","_prand$uniformIntDist","uniformIntDistribution","_prand$uniformIntDist2","_this$rng$next3","_this$rng$next4","rng$","castNames","string","hash","charCodeAt","hashcode","getById","find","hg","inclusions","exclusions","excludedIds","filter","includes","randomPlayer","options","randomInt","nonEvictedHouseguests","getJurors","inJury","remainingPlayers","finalJurySize","phase","previousHOH","Array","MutableGameState","copy","cloneDeep","Scene","render","favouriteIndex","callback","highestIndex","highestScore","Infinity","currentScore","lowestScore","lowestIndex","doesHeroWinTheFinale","hgs","jury","heroVotes","villainVotes","juror","heroShouldTargetSuperiors","castEvictionVote","nominees","nom0","nom1","zeroIsInferior","oneIsInferior","cutthroatVote","nonVote","vote","reason","nonTarget","excuse","targetIsFriend","nonTargetIsNonFriend","nonTargetIsFriend","targetIsNonFriend","cutthroatVoteJury","r0","r1","nominatePlayer","hitlist","hitList","trueOptions","useGoldenVetoPreJury","save","rel0","relationshipWith","rel1","juryVoteScene","initialGameState","jurors","finalists","voteCount","votes","castJuryVote","voteBlocks","winner","BigBrotherFinale","generateBbFinaleInit","currentGameState","hohCompScene","finalHoH","finalEviction","_finalHohCompScene","newGameState","final3","enduranceWinner","enduranceLosers","skillWinner","scene","finalHohCompScene","_finalHohCompScene2","_finalEvictionScene","HoH","_castEvictionVote","evictee","hoh","evictHouseguest","finalEvictionScene","_finalEvictionScene2","BigBrotherFinaleEpisode","EpisodeFactory","episodeType","iMap","j","jMap","impression","randomFloat","firstImpressions","heroWinsTheFinale","add","populateSuperiors","house","sum","targetId","calculatePopularity","updatePopularity","rel","updateFriendCounts","finalState","BigBrotherVanilla","nomCeremonyScene","_generateHohCompScene","previousHoh","newHoH","generateHohCompScene","_generateHohCompScene2","vetoCompScene","povWinner","_generateNomCeremonyS","nom2","noms","generateNomCeremonyScene","_generateNomCeremonyS2","vetoCeremonyScene","_generateVetoCompScen","choices","povPlayers","everyoneWillPlay","introText","extras","generateVetoCompScene","_generateVetoCompScen2","evictionScene","_generateVetoCeremony","initialNominees","povTarget","descisionText","useGoldenVeto","replacementSpeech","nameAReplacement","finalNominees","replacementNom","generateVetoCeremonyScene","_generateVetoCeremony2","_generateEvictionScen","logic","votesFor0","votesFor1","tieVote","tieBreaker","voteCountText","displayHoH","generateEvictionScene","_generateEvictionScen2","BigBrotherVanillaEpisode","generateBbVanilla","delete","Season","factory","nextEpisode","SidebarController","subscriptions","season","selectedEpisode","delta","selectedScene","renderedScenes","targetScene","lastEpisode","episodes","switchToScene","newPlayerCount","nextEpisodeType","whichEpisodeType","renderEpisode","onNewEpisode","_switchToScene","index","_x","keyCode","Sidebar","document","addEventListener","handleKeyDown","destroy","minWidth","getEpisodes","episodeKey","breakKey","getHighlight","getSelectedEpisode","MainContentArea","contentStream","prevProps","prevState","window","scrollTo","MainPage","inject","sidebar_Sidebar","mainContentArea_MainContentArea","MainPageController","page","App","mainPage_MainPage","Boolean","location","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2da64fc.chunk.js","sourcesContent":["export class PlayerProfile {\n    readonly name: string = \"\";\n    readonly imageURL: string = \"\";\n    constructor(init: PlayerProfile) {\n        if (!init) {\n            return;\n        }\n        Object.assign(this, init);\n    }\n}\n","export class PowerRanking {\n    readonly beats: number;\n    readonly outOf: number;\n    get toFloat(): number {\n        return this.beats / this.outOf;\n    }\n\n    constructor(beats: number, outOf: number) {\n        if (outOf === 0) throw new Error(\"Power ranking attempted to divide by zero\");\n        this.beats = beats;\n        this.outOf = outOf;\n    }\n}\n","import { PlayerProfile } from \"./playerProfile\";\nimport { RelationshipMap } from \"../utils\";\nimport { PowerRanking } from \"./powerRanking\";\n\ninterface HouseguestInit extends PlayerProfile {\n    id: number;\n    relationships: RelationshipMap;\n}\n\nexport class Houseguest extends PlayerProfile {\n    public isEvicted: boolean = false;\n    public isJury: boolean = false;\n\n    readonly id: number = 0;\n\n    public nominations: number = 0;\n    public hohWins: number = 0;\n    public povWins: number = 0;\n\n    // Popularity ranges from -1 to 1\n    public popularity: number = 0;\n    public deltaPopularity: number = 0;\n    readonly relationships: RelationshipMap = {};\n\n    // power rankings range from 0 to 1\n    public powerRanking: PowerRanking = new PowerRanking(0, 1);\n    readonly superiors: Set<number> = new Set<number>();\n\n    public relationshipWith(villain: Houseguest): number {\n        return this.relationships[villain.id];\n    }\n\n    public getFriendEnemyCount: () => { friends: number; enemies: number } = () => {\n        return { friends: 0, enemies: 0 };\n    };\n\n    constructor(init: HouseguestInit) {\n        super(init);\n        Object.assign(this, init);\n    }\n}\n","// spits out the next episode given a gamestate, in addition to the new gamestate.\n// allows for re-use, because you can give it the initial gamestate, and then just keep asking for the next season.\nexport function hashcode(string: string): number {\n    var hash = 0,\n        i,\n        chr;\n    if (string.length === 0) return hash;\n    for (i = 0; i < string.length; i++) {\n        chr = string.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0;\n    }\n    return hash;\n}\n\nexport function roundTwoDigits(number: number | undefined) {\n    if (!number) {\n        return 0;\n    }\n    return Math.round(number * 100);\n}\n\nexport function extremeValues(x: number | undefined): number {\n    if (!x) {\n        return 0;\n    }\n    const xSquared = x * x;\n    if (x >= 0) {\n        return -xSquared + 2 * x;\n    } else {\n        return xSquared + 2 * x;\n    }\n}\n","export interface RelationshipMap {\n    [id: number]: number;\n}\n\nexport function newRelationshipMap(size: number, exclude: number): RelationshipMap {\n    const result: RelationshipMap = {};\n    for (let i = 0; i < size; i++) {\n        if (i !== exclude) result[i] = 0;\n    }\n    return result;\n}\n","import { Houseguest } from \"../../model\";\nimport { RelationshipMap } from \"../../utils\";\nimport { getSelectedPlayer, selectedPlayer$ } from \"../../subjects/subjects\";\n\nexport interface SelectedPlayerData {\n    id: number;\n    popularity: number;\n    relationships: RelationshipMap;\n    isEvicted: boolean;\n    superiors?: Set<number>;\n}\n\nexport function selectPlayer(player: SelectedPlayerData | null) {\n    if (!player || (getSelectedPlayer() && (getSelectedPlayer() as Houseguest).id === player.id)) {\n        selectedPlayer$.next(null);\n    } else {\n        selectedPlayer$.next(player);\n    }\n}\n","function componentToHex(c: any) {\n    var hex = Math.round(c).toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nexport class Rgb {\n    public r: number;\n    public g: number;\n    public b: number;\n    public toHex() {\n        return \"#\" + componentToHex(this.r) + componentToHex(this.g) + componentToHex(this.b);\n    }\n    public toRgba(): string {\n        return `rgba(${this.r}, ${this.g}, ${this.b}, 1)`;\n    }\n    constructor(r: number, g: number, b: number) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n}\n\nexport function interpolateColor(min: Rgb, max: Rgb, percent: number): string {\n    return new Rgb(\n        min.r + percent * (max.r - min.r),\n        min.g + percent * (max.g - min.g),\n        min.b + percent * (max.b - min.b)\n    ).toHex();\n}\n","import { PortraitProps, HouseguestPortrait, PortraitState } from \"../memoryWall\";\nimport { Subscription } from \"rxjs\";\nimport { selectedPlayer$, displayMode$, getSelectedPlayer } from \"../../subjects/subjects\";\nimport { SelectedPlayerData } from \"./selectedPortrait\";\nimport { Rgb } from \"../../model/color\";\nimport { PowerRanking } from \"../../model/powerRanking\";\n\nconst selectedColor = new Rgb(51, 255, 249);\n\nexport class HouseguestPortraitController {\n    private subs: Subscription[] = [];\n    private view: HouseguestPortrait;\n    constructor(view: HouseguestPortrait) {\n        this.view = view;\n    }\n\n    get defaultState() {\n        return {\n            popularity: this.view.props.popularity,\n            displayMode: displayMode$.value,\n            powerRanking: this.view.props.powerRanking\n        };\n    }\n\n    public backgroundColor(props: PortraitProps): undefined | string {\n        const selectedPlayer = getSelectedPlayer();\n        if (selectedPlayer !== null && selectedPlayer.id === props.id) {\n            return selectedColor.toHex();\n        }\n        return props.isEvicted ? undefined : this.view.state.displayMode.backgroundColor(this.view.state);\n    }\n\n    public subscribe() {\n        const subs: Subscription[] = [];\n        subs.push(\n            selectedPlayer$.subscribe({\n                next: this.refreshData\n            })\n        );\n        subs.push(\n            displayMode$.subscribe({\n                next: displayMode => this.view.setState({ displayMode })\n            })\n        );\n        this.subs = subs;\n    }\n\n    public unsubscribe() {\n        this.subs.forEach(sub => sub.unsubscribe());\n    }\n\n    private comparePowerRankings(data: SelectedPlayerData): PowerRanking {\n        // 0 is blue. 1 is orange\n        if (!data.superiors) return new PowerRanking(0, 1);\n        const id = this.view.props.id === undefined ? -1 : this.view.props.id;\n        return data.superiors.has(id) ? new PowerRanking(1, 1) : new PowerRanking(0, 1);\n    }\n\n    private refreshData = (data: SelectedPlayerData | null) => {\n        if (!data) {\n            this.view.setState(this.defaultState);\n        } else {\n            if (data.id !== this.view.props.id) {\n                this.view.setState({\n                    popularity: data.relationships[this.view.props.id!],\n                    powerRanking: this.comparePowerRankings(data)\n                });\n            } else {\n                this.view.setState({ popularity: 2, powerRanking: new PowerRanking(2, 1) });\n            }\n        }\n    };\n}\n","import React from \"react\";\nimport { selectPlayer } from \"./selectedPortrait\";\nimport { isNullOrUndefined } from \"util\";\nimport { RelationshipMap } from \"../../utils\";\nimport _ from \"lodash\";\nimport { HouseguestPortraitController } from \"./houseguestPortraitController\";\nimport { PortraitDisplayMode } from \"../../model/portraitDisplayMode\";\nimport { PowerRanking } from \"../../model/powerRanking\";\n\nexport interface PortraitProps {\n    imageURL: string;\n    name: string;\n    id?: number;\n    relationships?: RelationshipMap;\n    isEvicted?: boolean;\n    isJury?: boolean;\n    popularity?: number;\n    powerRanking?: PowerRanking;\n    deltaPopularity?: number;\n    detailed?: boolean;\n    superiors?: Set<number>;\n    getFriendEnemyCount?: () => { friends: number; enemies: number };\n}\n\nexport interface PortraitState {\n    popularity?: number;\n    powerRanking?: PowerRanking;\n    displayMode: PortraitDisplayMode;\n}\nexport class HouseguestPortrait extends React.Component<PortraitProps, PortraitState> {\n    private controller: HouseguestPortraitController;\n\n    public constructor(props: PortraitProps) {\n        super(props);\n        this.controller = new HouseguestPortraitController(this);\n        this.state = this.controller.defaultState;\n    }\n\n    public componentDidMount() {\n        if (isNullOrUndefined(this.props.id)) {\n            return;\n        }\n        this.controller.subscribe();\n    }\n\n    public componentWillUnmount() {\n        this.controller.unsubscribe();\n    }\n\n    private onClick(): void {\n        if (isNullOrUndefined(this.props.id) || !this.props.relationships) {\n            return;\n        }\n        const data = {\n            id: this.props.id,\n            relationships: this.props.relationships,\n            isEvicted: !!this.props.isEvicted,\n            popularity: this.props.popularity || 0,\n            superiors: this.props.superiors\n        };\n        selectPlayer(data);\n    }\n\n    public render() {\n        const props = this.props;\n        const imageClass = getImageClass(props);\n        let subtitle: any[] = [];\n        subtitle = this.state.displayMode.generateSubtitle(this.props, this.state, !!props.detailed);\n\n        let className = \"\";\n        if (props.isJury) {\n            className = \"jury\";\n        } else if (props.isEvicted) {\n            className = \"evicted\";\n        }\n        return (\n            <div\n                onClick={() => this.onClick()}\n                style={{\n                    backgroundColor: this.controller.backgroundColor(props)\n                }}\n                className={`memory-wall-portrait ${className}`}\n            >\n                <img className={imageClass} src={props.imageURL} style={{ width: 100, height: 100 }} />\n                <br />\n                {props.name}\n                <br />\n                {<small className=\"portrait-history\">{subtitle}</small>}\n            </div>\n        );\n    }\n}\n\nfunction getImageClass(props: PortraitProps) {\n    let imageClass = props.isEvicted ? \"grayscale\" : \"\";\n    imageClass = props.isJury ? \"sepia\" : imageClass;\n    return imageClass;\n}\n","import { ProfileHouseguest, HouseguestPortrait } from \"../memoryWall\";\nimport React from \"react\";\n\nexport function houseguestToPortrait(houseguest: ProfileHouseguest, key?: any): JSX.Element {\n    return <HouseguestPortrait {...houseguest} key={key} detailed={false} />;\n}\n\nexport function memoryWallPortrait(houseguest: ProfileHouseguest, key?: any): JSX.Element {\n    return <HouseguestPortrait {...houseguest} key={key} detailed={true} />;\n}\n","import React from \"react\";\nimport Popover from \"react-tiny-popover\";\nimport styled from \"styled-components\";\n\nconst Text = styled.p`\n    max-width: 200px;\n    padding: 3px 8px;\n    color: #fff;\n    text-align: center;\n    background-color: #000;\n    border-radius: 4px;\n`;\n\ninterface TooltipProps {\n    text: string;\n    children: any;\n}\n\ninterface ToolTipState {\n    visible: boolean;\n}\n\nexport class Tooltip extends React.Component<TooltipProps, ToolTipState> {\n    constructor(props: TooltipProps) {\n        super(props);\n        this.state = { visible: false };\n    }\n\n    public render() {\n        return (\n            <Popover isOpen={this.state.visible} content={<Text>{this.props.text}</Text>}>\n                <div\n                    onMouseEnter={() => this.setState({ visible: true })}\n                    onMouseLeave={() => this.setState({ visible: false })}\n                >\n                    {this.props.children}\n                </div>\n            </Popover>\n        );\n    }\n}\n","import React from \"react\";\nimport { ProfileHouseguest } from \"../memoryWall\";\nimport { houseguestToPortrait, memoryWallPortrait } from \"./houseguestToPortrait\";\nimport { Tooltip } from \"../tooltip/tooltip\";\n\nlet key = -1;\n\nexport function Portrait(props: { houseguest: ProfileHouseguest; centered?: boolean }): JSX.Element {\n    const result = (\n        <div\n            key={key++}\n            className={`columns is-gapless is-mobile is-multiline ${props.centered && \"is-centered\"}`}\n        >\n            {houseguestToPortrait(props.houseguest)}\n        </div>\n    );\n    if (props.houseguest.tooltip) {\n        return <Tooltip text={props.houseguest.tooltip}>{result}</Tooltip>;\n    }\n    return result;\n}\n\nexport function Portraits(props: {\n    houseguests: ProfileHouseguest[];\n    centered?: boolean;\n    detailed?: boolean;\n}): JSX.Element {\n    const rows: JSX.Element[] = [];\n    if (!props.houseguests || props.houseguests.length === 0) {\n        return <div />;\n    }\n    props.houseguests.forEach((houseguest: ProfileHouseguest) => {\n        let result;\n        if (props.detailed) {\n            result = memoryWallPortrait(houseguest, key++);\n        } else {\n            result = houseguestToPortrait(houseguest, key++);\n        }\n        if (houseguest.tooltip) {\n            result = <Tooltip text={houseguest.tooltip}>{result}</Tooltip>;\n        }\n        rows.push(result);\n    });\n    return (\n        <div className={`columns is-gapless is-mobile is-multiline ${props.centered && \"is-centered\"}`}>\n            {rows}\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./memoryWall.scss\";\nimport { PlayerProfile } from \"../../model\";\nimport { Portraits } from \"../playerPortrait/portraits\";\nimport { RelationshipMap } from \"../../utils\";\nexport interface IMemoryWallProps {\n    readonly houseguests: ProfileHouseguest[];\n}\n\nexport interface ProfileHouseguest extends PlayerProfile {\n    id?: number;\n    relationships?: RelationshipMap;\n    isEvicted?: boolean;\n    isJury?: boolean;\n    popularity?: number;\n    deltaPopularity?: number;\n    hohWins?: number;\n    povWins?: number;\n    nominations?: number;\n    tooltip?: string;\n    getFriendEnemyCount?: () => { friends: number; enemies: number };\n}\n\nexport function MemoryWall(props: IMemoryWallProps): JSX.Element {\n    return <div className=\"memory-wall\">{getPlayers(props)}</div>;\n}\n\nfunction getPlayers(props: IMemoryWallProps): any {\n    if (!props.houseguests || props.houseguests.length === 0) {\n        return null;\n    }\n    return (\n        <div\n            style={{\n                margin: \"auto\",\n                maxWidth: props.houseguests.length < 26 ? 700 : -1\n            }}\n        >\n            <Portraits houseguests={props.houseguests} centered={true} detailed={true} />\n        </div>\n    );\n}\n","import React from \"react\";\nimport { switchSceneRelative } from \"../../subjects/subjects\";\n\nexport function NextEpisodeButton(): JSX.Element {\n    return (\n        <button className=\"button is-primary\" onClick={() => switchSceneRelative(1)}>\n            Continue\n        </button>\n    );\n}\n","export enum RelationshipType {\n    Friend = \"FRIEND\",\n    Queen = \"QUEEN\",\n    Pawn = \"PAWN\",\n    Enemy = \"ENEMY\"\n}\n\nexport const RelationshipTypeToSymbol = { FRIEND: \"♥\", ENEMY: \"💔\", PAWN: \"PAWN\", QUEEN: \"QUEEN\" };\n\nexport function classifyRelationship(\n    heroPopularity: number,\n    villainPopularity: number,\n    relationship: number\n): RelationshipType {\n    const benefitsHero = relationship > heroPopularity;\n    const benefitsVillain = relationship > villainPopularity;\n    if (benefitsHero && benefitsVillain) {\n        return RelationshipType.Friend;\n    } else if (benefitsHero && !benefitsVillain) {\n        return RelationshipType.Pawn;\n    } else if (!benefitsHero && benefitsVillain) {\n        return RelationshipType.Queen;\n    }\n    return RelationshipType.Enemy;\n}\n","import React from \"react\";\n\ninterface SetupPortraitProps {\n    name: string;\n    imageUrl: string;\n    onDelete: () => void;\n    onChange: (arg0: Event) => void;\n}\n\ninterface SetupPortraitState {\n    name: string;\n}\n\nexport class SetupPortrait extends React.Component<SetupPortraitProps, SetupPortraitState> {\n    // TODO: When you click on the text, you can edit the text.\n\n    public constructor(props: SetupPortraitProps) {\n        super(props);\n        this.state = { name: props.name };\n    }\n\n    public UNSAFE_componentWillReceiveProps(props: SetupPortraitProps) {\n        this.setState({ name: props.name });\n    }\n\n    public render() {\n        return (\n            <div className={`edit-portrait`}>\n                <div style={{ textAlign: \"center\" }}>\n                    <div className=\"x-button noselect\" onDoubleClick={() => this.props.onDelete()}>\n                        ✘\n                    </div>\n                    <img src={this.props.imageUrl} style={{ width: 100, height: 100 }} />\n                    <br />\n                    <input\n                        className=\"memory-wall-portrait\"\n                        contentEditable={true}\n                        onChange={() => this.props.onChange}\n                        spellCheck={false}\n                        value={this.state.name}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { PlayerProfile } from \"../../model\";\n\ninterface ImportLinksProps {\n    onSubmit: (profiles: PlayerProfile[]) => void;\n    className?: string;\n}\n\nexport class ImportLinks extends React.Component<ImportLinksProps, any> {\n    public constructor(props: ImportLinksProps) {\n        super(props);\n        this.state = { text: \"\" };\n    }\n\n    private onSubmit() {\n        const lines = this.state.text.split(/\\r?\\n/);\n        // ugly, but it works.\n        const profiles: PlayerProfile[] = [];\n        lines.forEach((line: string) => {\n            const temp = line.split(\"/\").pop();\n            let name = temp\n                ? temp\n                      .split(\"#\")[0]\n                      .split(\"?\")[0]\n                      .replace(/\\.[^/.]+$/, \"\")\n                      .replace(/[-_]/g, \" \")\n                : null;\n\n            if (line.substr(0, line.indexOf(\" \"))) {\n                name = line.substr(line.indexOf(\" \") + 1);\n            }\n            if (name) {\n                profiles.push({\n                    name,\n                    imageURL: line\n                });\n            }\n        });\n        this.props.onSubmit(profiles);\n        this.setState({ text: \"\" });\n    }\n\n    public render() {\n        return (\n            <div className={this.props.className}>\n                <textarea\n                    className=\"textarea\"\n                    onChange={event => {\n                        this.setState({ text: event.target.value });\n                    }}\n                    value={this.state.text}\n                />\n                <button onClick={() => this.onSubmit()}>Import links</button>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { roundTwoDigits } from \"../../utils\";\nimport { ProfileHouseguest, PortraitProps, PortraitState } from \"../memoryWall\";\nimport { SelectedPlayerData } from \"./selectedPortrait\";\nimport {\n    RelationshipTypeToSymbol,\n    RelationshipType as Relationship,\n    classifyRelationship\n} from \"../../utils/ai/classifyRelationship\";\nimport { getSelectedPlayer } from \"../../subjects/subjects\";\n\nexport function generatePowerSubtitle(\n    hero: PortraitProps,\n    state: PortraitState,\n    _: boolean | undefined\n): any[] {\n    let key = 0;\n    let subtitle: any[] = [];\n    key = addPopularityLine(state, hero, !!_, subtitle, key);\n    key = addCompsLine(hero, subtitle, key);\n    if (!hero.isEvicted && state.powerRanking) {\n        const data = getSelectedPlayer() as SelectedPlayerData | null;\n        if (data && data.id !== hero.id) {\n            subtitle.push(<div key={key++}>{`${state.powerRanking!.beats > 0 ? \"LOSE\" : \"WIN\"}`}</div>);\n        } else if (data && data.id === hero.id) {\n            subtitle.push(<div key={key++}>I WOULD</div>);\n        } else {\n            subtitle.push(\n                <div key={key++}>{`WINS ${state.powerRanking.beats}/${state.powerRanking.outOf}`}</div>\n            );\n        }\n    }\n    return subtitle;\n}\n\nexport function generatePopularitySubtitle(\n    hero: PortraitProps,\n    state: PortraitState,\n    detailed: boolean = false\n): any[] {\n    let key = 0;\n    let subtitle: any[] = [];\n    // popularity\n    key = addPopularityLine(state, hero, detailed, subtitle, key);\n    // competition wins\n    key = addCompsLine(hero, subtitle, key);\n    // friendship count / relationship classification titles\n    ({ subtitle, key } = addFriendshipCountTitles(hero, subtitle, key));\n    return subtitle;\n}\n\nfunction addFriendshipCountTitles(hero: PortraitProps, subtitle: any[], key: number) {\n    if (!hero.isEvicted) {\n        const data = getSelectedPlayer() as SelectedPlayerData | null;\n        if (data && data.id !== hero.id) {\n            const titles = friendOrEnemyTitle(hero, data);\n            subtitle = subtitle.concat(titles.map(txt => <div key={key++}>{txt}</div>));\n        } else {\n            const titles = friendEnemyCountTitle(hero);\n            subtitle = subtitle.concat(titles.map(txt => <div key={key++}>{txt}</div>));\n        }\n    } else {\n        subtitle.push(<br key={key++} style={{ lineHeight: 1 }} />);\n    }\n    return { subtitle, key };\n}\n\nfunction addPopularityLine(\n    state: { popularity?: number },\n    hero: PortraitProps,\n    detailed: boolean,\n    subtitle: any[],\n    key: number\n) {\n    let popularity = state.popularity;\n    if (popularity && (popularity > 1 || popularity < -1)) {\n        popularity = hero.popularity;\n    }\n    if (popularity && !hero.isEvicted) {\n        let popularitySubtitle = `${roundTwoDigits(popularity)}%`;\n        const deltaPop = getDeltaPopularity(hero, popularity);\n        if (detailed && deltaPop !== 0) {\n            const arrow = deltaPop > 0 ? \" | ↑\" : \" | ↓\";\n            popularitySubtitle += `${arrow} ${deltaPop}%`;\n        }\n        subtitle.push(<div key={key++}>{popularitySubtitle}</div>);\n    }\n    return key;\n}\n\nfunction addCompsLine(hero: PortraitProps, subtitle: any[], key: number) {\n    if (compWins(hero)) {\n        subtitle.push(<div key={key++}>{`${compWins(hero)}`}</div>);\n    } else {\n        subtitle.push(<br key={key++} style={{ lineHeight: 1 }} />);\n    }\n    return key;\n}\n\nfunction getDeltaPopularity(houseguest: PortraitProps, statePopularity: number) {\n    if (roundTwoDigits(houseguest.popularity) !== roundTwoDigits(statePopularity)) {\n        return 0;\n    }\n    return houseguest.deltaPopularity ? roundTwoDigits(houseguest.deltaPopularity) : 0;\n}\n\nfunction compWins(houseguest: ProfileHouseguest): string {\n    return `${houseguest.hohWins ? `♔ ${houseguest.hohWins}` : \"\"}${\n        houseguest.povWins && houseguest.hohWins\n            ? `|🛇 ${houseguest.povWins}`\n            : houseguest.povWins\n            ? `🛇 ${houseguest.povWins}`\n            : \"\"\n    }${(houseguest.hohWins || houseguest.povWins) && houseguest.nominations ? \"|\" : \"\"}${\n        houseguest.nominations ? `✘ ${houseguest.nominations}` : \"\"\n    }`;\n}\n\nfunction friendOrEnemyTitle(hero: PortraitProps, villain: SelectedPlayerData): string[] {\n    const titles: string[] = [];\n    titles.push(\n        RelationshipTypeToSymbol[\n            classifyRelationship(hero.popularity || 0, villain.popularity, hero.relationships![villain.id])\n        ]\n    );\n    return titles;\n}\n\nfunction friendEnemyCountTitle(hero: PortraitProps): string[] {\n    const titles: string[] = [];\n    const count = hero.getFriendEnemyCount ? hero.getFriendEnemyCount() : { friends: 0, enemies: 0 };\n    titles.push(\n        `${count.friends} ${RelationshipTypeToSymbol[Relationship.Friend]} | ${count.enemies} ${\n            RelationshipTypeToSymbol[Relationship.Enemy]\n        }`\n    );\n    return titles;\n}\n","import { Rgb, interpolateColor } from \"./color\";\nimport { PortraitState, PortraitProps } from \"../components/memoryWall\";\nimport { extremeValues } from \"../utils\";\nimport { generatePopularitySubtitle, generatePowerSubtitle } from \"../components/playerPortrait/subtitle\";\n\nexport interface PortraitDisplayMode {\n    minColor: Rgb;\n    maxColor: Rgb;\n    backgroundColor: (state: PortraitState) => string;\n    generateSubtitle: (props: PortraitProps, state: PortraitState, detailed?: boolean) => any[];\n}\n\nconst popularityMinColor = new Rgb(252, 137, 137);\nconst popularityMaxColor = new Rgb(137, 252, 137);\n\nexport const popularityMode: PortraitDisplayMode = {\n    minColor: popularityMinColor,\n    maxColor: popularityMaxColor,\n    backgroundColor: (state: PortraitState) => {\n        const popularity = state.popularity;\n\n        const extremePopularity = extremeValues(popularity);\n        const percent = (extremePopularity + 1) / 2;\n        return interpolateColor(popularityMinColor, popularityMaxColor, percent);\n    },\n    generateSubtitle: generatePopularitySubtitle\n};\n\nconst powerMaxColor = new Rgb(255, 204, 94);\nconst powerMinColor = new Rgb(192, 181, 255);\nexport const powerMode: PortraitDisplayMode = {\n    minColor: powerMinColor,\n    maxColor: powerMaxColor,\n    backgroundColor: (state: PortraitState) => {\n        const powerRanking = state.powerRanking;\n        if (powerRanking === undefined) return \"\";\n\n        return interpolateColor(powerMinColor, powerMaxColor, powerRanking.toFloat);\n    },\n    generateSubtitle: generatePowerSubtitle\n};\n","import React, { useState } from \"react\";\nimport { PortraitDisplayMode } from \"../../model/portraitDisplayMode\";\nimport { displayMode$ } from \"../../subjects/subjects\";\nimport { Subscription } from \"rxjs\";\n\nfunction setDisplayMode(p: PortraitDisplayMode) {\n    displayMode$.next(p);\n}\n\ninterface ViewBarTagProps {\n    mode: PortraitDisplayMode;\n    text: string;\n    disabled?: boolean;\n}\n\nexport class ViewBarTag extends React.Component<ViewBarTagProps, { selected: boolean }> {\n    private sub: Subscription | null = null;\n\n    public constructor(props: ViewBarTagProps) {\n        super(props);\n        this.state = { selected: props.mode === displayMode$.value };\n    }\n\n    public componentDidMount() {\n        this.sub = displayMode$.subscribe({\n            next: mode => {\n                if (mode !== this.props.mode) {\n                    this.setState({ selected: false });\n                }\n            }\n        });\n    }\n\n    public componentWillUnmount() {\n        if (this.sub) this.sub.unsubscribe();\n    }\n\n    public render() {\n        const name = \"level-item tag is-medium is-light\";\n        const style = getStyle(this.props);\n        return (\n            <span\n                className={name}\n                style={style}\n                onClick={() => {\n                    !this.props.disabled && setDisplayMode(this.props.mode);\n                    !this.props.disabled && this.setState({ selected: true });\n                }}\n            >\n                {styleText(this.props.text, this.state.selected)}\n            </span>\n        );\n    }\n}\n\nfunction styleText(text: string, selected: boolean): JSX.Element {\n    return selected ? <b>{text}</b> : <i>{text}</i>;\n}\n\nfunction getStyle(props: ViewBarTagProps) {\n    return props.disabled\n        ? {}\n        : {\n              background: `linear-gradient(90deg, ${props.mode.minColor.toRgba()} 0%, ${props.mode.maxColor.toRgba()} 100%)`,\n              cursor: \"pointer\"\n          };\n}\n","import React from \"react\";\nimport { popularityMode, powerMode } from \"../../model/portraitDisplayMode\";\nimport { ViewBarTag } from \"./viewBarTag\";\n\nexport class ViewsBar extends React.Component {\n    public render() {\n        return (\n            <div className=\"level box is-mobile\" key=\"viewsbar\">\n                <ViewBarTag mode={popularityMode} text={\"Relationships\"}></ViewBarTag>\n                <ViewBarTag mode={powerMode} text={\"Power Rankings\"}></ViewBarTag>\n                <ViewBarTag mode={powerMode} disabled={true} text={\"Cliques [Coming Soon™]\"}></ViewBarTag>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { GameState } from \"../../model/gameState\";\nimport { Scene } from \"./scene\";\nimport { ViewsBar } from \"../viewsBar/viewBar\";\n\nexport interface InitEpisode {\n    scenes: Scene[];\n    title: string;\n    content: JSX.Element;\n    gameState: GameState;\n    type: EpisodeType;\n}\n\nexport class Episode {\n    readonly scenes: Scene[];\n    readonly title: string;\n    readonly content: JSX.Element;\n    readonly gameState: GameState;\n    readonly type: EpisodeType;\n    get render(): JSX.Element {\n        return (\n            <div>\n                <ViewsBar />\n                {this.content}\n            </div>\n        );\n    }\n\n    constructor(init: InitEpisode) {\n        this.scenes = init.scenes;\n        this.title = init.title;\n        this.content = init.content;\n        this.gameState = init.gameState;\n        this.type = init.type;\n    }\n}\n\nexport interface EpisodeType {\n    readonly canPlayWith: (n: number) => boolean;\n    readonly eliminates: number;\n}\n","import React from \"react\";\nimport { Episode, EpisodeType } from \"./episodes\";\nimport { PregameScreen } from \"../pregameScreen/pregameScreen\";\nimport { GameState } from \"../../model/gameState\";\n\nconst PregameEpisodeType: EpisodeType = {\n    eliminates: 0,\n    canPlayWith: (n: number) => {\n        return n > 2;\n    }\n};\n\nexport class PregameEpisode extends Episode {\n    readonly title = \"Pregame\";\n    readonly scenes = [];\n    readonly content: JSX.Element;\n    readonly gameState: GameState;\n    readonly type = PregameEpisodeType;\n\n    public constructor(gameState: GameState) {\n        super({\n            title: \"Pregame\",\n            scenes: [],\n            content: <PregameScreen cast={gameState.houseguests} />,\n            gameState,\n            type: PregameEpisodeType\n        });\n        this.gameState = gameState;\n        this.content = <PregameScreen cast={gameState.houseguests} />;\n    }\n}\n","import React, { useState } from \"react\";\n\ninterface RandomButtonProps {\n    random: (n: number) => void;\n}\n\nexport function RandomButton(props: RandomButtonProps): JSX.Element {\n    const [number, setNumber] = useState(\"16\");\n    return (\n        <div>\n            <button\n                disabled={number === \"\"}\n                className=\"button is-primary\"\n                onClick={() => props.random(parseInt(number))}\n            >\n                Random\n            </button>\n            <NumericInput value={number} onChange={setNumber} />\n        </div>\n    );\n}\n\ninterface NumericInputProps {\n    value: string;\n    onChange: (newValue: string) => void;\n}\n\nfunction NumericInput(props: NumericInputProps) {\n    return (\n        <input\n            className=\"input\"\n            type=\"text\"\n            style={{ width: \"3em\", marginLeft: 5 }}\n            value={props.value}\n            onChange={event => {\n                const value = event.target.value;\n                if (/^\\d*$/g.test(value)) {\n                    props.onChange(value);\n                }\n            }}\n        />\n    );\n}\n","import React from \"react\";\nimport FileDrop from \"react-file-drop\";\nimport { PlayerProfile, GameState } from \"../../model\";\nimport { SetupPortrait } from \"../playerPortrait/setupPortrait\";\nimport { ImportLinks } from \"./importLinks\";\nimport { PregameScreen } from \"../pregameScreen/pregameScreen\";\nimport { PregameEpisode } from \"../episode/pregameEpisode\";\nimport { shuffle } from \"lodash\";\nimport { RandomButton } from \"./randomXButton\";\nimport { selectPlayer } from \"../playerPortrait/selectedPortrait\";\nimport { mainContentStream$, newEpisode, updateCast } from \"../../subjects/subjects\";\n\ninterface CastingScreenState {\n    players: PlayerProfile[];\n}\n\ninterface CastingScreenProps {\n    cast?: PlayerProfile[];\n}\n\nexport class CastingScreen extends React.Component<CastingScreenProps, CastingScreenState> {\n    constructor(props: CastingScreenProps) {\n        super(props);\n        this.state = { players: props.cast || [] };\n    }\n\n    private handleChange(i: number) {\n        return (event: any) => {\n            const newName = event.target.value.replace(/\\r?\\n|\\r/g, \"\");\n            const newState = { ...this.state };\n            newState.players[i] = new PlayerProfile({\n                imageURL: newState.players[i].imageURL,\n                name: newName\n            });\n            this.setState(newState);\n        };\n    }\n\n    private deleteMethod(i: number) {\n        return () => {\n            const newState = { ...this.state };\n            newState.players.splice(i, 1);\n            this.setState(newState);\n        };\n    }\n\n    private getFiles() {\n        const players = this.state.players;\n        if (!players) {\n            return;\n        }\n        const rows: JSX.Element[] = [];\n        let i = 0;\n        players.forEach(player =>\n            rows.push(\n                <SetupPortrait\n                    name={player.name}\n                    imageUrl={player.imageURL}\n                    onDelete={this.deleteMethod(i)}\n                    onChange={this.handleChange(i)}\n                    key={(++i).toString()}\n                />\n            )\n        );\n        return <div className=\"columns is-gapless is-mobile is-multiline is-centered\">{rows}</div>;\n    }\n\n    private appendProfiles = (profiles: PlayerProfile[]) => {\n        const newState = { ...this.state };\n        profiles.forEach(profile => newState.players.push(profile));\n        this.setState(newState);\n    };\n\n    private submit = async () => {\n        updateCast(this.state.players);\n        mainContentStream$.next(<PregameScreen cast={this.state.players} />);\n        selectPlayer(null);\n        await newEpisode(null);\n        await newEpisode(new PregameEpisode(new GameState(this.state.players)));\n    };\n\n    private random = (amount: number) => {\n        let players = this.state.players;\n        players = shuffle(players);\n        players = players.slice(0, amount);\n        this.setState({ players });\n    };\n\n    public render() {\n        return (\n            <FileDrop onDrop={this.handleDrop}>\n                <div className=\"level\">\n                    <ImportLinks onSubmit={this.appendProfiles} />\n                    <div className=\"level-item\">\n                        <button className=\"button is-danger\" onClick={() => this.setState({ players: [] })}>\n                            Delete all\n                        </button>\n                    </div>\n                    <div className=\"level-item\">\n                        <RandomButton random={this.random} />\n                    </div>\n                    <div className=\"level-item\">\n                        <button\n                            className=\"button is-primary\"\n                            disabled={this.state.players.length < 3}\n                            onClick={this.submit}\n                        >\n                            Submit\n                        </button>\n                    </div>\n                </div>\n                ~ Drop images ~<input type=\"file\" multiple onChange={this.handleUpload} />\n                {this.getFiles()}\n            </FileDrop>\n        );\n    }\n\n    private handleUpload = (event: any) => {\n        this.handleFiles(event.target.files);\n    };\n\n    private handleDrop = (files: FileList | null, event: React.DragEvent) => {\n        if (!files) return;\n        this.handleFiles(files);\n    };\n\n    private handleFiles(files: FileList) {\n        const newState = { ...this.state };\n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            if (file.type.match(/image\\/*/)) {\n                newState.players.push(\n                    new PlayerProfile({\n                        name: file.name.substr(0, file.name.lastIndexOf(\".\")) || file.name,\n                        imageURL: URL.createObjectURL(file)\n                    })\n                );\n            }\n        }\n        this.setState(newState);\n    }\n}\n","import { BehaviorSubject, Subject } from \"rxjs\";\nimport { PregameScreen } from \"../components/pregameScreen/pregameScreen\";\nimport { Episode, PlayerProfile } from \"../model\";\nimport { SelectedPlayerData } from \"../components/playerPortrait/selectedPortrait\";\nimport React from \"react\";\nimport { PortraitDisplayMode, popularityMode } from \"../model/portraitDisplayMode\";\n\n// What is currently being displayed.\nexport const mainContentStream$ = new BehaviorSubject(<PregameScreen cast={[]} />);\n// Push episodes to this subject to add them to the sidebar. Null resets everything.\nexport const episodes$ = new BehaviorSubject<Episode | null>(null);\n// Forcibly switches to an episode. Used when adding a new episode.\nexport const switchEpisode$ = new Subject<number>();\nexport function newEpisode(episode: Episode | null) {\n    episodes$.next(episode);\n}\nexport function switchSceneRelative(n: number) {\n    switchEpisode$.next(n);\n}\n// the list of players in the game\nexport const cast$ = new BehaviorSubject<PlayerProfile[]>([]);\nexport function updateCast(newCast: PlayerProfile[]) {\n    cast$.next(newCast);\n}\nexport function getCast(): PlayerProfile[] {\n    return cast$.value;\n}\n// The player that the user has clicked on.\nexport const selectedPlayer$ = new BehaviorSubject<SelectedPlayerData | null>(null);\nexport function getSelectedPlayer() {\n    return selectedPlayer$.value;\n}\n\n// The display mode selected by the viewsbar.\nexport const displayMode$ = new BehaviorSubject<PortraitDisplayMode>(popularityMode);\n","import React from \"react\";\nimport { CastingScreen } from \"../castingScreen/castingScreen\";\nimport \"./topBar.scss\";\nimport { mainContentStream$, getCast } from \"../../subjects/subjects\";\n\nexport function EditCastLink(): JSX.Element {\n    return (\n        <div\n            className=\"topbar-link\"\n            onClick={() => {\n                mainContentStream$.next(<CastingScreen cast={getCast()} />);\n            }}\n        >\n            Edit Cast\n        </div>\n    );\n}\n\nexport function EditSeasonLink(): JSX.Element {\n    return (\n        <div\n            className=\"topbar-link\"\n            onClick={() => {\n                mainContentStream$.next(<CastingScreen cast={getCast()} />);\n            }}\n        >\n            Edit Season\n        </div>\n    );\n}\n\nexport function Topbar(): JSX.Element {\n    return (\n        <div className=\"level box is-mobile\" style={{ marginTop: 30 }}>\n            <div className=\"level-item\">\n                <EditCastLink />\n            </div>\n            <div className=\"level-item\">\n                <EditSeasonLink />\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { PlayerProfile } from \"../../model\";\nimport { MemoryWall } from \"../memoryWall\";\nimport { NextEpisodeButton } from \"../nextEpisodeButton/nextEpisodeButton\";\nimport { EditCastLink } from \"../topbar/topBar\";\n\ninterface PregameScreenProps {\n    cast: PlayerProfile[];\n}\n\nexport function PregameScreen(props: PregameScreenProps): JSX.Element {\n    if (props.cast.length === 0) {\n        return (\n            <div>\n                Cast is empty. <EditCastLink />\n            </div>\n        );\n    }\n    return (\n        <div>\n            Welcome to Big Brother!\n            <MemoryWall houseguests={props.cast} />\n            <NextEpisodeButton />\n        </div>\n    );\n}\n","import prand from \"pure-rand\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { hashcode } from \"./utilities\";\nimport { cast$ } from \"../subjects/subjects\";\n\nexport class BbRandomGenerator {\n    private rng: prand.RandomGenerator;\n\n    public randomFloat(): number {\n        let result: number;\n        [result, this.rng] = this.rng.next();\n        return result / 2147483647.0;\n    }\n\n    public randomInt(a: number, b: number): number {\n        let result: number;\n        [result, this.rng] = prand.uniformIntDistribution(a, b, this.rng);\n        return result;\n    }\n\n    public flipCoin(): boolean {\n        let result: number;\n        [result, this.rng] = this.rng.next();\n        return result % 2 === 0;\n    }\n\n    public seed(seed: number) {\n        this.rng = prand.xorshift128plus(seed);\n    }\n\n    public constructor(seed: number) {\n        this.rng = prand.xorshift128plus(seed);\n    }\n}\n\nexport function rng() {\n    return rng$.value;\n}\n\nconst rng$ = new BehaviorSubject(new BbRandomGenerator(0));\n\nconst castSub = cast$.subscribe({\n    next: cast => {\n        let castNames = \"\";\n        cast.forEach(houseguest => (castNames += houseguest.name));\n        rng$.next(new BbRandomGenerator(hashcode(castNames)));\n    }\n});\n","import { Houseguest } from \"./houseguest\";\nimport { PlayerProfile } from \"./playerProfile\";\nimport _ from \"lodash\";\nimport { newRelationshipMap, rng } from \"../utils\";\nimport { finalJurySize, getFinalists } from \"./season\";\n\n// TODO: might want to make houseguests a dictionary. {id: houseguest}\nexport function getById(gameState: GameState, id: number): Houseguest {\n    const result = gameState.houseguests.find(hg => hg.id === id);\n    if (!result) {\n        throw new Error(`Failed to find houseguest with id ${id}`);\n    }\n    return result;\n}\n\nexport function exclude(inclusions: Houseguest[], exclusions: Houseguest[]) {\n    const excludedIds = exclusions.map(hg => hg.id);\n    return inclusions.filter(hg => !excludedIds.includes(hg.id) && !hg.isEvicted);\n}\n\nexport function randomPlayer(inclusions: Houseguest[], exclusions: Houseguest[] = []): Houseguest {\n    if (inclusions.length === 0) {\n        throw new Error(\"Tried to get a random player from a list of 0 players.\");\n    }\n    const options = exclude(inclusions, exclusions);\n    const choice = rng().randomInt(0, options.length - 1);\n\n    return options[choice];\n}\n\nexport function nonEvictedHouseguests(gameState: GameState) {\n    return gameState.houseguests.filter(hg => !hg.isEvicted);\n}\nexport function getJurors(gameState: GameState) {\n    return gameState.houseguests.filter(hg => hg.isJury);\n}\n\nexport function inJury(gameState: GameState): Boolean {\n    return gameState.remainingPlayers - getFinalists() <= finalJurySize();\n}\n\nexport function calculatePopularity(hero: Houseguest, house: Houseguest[]) {\n    let sum = 0;\n    let count = 0;\n    const targetId = hero.id;\n    house.forEach(houseguest => {\n        if (houseguest.id !== targetId) {\n            count++;\n            sum += houseguest.relationships[targetId];\n        }\n    });\n    return count === 0 ? 0 : sum / count;\n}\n\nexport class GameState {\n    // Current state of the game after a phase.\n\n    readonly houseguests: Houseguest[] = [];\n    readonly remainingPlayers: number = 0;\n    readonly phase: number = 0;\n    readonly previousHOH?: Houseguest;\n\n    public constructor(init: PlayerProfile[] | GameState) {\n        if (!(init instanceof Array)) {\n            Object.assign(this, init);\n        } else {\n            const profiles = init as PlayerProfile[];\n            this.remainingPlayers = profiles.length;\n            let id = -1;\n            profiles.forEach(profile => {\n                this.houseguests.push(\n                    new Houseguest({\n                        ...profile,\n                        id: ++id,\n                        // popularity: 0,\n                        // deltaPopularity: 0,\n                        relationships: newRelationshipMap(profiles.length, id)\n                    })\n                );\n            });\n        }\n    }\n}\n\nexport class MutableGameState {\n    public houseguests: Houseguest[] = [];\n    public remainingPlayers: number = 0;\n    public phase: number = 0;\n    public previousHOH?: Houseguest;\n\n    public constructor(init: GameState | MutableGameState) {\n        const copy = _.cloneDeep(init);\n        Object.assign(this, copy);\n    }\n}\n","import { BigBrotherVanilla } from \"../components/episode/bigBrotherEpisode\";\nimport { EpisodeFactory } from \"../components/episode/episodeFactory\";\nimport { GameState } from \"./gameState\";\nimport { EpisodeType, Episode } from \".\";\nimport { BigBrotherFinale } from \"../components/episode/bigBrotherFinale\";\nimport { cast$ } from \"../subjects/subjects\";\n\nexport function finalJurySize() {\n    return jurors;\n}\n\nlet jurors = 7;\nconst sub = cast$.subscribe({\n    next: newCast => {\n        let players = newCast.length;\n        players = Math.round(players * 0.55);\n        if (players % 2 === 0) {\n            players--;\n        }\n        jurors = players;\n    }\n});\n\nexport function getFinalists() {\n    return 2;\n}\n\nexport class Season {\n    private factory: EpisodeFactory;\n\n    public constructor() {\n        this.factory = new EpisodeFactory();\n    }\n\n    // In the future, this would all be customizable,\n    // and not just all big brother episodes by default.\n\n    public renderEpisode(gameState: GameState, type: EpisodeType): Episode {\n        return this.factory.nextEpisode(gameState, type);\n    }\n\n    public whichEpisodeType(players: number) {\n        if (players === 3) {\n            return BigBrotherFinale;\n        }\n        return BigBrotherVanilla;\n    }\n}\n","import React from \"react\";\nimport { GameState } from \"../../model/gameState\";\nimport { ViewsBar } from \"../viewsBar/viewBar\";\ninterface InitScene {\n    readonly title: string;\n    readonly gameState: GameState;\n    readonly content: JSX.Element;\n}\nexport class Scene {\n    readonly title: string = \"\";\n    readonly gameState: GameState = new GameState([]);\n    readonly content: JSX.Element = <div>{`Error while rendering ${this.title}`}</div>;\n    public render: JSX.Element;\n    public constructor(init: Partial<InitScene>) {\n        Object.assign(this, init);\n        this.render = (\n            <div>\n                <ViewsBar />\n                {this.content}\n            </div>\n        );\n    }\n}\n","import { Houseguest, inJury, GameState } from \"../../model\";\n\nexport const relationship = (hero: Houseguest, villain: Houseguest) => hero.relationships[villain.id];\n\nexport function favouriteIndex(hero: Houseguest, options: Houseguest[]) {\n    // Return the index of the houseguest that hero has the worst relationship with.\n    return highestScore(hero, options, relationship);\n}\n\nexport function highestScore(\n    hero: Houseguest,\n    options: Houseguest[],\n    callback: (hero: Houseguest, villain: Houseguest) => number\n) {\n    let highestIndex = 0;\n    let highestScore = -Infinity;\n    options.forEach((villain, i) => {\n        const currentScore = callback(hero, villain);\n        if (currentScore > highestScore) {\n            highestIndex = i;\n            highestScore = currentScore;\n        }\n    });\n    return highestIndex;\n}\nexport function lowestScore(\n    hero: Houseguest,\n    options: Houseguest[],\n    callback: (hero: Houseguest, villain: Houseguest) => number\n) {\n    let lowestIndex = 0;\n    let lowestScore = Infinity;\n    options.forEach((villain, i) => {\n        const currentScore = callback(hero, villain);\n        if (currentScore < lowestScore) {\n            lowestIndex = i;\n            lowestScore = currentScore;\n        }\n    });\n    return lowestIndex;\n}\n\nexport function doesHeroWinTheFinale(\n    hgs: { hero: Houseguest; villain: Houseguest },\n    jury: Houseguest[]\n): boolean {\n    const hero = hgs.hero;\n    const villain = hgs.villain;\n    let heroVotes = 0;\n    let villainVotes = 0;\n    jury.forEach(juror => {\n        if (juror.id === hero.id || juror.id === villain.id) {\n            return;\n        }\n        if (relationship(hero, juror) > relationship(villain, juror)) {\n            heroVotes++;\n        } else {\n            villainVotes++;\n        }\n    });\n    return heroVotes > villainVotes;\n}\n\nexport function heroShouldTargetSuperiors(hero: Houseguest, gameState: GameState): boolean {\n    const superiors = hero.superiors.size;\n    const inferiors = gameState.remainingPlayers - 1 - hero.superiors.size;\n    // Target the larger group. If they are equal, target superiors.\n    return superiors >= inferiors;\n}\n\n// TODO: this function can just honestly die. it's only used in nomination logic (which sucks anyways)\n// when I do the new logic, I think people who are dead center should target their superiors. works in F5.\n\nexport function hitList(hero: Houseguest, options: Houseguest[], gameState: GameState): Set<number> {\n    let result = options;\n    // jury logic is not affected by someone who is dead center in power rankings\n    if (inJury(gameState) && heroShouldTargetSuperiors(hero, gameState)) {\n        // TODO: logic to take into account that i never want to eliminate the last guy i can actually beat\n        if (hero.superiors.size * 2 < gameState.remainingPlayers - 1) {\n            result = options.filter(hg => !hero.superiors.has(hg.id));\n        } else {\n            result = options.filter(hg => hero.superiors.has(hg.id));\n        }\n    } else {\n    }\n    return new Set(result.map(hg => hg.id));\n}\n","import { Houseguest, GameState, nonEvictedHouseguests, inJury } from \"../../model\";\nimport { favouriteIndex, relationship, lowestScore, hitList, heroShouldTargetSuperiors } from \"./aiUtils\";\nimport { classifyRelationship, RelationshipType as Relationship } from \"./classifyRelationship\";\n\ninterface VoteWithLogic {\n    vote: number;\n    reason: string;\n}\n\n// Return the index of the eviction target.\nexport function castEvictionVote(\n    hero: Houseguest,\n    nominees: Houseguest[],\n    gameState: GameState\n): VoteWithLogic {\n    if (inJury(gameState)) {\n        return cutthroatVoteJury(hero, nominees, gameState);\n    } else {\n        return cutthroatVote(hero, nominees);\n    }\n}\n\nfunction cutthroatVoteJury(hero: Houseguest, nominees: Houseguest[], gameState: GameState): VoteWithLogic {\n    const nom0 = nominees[0];\n    const nom1 = nominees[1];\n    const zeroIsInferior = !hero.superiors.has(nom0.id);\n    const oneIsInferior = !hero.superiors.has(nom1.id);\n    // if there is no sup/inf difference, no point in doing special logic for it\n    if (zeroIsInferior === oneIsInferior) {\n        return cutthroatVote(hero, nominees);\n    }\n    // Don't evict the last person in the game you can beat\n    if (gameState.remainingPlayers - hero.superiors.size - 1 === 1 && (zeroIsInferior || oneIsInferior)) {\n        const nonVote = zeroIsInferior ? 0 : 1;\n        return {\n            vote: zeroIsInferior ? 1 : 0,\n            reason: `I can't evict ${nominees[nonVote].name}, because they are the last person I can beat.`\n        };\n    }\n    const target = heroShouldTargetSuperiors(hero, gameState) === oneIsInferior ? 0 : 1;\n    const nonTarget = target ? 0 : 1;\n    const excuse = heroShouldTargetSuperiors(hero, gameState)\n        ? `I can't beat ${nominees[target].name} in the end.`\n        : `I need to keep ${nominees[nonTarget].name} around as a shield.`;\n    const targetIsFriend =\n        classifyRelationship(\n            hero.popularity,\n            nominees[target].popularity,\n            hero.relationships[nominees[target].id]\n        ) === Relationship.Friend;\n    const nonTargetIsNonFriend =\n        classifyRelationship(\n            hero.popularity,\n            nominees[nonTarget].popularity,\n            hero.relationships[nominees[nonTarget].id]\n        ) !== Relationship.Friend;\n    const nonTargetIsFriend = !nonTargetIsNonFriend;\n    const targetIsNonFriend = !targetIsFriend;\n    // the only reason to not evict your target is if he is your only friend on the block\n    if (targetIsFriend && nonTargetIsNonFriend) {\n        return { vote: nonTarget, reason: `${nominees[nonTarget].name} is my enemy.` };\n    } else if (targetIsFriend && nonTargetIsFriend) {\n        return { vote: target, reason: `Both noms are my friends, but ${excuse}` };\n    } else if (targetIsNonFriend && nonTargetIsNonFriend) {\n        return { vote: target, reason: `Neither of the noms are my friends, but ${excuse}` };\n    } else {\n        return { vote: target, reason: `${excuse}` };\n    }\n}\n\n// TODO: only works for 2 nominees\nfunction cutthroatVote(hero: Houseguest, nominees: Houseguest[]): VoteWithLogic {\n    const nom0 = nominees[0];\n    const nom1 = nominees[1];\n    const r0 = classifyRelationship(hero.popularity, nom0.popularity, hero.relationships[nom0.id]);\n    const r1 = classifyRelationship(hero.popularity, nom1.popularity, hero.relationships[nom1.id]);\n    if (r0 === Relationship.Enemy && r1 === Relationship.Enemy) {\n        return {\n            vote: nom0.popularity > nom1.popularity ? 0 : 1,\n            reason: \"Both noms are my enemies, so I voted for the more popular one.\"\n        };\n    } else if (\n        (r0 === Relationship.Enemy && r1 !== Relationship.Enemy) ||\n        (r1 === Relationship.Enemy && r0 !== Relationship.Enemy)\n    ) {\n        const vote = r0 === Relationship.Enemy ? 0 : 1;\n        return { vote, reason: `${nominees[vote].name} is my enemy.` };\n    } else if (\n        (r0 !== Relationship.Friend && r1 === Relationship.Friend) ||\n        (r1 !== Relationship.Friend && r0 === Relationship.Friend)\n    ) {\n        const vote = r0 !== Relationship.Friend ? 0 : 1;\n        const nonVote = vote === 0 ? 1 : 0;\n        return { vote, reason: `${nominees[nonVote].name} is my friend.` };\n    }\n    const vote = lowestScore(hero, nominees, relationship);\n    return {\n        vote,\n        reason: `Both noms are my friends. but I like ${nominees[vote === 0 ? 1 : 0].name} more.`\n    };\n}\n\nexport function nominatePlayer(hero: Houseguest, options: Houseguest[], gameState: GameState): number {\n    // TODO: target and pawn based nominations, different pre and post jury. requires refactoring (nominate N players)\n    const hitlist = hitList(hero, options, gameState);\n    let trueOptions = options.filter(hg => hitlist.has(hg.id));\n    if (trueOptions.length === 0) {\n        // if there are no options, we must sadly deviate from the hit list\n        trueOptions = options;\n    }\n    return trueOptions[lowestScore(hero, trueOptions, relationship)].id;\n}\nexport function useGoldenVeto(\n    hero: Houseguest,\n    nominees: Houseguest[],\n    gameState: GameState\n): Houseguest | null {\n    let povTarget: Houseguest | null = null;\n    if (hero.id == nominees[0].id || hero.id == nominees[1].id) {\n        povTarget = hero;\n    } else {\n        if (inJury(gameState)) {\n            // TODO: jury logic goes right here once we're ready\n            povTarget = useGoldenVetoPreJury(hero, nominees);\n        } else {\n            povTarget = useGoldenVetoPreJury(hero, nominees);\n        }\n        if (nonEvictedHouseguests(gameState).length === 4) {\n            povTarget = null;\n        }\n    }\n    return povTarget || null;\n}\n\nfunction useGoldenVetoPreJury(hero: Houseguest, nominees: Houseguest[]) {\n    let save = -1;\n    const rel0 = classifyRelationship(\n        hero.popularity,\n        nominees[0].popularity,\n        hero.relationshipWith(nominees[0])\n    );\n    const rel1 = classifyRelationship(\n        hero.popularity,\n        nominees[1].popularity,\n        hero.relationshipWith(nominees[1])\n    );\n    // basic logic that only saves friends. Doesn't take into account jury stuff.\n    if (rel0 === Relationship.Friend && rel1 !== Relationship.Friend) {\n        save = 0;\n    } else if (rel1 === Relationship.Friend && rel0 !== Relationship.Friend) {\n        save = 1;\n    } else if (rel0 === Relationship.Friend && rel1 === Relationship.Friend) {\n        save = Math.max(nominees[0].popularity, nominees[1].popularity) === nominees[0].popularity ? 0 : 1;\n    }\n\n    return nominees[save];\n}\n\nexport function castJuryVote(juror: Houseguest, finalists: Houseguest[]): number {\n    return favouriteIndex(juror, finalists);\n}\n","import { GameState, getJurors, nonEvictedHouseguests } from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { castJuryVote } from \"../../../utils/ai/aiApi\";\nimport { Portrait } from \"../../playerPortrait/portraits\";\nimport React from \"react\";\n\nexport function juryVoteScene(initialGameState: GameState): Scene {\n    const jurors = getJurors(initialGameState);\n    const finalists = nonEvictedHouseguests(initialGameState);\n    let voteCount = [0, 0];\n    const votes = jurors.map(juror => {\n        const result = castJuryVote(juror, finalists);\n        voteCount[result]++;\n        return result;\n    });\n    const voteBlocks = [];\n\n    // TODO: the formatting on this episode sucks...\n    for (let i = 0; i < votes.length; i++) {\n        voteBlocks.push(\n            <div className=\"columns\" key={`jury-vote${i}`}>\n                <Portrait houseguest={jurors[i]} />\n                <p>\n                    <b>{`${jurors[i].name} has voted for...`}</b>\n                </p>\n                <Portrait houseguest={finalists[votes[i]]} />\n            </div>\n        );\n    }\n    const winner = voteCount[0] > voteCount[1] ? finalists[0] : finalists[1];\n\n    const scene: Scene = new Scene({\n        title: \"Jury Votes\",\n        gameState: initialGameState,\n        content: (\n            <div>\n                {voteBlocks}\n                <Portrait houseguest={winner} />\n                {`Congratulations, ${winner.name}, you are the winner of Big Brother!!!`}\n            </div>\n        )\n    });\n    return scene;\n}\n","import React from \"react\";\nimport { EpisodeType, Episode, InitEpisode } from \"./episodes\";\nimport { Scene } from \"./scene\";\nimport { GameState } from \"../../model\";\nimport { MemoryWall } from \"../memoryWall\";\nimport { NextEpisodeButton } from \"../nextEpisodeButton/nextEpisodeButton\";\nimport { finalHohCompScene } from \"./scenes/finalHohCompScene\";\nimport { finalEvictionScene } from \"./scenes/finalEvictionScene\";\nimport { juryVoteScene } from \"./scenes/juryVoteScene\";\n\nexport const BigBrotherFinale: EpisodeType = {\n    canPlayWith: (n: number) => n === 3,\n    eliminates: 2\n};\n\nexport function generateBbFinaleInit(initialGameState: GameState): BigBrotherFinaleEpisode {\n    const title = \"Finale\";\n    const content = (\n        <div>\n            {/* TODO: custom title here*/}\n            Finale Night\n            <MemoryWall houseguests={initialGameState.houseguests} /> <br />\n            <NextEpisodeButton />\n        </div>\n    );\n    let currentGameState;\n    let hohCompScene;\n    let finalHoH;\n    const scenes = [];\n    [currentGameState, hohCompScene, finalHoH] = finalHohCompScene(initialGameState);\n    scenes.push(hohCompScene);\n    let finalEviction;\n    [currentGameState, finalEviction] = finalEvictionScene(currentGameState, finalHoH);\n    scenes.push(finalEviction);\n    scenes.push(juryVoteScene(currentGameState));\n    const gameState = currentGameState;\n    return new BigBrotherFinaleEpisode({ gameState, content, title, scenes, type: BigBrotherFinale });\n}\n\nexport class BigBrotherFinaleEpisode extends Episode {\n    readonly title: string;\n    readonly scenes: Scene[];\n    readonly content: JSX.Element;\n    readonly gameState: GameState;\n    readonly type = BigBrotherFinale;\n\n    public constructor(init: InitEpisode) {\n        super(init);\n        this.title = init.title;\n        this.scenes = init.scenes;\n        this.content = init.content;\n        this.gameState = init.gameState;\n    }\n}\n","import {\n    GameState,\n    Houseguest,\n    MutableGameState,\n    nonEvictedHouseguests,\n    randomPlayer,\n    getById\n} from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { Portraits, Portrait } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\n\nexport function finalHohCompScene(initialGameState: GameState): [GameState, Scene, Houseguest] {\n    const newGameState = new MutableGameState(initialGameState);\n    const final3 = nonEvictedHouseguests(initialGameState);\n    const enduranceWinner = randomPlayer(final3);\n    const enduranceLosers = final3.filter(hg => hg.id !== enduranceWinner.id);\n    const skillWinner = randomPlayer(final3, [enduranceWinner]);\n    const finalHoH = getById(newGameState, randomPlayer([enduranceWinner, skillWinner]).id);\n    finalHoH.hohWins++;\n    const scene: Scene = new Scene({\n        title: \"Final HoH Competition\",\n        gameState: newGameState,\n        content: (\n            <div>\n                <p>The final 3 houseguests compete in the endurance competition.</p>\n                <Portraits houseguests={final3} />\n                <Portrait houseguest={enduranceWinner} />\n                <p>\n                    <b>{`${enduranceWinner.name} has won the endurance competition!`}</b>\n                </p>\n                <hr />\n                <p>{`${enduranceLosers[0].name} and ${\n                    enduranceLosers[1].name\n                } compete in the skill competition.`}</p>\n                <Portraits houseguests={enduranceLosers} />\n                <Portrait houseguest={skillWinner} />\n                <p>\n                    <b>{`${skillWinner.name} has won the skill competition!`}</b>\n                </p>\n                <hr />\n                <p>{`${enduranceWinner.name} and ${skillWinner.name} compete in the quiz competition.`}</p>\n                <Portraits houseguests={[enduranceWinner, skillWinner]} />\n                <Portrait houseguest={finalHoH} />\n                <p>\n                    <b>{`Congratulations ${finalHoH.name}, you are the final Head of Household!`}</b>\n                </p>\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    newGameState.phase++;\n    return [new GameState(newGameState), scene, finalHoH];\n}\n","import { GameState, Houseguest, MutableGameState, nonEvictedHouseguests } from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { castEvictionVote } from \"../../../utils/ai/aiApi\";\nimport { ProfileHouseguest } from \"../../memoryWall\";\nimport { evictHouseguest } from \"../bigBrotherEpisode\";\nimport { Portrait, Portraits } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\n\nexport function finalEvictionScene(initialGameState: GameState, HoH: Houseguest): [GameState, Scene] {\n    const newGameState = new MutableGameState(initialGameState);\n    const nominees = nonEvictedHouseguests(newGameState).filter(hg => hg.id !== HoH.id);\n    const { vote, reason } = castEvictionVote(HoH, nominees, newGameState);\n    const evictee = nominees[vote];\n    const hoh: ProfileHouseguest = { ...HoH };\n    hoh.tooltip = reason;\n    evictHouseguest(newGameState, evictee.id);\n    const scene: Scene = new Scene({\n        title: \"Final Eviction\",\n        gameState: newGameState,\n        content: (\n            <div>\n                <div style={{ textAlign: \"center\" }}>\n                    {`As the final HoH of the season, ${HoH.name}, you may now cast the sole vote to evict.`}\n                    <Portrait houseguest={hoh} centered={true} />\n                    <b>\n                        <p>{`I vote to evict ${evictee.name}.`}</p>\n                    </b>\n                    <Portraits houseguests={nominees} centered={true} />\n                    <p>\n                        It's official... {evictee.name}, you will be the final person leaving the Big Brother\n                        House.\n                    </p>\n                </div>\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    return [new GameState(newGameState), scene];\n}\n","import {\n    GameState,\n    MutableGameState,\n    calculatePopularity,\n    nonEvictedHouseguests,\n    inJury,\n    getJurors\n} from \"../../model/gameState\";\nimport { Episode, Houseguest } from \"../../model\";\nimport { EpisodeType } from \"./episodes\";\nimport { BigBrotherVanilla, generateBbVanilla } from \"./bigBrotherEpisode\";\nimport { BigBrotherFinale, generateBbFinaleInit } from \"./bigBrotherFinale\";\nimport { rng, roundTwoDigits } from \"../../utils\";\nimport { doesHeroWinTheFinale as heroWinsTheFinale } from \"../../utils/ai/aiUtils\";\nimport { classifyRelationship, RelationshipType as Relationship } from \"../../utils/ai/classifyRelationship\";\nimport { PowerRanking } from \"../../model/powerRanking\";\n\nfunction firstImpressions(houseguests: Houseguest[]) {\n    for (let i = 0; i < houseguests.length; i++) {\n        const iMap = houseguests[i].relationships;\n        for (let j = i + 1; j < houseguests.length; j++) {\n            // creates a bunch of 100% random mutual relationships\n            const jMap = houseguests[j].relationships;\n            const impression = rng().randomFloat();\n            jMap[i] = impression;\n            iMap[j] = impression;\n        }\n    }\n}\n\nfunction populateSuperiors(houseguests: Houseguest[]) {\n    for (let i = 0; i < houseguests.length; i++) {\n        const hero = houseguests[i];\n        for (let j = i + 1; j < houseguests.length; j++) {\n            const villain = houseguests[j];\n            if (heroWinsTheFinale({ hero, villain }, houseguests)) {\n                villain.superiors.add(hero.id);\n            } else {\n                hero.superiors.add(villain.id);\n            }\n        }\n    }\n}\n\nfunction updatePowerRankings(houseguests: Houseguest[]) {\n    houseguests.forEach(hg => {\n        hg.powerRanking = new PowerRanking(\n            houseguests.length - 1 - hg.superiors.size,\n            houseguests.length - 1\n        );\n    });\n}\n\nfunction updatePopularity(gameState: GameState) {\n    const houseguests = nonEvictedHouseguests(gameState);\n    houseguests.forEach(hg => {\n        const result = calculatePopularity(hg, nonEvictedHouseguests(gameState));\n        hg.deltaPopularity = (roundTwoDigits(result) - roundTwoDigits(hg.popularity)) / 100;\n        hg.popularity = result;\n    });\n}\n\nfunction updateFriendCounts(gameState: GameState) {\n    const houseguests = nonEvictedHouseguests(gameState);\n    houseguests.forEach(hero => {\n        hero.getFriendEnemyCount = () => {\n            let friends = 0;\n            let enemies = 0;\n            houseguests.forEach(villain => {\n                const rel = classifyRelationship(\n                    hero.popularity,\n                    villain.popularity,\n                    hero.relationshipWith(villain)\n                );\n                if (hero.id === villain.id) {\n                    return;\n                } else if (rel === Relationship.Friend) {\n                    friends++;\n                } else if (rel === Relationship.Enemy) {\n                    enemies++;\n                }\n            });\n            return { friends, enemies };\n        };\n    });\n}\n\nexport class EpisodeFactory {\n    public nextEpisode(gameState: GameState, episodeType: EpisodeType): Episode {\n        let newState = new MutableGameState(gameState);\n        if (gameState.phase === 0) {\n            firstImpressions(newState.houseguests);\n        }\n        // If jury starts this episode, populate superior/inferior data. In the future, every jury ep. (dynamic rels)\n        if (inJury(gameState) && getJurors(gameState).length === 0) {\n            populateSuperiors(nonEvictedHouseguests(newState));\n        }\n        if (inJury(gameState)) {\n            updatePowerRankings(nonEvictedHouseguests(newState));\n        }\n        updatePopularity(newState);\n        updateFriendCounts(newState);\n        const finalState = new GameState(newState);\n        switch (episodeType) {\n            case BigBrotherVanilla:\n                return generateBbVanilla(finalState);\n            case BigBrotherFinale:\n                return generateBbFinaleInit(finalState);\n            default:\n                throw new Error(\"Unsupported Episode Type\");\n        }\n    }\n}\n","import {\n    MutableGameState,\n    getById,\n    inJury,\n    nonEvictedHouseguests,\n    GameState,\n    Houseguest,\n    EpisodeType,\n    Episode,\n    InitEpisode\n} from \"../../model\";\nimport { getFinalists, finalJurySize } from \"../../model/season\";\nimport { generateHohCompScene } from \"./scenes/hohCompScene\";\nimport { generateNomCeremonyScene } from \"./scenes/nomCeremonyScene\";\nimport { generateVetoCompScene } from \"./scenes/vetoCompScene\";\nimport { generateVetoCeremonyScene } from \"./scenes/vetoCeremonyScene\";\nimport { generateEvictionScene } from \"./scenes/evictionScene\";\nimport { MemoryWall } from \"../memoryWall\";\nimport { NextEpisodeButton } from \"../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\nimport { Scene } from \"./scene\";\n\nexport const BigBrotherVanilla: EpisodeType = {\n    canPlayWith: (n: number) => {\n        return n > 1;\n    },\n    eliminates: 1\n};\n\n// TODO: Refactoring ideas\n/**\n * Might be best to start passing ids instead of houseguests for HoH/nominees/veto winner\n */\n\nexport function evictHouseguest(gameState: MutableGameState, id: number) {\n    const evictee = getById(gameState, id);\n    evictee.isEvicted = true;\n    if (gameState.remainingPlayers - getFinalists() <= finalJurySize()) {\n        evictee.isJury = true;\n    }\n    if (inJury(gameState)) {\n        nonEvictedHouseguests(gameState).forEach(hg => {\n            hg.superiors.delete(evictee.id);\n        });\n    }\n    gameState.remainingPlayers--;\n}\n\nexport function generateBbVanilla(initialGameState: GameState): BigBrotherVanillaEpisode {\n    let currentGameState;\n    let hohCompScene;\n    let hoh: Houseguest;\n    const scenes = [];\n\n    [currentGameState, hohCompScene, hoh] = generateHohCompScene(initialGameState);\n    scenes.push(hohCompScene);\n\n    let nomCeremonyScene;\n    let nominees: Houseguest[];\n    [currentGameState, nomCeremonyScene, nominees] = generateNomCeremonyScene(currentGameState, hoh);\n    scenes.push(nomCeremonyScene);\n\n    let vetoCompScene;\n    let povWinner: Houseguest;\n    [currentGameState, vetoCompScene, povWinner] = generateVetoCompScene(\n        currentGameState,\n        hoh,\n        nominees[0],\n        nominees[1]\n    );\n    scenes.push(vetoCompScene);\n    let vetoCeremonyScene;\n\n    [vetoCeremonyScene, nominees] = generateVetoCeremonyScene(currentGameState, hoh, nominees, povWinner);\n    scenes.push(vetoCeremonyScene);\n\n    let evictionScene;\n    [currentGameState, evictionScene] = generateEvictionScene(currentGameState, hoh, nominees);\n    scenes.push(evictionScene);\n\n    const title = `Week ${currentGameState.phase}`;\n    const content = (\n        <div>\n            {/* TODO: custom title here*/}\n            {`Week ${currentGameState.phase}`}\n            <MemoryWall houseguests={initialGameState.houseguests} /> <br />\n            <NextEpisodeButton />\n        </div>\n    );\n    const gameState = new GameState(currentGameState);\n    return new BigBrotherVanillaEpisode({ title, scenes, content, gameState, type: BigBrotherVanilla });\n}\nexport class BigBrotherVanillaEpisode extends Episode {\n    readonly title: string;\n    readonly scenes: Scene[];\n    readonly content: JSX.Element;\n    readonly gameState: GameState;\n    readonly type = BigBrotherVanilla;\n\n    public constructor(init: InitEpisode) {\n        super(init);\n        this.title = init.title;\n        this.scenes = init.scenes;\n        this.content = init.content;\n        this.gameState = init.gameState;\n    }\n}\n","import { GameState, Houseguest, MutableGameState, randomPlayer } from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { Portrait } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\n\nexport function generateHohCompScene(initialGameState: GameState): [GameState, Scene, Houseguest] {\n    const newGameState = new MutableGameState(initialGameState);\n\n    const previousHoh = initialGameState.previousHOH ? [initialGameState.previousHOH] : [];\n    const newHoH: Houseguest = randomPlayer(newGameState.houseguests, previousHoh);\n    newGameState.previousHOH = newHoH;\n    newGameState.phase++;\n    newHoH.hohWins += 1;\n\n    const scene = new Scene({\n        title: \"HoH Competition\",\n        gameState: initialGameState,\n        content: (\n            <div>\n                {previousHoh.length > 0 &&\n                    `Houseguests, it's time to find a new Head of Household. As outgoing HoH, ${\n                        previousHoh[0].name\n                    } will not compete. `}\n                <Portrait houseguest={newHoH} />\n                {newHoH.name} has won Head of Household!\n                <br />\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n\n    return [new GameState(newGameState), scene, newHoH];\n}\n","import {\n    GameState,\n    Houseguest,\n    MutableGameState,\n    exclude,\n    nonEvictedHouseguests,\n    getById\n} from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { nominatePlayer } from \"../../../utils/ai/aiApi\";\nimport { shuffle } from \"lodash\";\nimport { Portrait } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\n\nexport function generateNomCeremonyScene(\n    initialGameState: GameState,\n    HoH: Houseguest\n): [GameState, Scene, Houseguest[]] {\n    const newGameState = new MutableGameState(initialGameState);\n    const options = exclude(nonEvictedHouseguests(newGameState), [HoH]);\n    const nom1 = getById(newGameState, nominatePlayer(HoH, options, newGameState));\n    const nom2 = getById(newGameState, nominatePlayer(HoH, exclude(options, [nom1]), newGameState));\n    nom1.nominations++;\n    nom2.nominations++;\n    const noms = shuffle([nom1, nom2]);\n    const scene = new Scene({\n        title: \"Nomination Ceremony\",\n        gameState: newGameState,\n        content: (\n            <div>\n                <Portrait houseguest={HoH} />\n                <br />\n                This is the nomination ceremony. It is my responsibility as the Head of Household to nominate\n                two houseguests for eviction.\n                <br />\n                <b>\n                    My first nominee is...\n                    <br />\n                    <Portrait houseguest={noms[0]} />\n                    <br />\n                    My second nominee is...\n                    <br />\n                    <Portrait houseguest={noms[1]} />\n                    {`I have nominated you, ${noms[0].name} and you, ${noms[1].name} for eviction.`}\n                    <br />\n                </b>\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    return [new GameState(newGameState), scene, [nom1, nom2]];\n}\n","import {\n    GameState,\n    Houseguest,\n    MutableGameState,\n    nonEvictedHouseguests,\n    randomPlayer,\n    getById\n} from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { Portraits } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\n\nexport function generateVetoCompScene(\n    initialGameState: GameState,\n    HoH: Houseguest,\n    nom1: Houseguest,\n    nom2: Houseguest\n): [GameState, Scene, Houseguest] {\n    const newGameState = new MutableGameState(initialGameState);\n\n    // pick players\n    const choices = nonEvictedHouseguests(newGameState);\n    let povPlayers: any[] = [];\n    const everyoneWillPlay = choices.length <= 6;\n\n    if (everyoneWillPlay) {\n        povPlayers.push({ ...HoH });\n        povPlayers.push({ ...nom1 });\n        povPlayers.push({ ...nom2 });\n        while (povPlayers.length < choices.length) {\n            povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n        }\n    } else {\n        // TODO: houseguests choice picks\n        povPlayers.push({ ...HoH });\n        povPlayers.push({ ...nom1 });\n        povPlayers.push({ ...nom2 });\n        povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n        povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n        povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n    }\n    let povWinner = randomPlayer(povPlayers);\n    povWinner = getById(newGameState, povWinner.id);\n    povWinner.povWins++;\n    let introText: string;\n    if (everyoneWillPlay) {\n        introText = \"Everyone left in the house will compete in this challenge.\";\n    } else {\n        introText = `${HoH.name}, as Head of Household, and ${nom1.name} and ${\n            nom2.name\n        } as nominees, will compete, as well as 3 others chosen by random draw.`;\n    }\n    const extras = [povPlayers[3]];\n    povPlayers[4] && extras.push(povPlayers[4]);\n    povPlayers[5] && extras.push(povPlayers[5]);\n    const scene = new Scene({\n        title: \"Veto Competition\",\n        gameState: initialGameState,\n        content: (\n            <div>\n                It's time to pick players for the veto competition.\n                <br />\n                <Portraits houseguests={[HoH, nom1, nom2]} />\n                <br />\n                {introText}\n                <br />\n                <Portraits houseguests={extras} />\n                ...\n                <Portraits houseguests={[povWinner]} />\n                {`${povWinner.name} has won the Golden Power of Veto!`}\n                <br />\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    return [new GameState(newGameState), scene, povWinner];\n}\n","import { GameState, Houseguest, getById, exclude } from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { useGoldenVeto, nominatePlayer } from \"../../../utils/ai/aiApi\";\nimport { Portraits, Portrait } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\n\nexport function generateVetoCeremonyScene(\n    initialGameState: GameState,\n    HoH: Houseguest,\n    initialNominees: Houseguest[],\n    povWinner: Houseguest\n): [Scene, Houseguest[]] {\n    let povTarget: Houseguest | null = null;\n    let descisionText = \"\";\n    initialNominees[0] = getById(initialGameState, initialNominees[0].id);\n    initialNominees[1] = getById(initialGameState, initialNominees[1].id);\n    HoH = getById(initialGameState, HoH.id);\n\n    povTarget = useGoldenVeto(povWinner, initialNominees, initialGameState);\n\n    if (!povTarget) {\n        descisionText += \"... not to use the power of veto.\";\n    } else if (povWinner.id == initialNominees[0].id || povWinner.id == initialNominees[1].id) {\n        descisionText += \"...to use the power of veto on myself.\";\n    } else {\n        descisionText += `...to use the power of veto on ${povTarget.name}.`;\n    }\n\n    let replacementSpeech = \"\";\n    let nameAReplacement = \"\";\n    let finalNominees: any[] = initialNominees;\n    if (povTarget) {\n        finalNominees = initialNominees.filter(hg => hg.id != povTarget!.id);\n        nameAReplacement += ` ${\n            HoH.name\n        }, since I have just vetoed one of your nominations, you must name a replacement nominee.`;\n        const replacementNom = {\n            ...getById(\n                initialGameState,\n                nominatePlayer(\n                    HoH,\n                    exclude(initialGameState.houseguests, [\n                        HoH,\n                        initialNominees[0],\n                        initialNominees[1],\n                        povWinner\n                    ]),\n                    initialGameState\n                )\n            )\n        };\n        replacementNom.nominations++;\n        finalNominees.push(replacementNom);\n        getById(initialGameState, replacementNom.id).nominations++;\n        replacementSpeech = `My replacement nominee is ${replacementNom.name}.`;\n    }\n\n    const scene = new Scene({\n        title: \"Veto Ceremony\",\n        gameState: initialGameState,\n        content: (\n            <div>\n                This is the Veto Ceremony.\n                <br />\n                {`${initialNominees[0].name} and ${\n                    initialNominees[1].name\n                } have been nominated for eviction.`}\n                <Portraits houseguests={initialNominees} />\n                But I have the power to veto one of these nominations.\n                <br />\n                <b>\n                    I have decided...\n                    <Portrait houseguest={povWinner} />\n                    {descisionText}\n                </b>\n                {nameAReplacement}\n                {replacementSpeech && <Portrait houseguest={HoH} />}\n                <b>{replacementSpeech}</b>\n                <Portraits houseguests={finalNominees} />\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    return [scene, finalNominees];\n}\n","import { GameState, Houseguest, MutableGameState, nonEvictedHouseguests, getById } from \"../../../model\";\nimport { Scene } from \"../scene\";\nimport { shuffle } from \"lodash\";\nimport { ProfileHouseguest } from \"../../memoryWall\";\nimport { castEvictionVote } from \"../../../utils/ai/aiApi\";\nimport { evictHouseguest } from \"../bigBrotherEpisode\";\nimport { Portraits } from \"../../playerPortrait/portraits\";\nimport { NextEpisodeButton } from \"../../nextEpisodeButton/nextEpisodeButton\";\nimport React from \"react\";\n\nexport function generateEvictionScene(\n    initialGameState: GameState,\n    HoH: Houseguest,\n    nominees: Houseguest[]\n): [GameState, Scene] {\n    const newGameState = new MutableGameState(initialGameState);\n    nominees = shuffle(nominees);\n    const votes: Array<ProfileHouseguest[]> = [[], []];\n    nonEvictedHouseguests(newGameState).forEach(hg => {\n        if (hg.id !== nominees[0].id && hg.id !== nominees[1].id && hg.id !== HoH.id) {\n            const logic = castEvictionVote(hg, nominees, newGameState);\n            const result: ProfileHouseguest = { ...hg };\n            result.tooltip = logic.reason;\n            votes[logic.vote].push(result);\n        }\n    });\n    const votesFor0 = votes[0].length;\n    const votesFor1 = votes[1].length;\n\n    let tieVote = votesFor0 === votesFor1;\n    let tieBreaker = { vote: 0, reason: \"Error you should not be seeing this\" };\n    if (tieVote) {\n        tieBreaker = castEvictionVote(HoH, nominees, newGameState);\n    }\n    let evictee: Houseguest;\n    if (votesFor0 > votesFor1) {\n        evictee = nominees[0];\n    } else if (votesFor1 > votesFor0) {\n        evictee = nominees[1];\n    } else {\n        evictee = nominees[tieBreaker.vote];\n    }\n    evictHouseguest(newGameState, evictee.id);\n\n    const isUnanimous = votesFor0 === 0 || votesFor1 === 0;\n    const voteCountText = isUnanimous\n        ? \"By a unanimous vote...\"\n        : `By a vote of ${votesFor0} to ${votesFor1}...`;\n\n    const displayHoH: ProfileHouseguest = { ...HoH };\n    displayHoH.tooltip = tieBreaker.reason;\n    const scene = new Scene({\n        title: \"Live Eviction\",\n        gameState: initialGameState,\n        content: (\n            <div>\n                <p style={{ textAlign: \"center\" }}>\n                    <b>{voteCountText} </b>\n                </p>\n                <div className=\"columns is-centered\">\n                    <div className=\"column box\">\n                        <Portraits houseguests={votes[0]} centered={true} />\n                    </div>\n                    <div className=\"column box\">\n                        <Portraits houseguests={votes[1]} centered={true} />\n                    </div>\n                </div>\n                {tieVote && (\n                    <div>\n                        <p style={{ textAlign: \"center\" }}>\n                            <b> We have a tie.</b> <br />\n                            {`${\n                                HoH.name\n                            }, as current Head of Household, you must cast the sole vote to evict.`}\n                        </p>\n                        <Portraits houseguests={[displayHoH]} centered={true} />\n                        <p style={{ textAlign: \"center\" }}>\n                            <b>I vote to evict {`${evictee.name}.`}</b>\n                        </p>\n                    </div>\n                )}\n\n                <Portraits\n                    houseguests={[\n                        getById(newGameState, nominees[0].id),\n                        getById(newGameState, nominees[1].id)\n                    ]}\n                    centered={true}\n                />\n                <p style={{ textAlign: \"center\" }}>\n                    <b>{`${evictee.name}... you have been evicted from the Big Brother House.`}</b>\n                </p>\n                <NextEpisodeButton />\n            </div>\n        )\n    });\n    return [newGameState, scene];\n}\n","import { Subscription } from \"rxjs\";\nimport { Sidebar } from \"./sidebar\";\nimport { Season } from \"../../model/season\";\nimport { Episode, nonEvictedHouseguests, getById } from \"../../model\";\nimport { Scene } from \"../episode/scene\";\nimport {\n    mainContentStream$,\n    episodes$,\n    switchEpisode$,\n    newEpisode,\n    switchSceneRelative,\n    cast$,\n    getSelectedPlayer,\n    selectedPlayer$\n} from \"../../subjects/subjects\";\n\ninterface IndexedScene {\n    scene: Scene;\n    index: number;\n}\n\nconst LEFT = 37;\nconst RIGHT = 39;\n\nexport class SidebarController {\n    private view: Sidebar;\n    private subscriptions: Subscription[] = [];\n    private season: Season = new Season();\n    private scenes: IndexedScene[] = [];\n    private selectedEpisode: number = 0;\n\n    public constructor(view: Sidebar) {\n        this.view = view;\n        this.subscriptions.push(\n            episodes$.subscribe({\n                next: episode => this.onNewEpisode(episode)\n            })\n        );\n        this.subscriptions.push(\n            switchEpisode$.subscribe({\n                next: (value: number) => {\n                    this.switchSceneRelative(value);\n                }\n            })\n        );\n        this.subscriptions.push(\n            cast$.subscribe({\n                next: () => (this.season = new Season())\n            })\n        );\n    }\n\n    public getSelectedEpisode() {\n        return this.selectedEpisode;\n    }\n\n    public async switchToScene(id: number) {\n        mainContentStream$.next(this.scenes[id].scene.render);\n        this.selectedEpisode = this.scenes[id].index;\n        await this.view.setState({ selectedScene: id });\n        if (getSelectedPlayer() !== null) {\n            selectedPlayer$.next(\n                getById(this.scenes[this.view.state.selectedScene].scene.gameState, getSelectedPlayer()!.id)\n            );\n        }\n    }\n\n    private switchSceneRelative = (delta: number) => {\n        const selectedScene = this.view.state.selectedScene;\n        const renderedScenes = this.scenes.length;\n        const targetScene = selectedScene + delta;\n        if (targetScene < 0) {\n            return;\n        }\n        const lastEpisode = this.view.state.episodes[this.view.state.episodes.length - 1];\n        if (targetScene < renderedScenes) {\n            // Go back to an earlier scene\n            this.switchToScene(targetScene);\n        } else if (targetScene === renderedScenes) {\n            // Generate a new scene, then jump to it\n            const currentGameState = lastEpisode.gameState;\n            const newPlayerCount = nonEvictedHouseguests(lastEpisode.gameState).length;\n            const nextEpisodeType = this.season.whichEpisodeType(newPlayerCount);\n            if (newPlayerCount > 2) {\n                newEpisode(this.season.renderEpisode(currentGameState, nextEpisodeType));\n                this.switchSceneRelative(1);\n            }\n        }\n    };\n\n    public handleKeyDown(event: any) {\n        if (event.keyCode === LEFT) {\n            switchSceneRelative(-1);\n        } else if (event.keyCode === RIGHT) {\n            switchSceneRelative(1);\n        }\n    }\n\n    private onNewEpisode(episode: Episode | null) {\n        if (!episode) {\n            this.view.setState({ episodes: [], selectedScene: 0 });\n            this.scenes = [];\n        } else {\n            const newState = { ...this.view.state };\n            // starts at -1: prevent OBOE\n            const latestIndex = this.scenes.length === 0 ? -1 : this.scenes[this.scenes.length - 1].index;\n            const index = latestIndex + 1;\n            this.scenes.push({ scene: episode, index });\n            episode.scenes.forEach(scene => this.scenes.push({ scene, index }));\n            newState.episodes.push(episode);\n            this.view.setState(newState);\n        }\n    }\n\n    public destroy() {\n        this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n}\n","import React from \"react\";\nimport { SidebarController } from \"./sidebarController\";\nimport { PregameEpisode } from \"../episode/pregameEpisode\";\nimport { Episode, GameState } from \"../../model\";\nimport { Scene } from \"../episode/scene\";\nimport { newEpisode } from \"../../subjects/subjects\";\ninterface SidebarState {\n    episodes: Episode[];\n    selectedScene: number;\n}\n\nexport class Sidebar extends React.Component<{}, SidebarState> {\n    private controller: SidebarController;\n    public constructor(props: {}) {\n        super(props);\n        this.controller = new SidebarController(this);\n        this.state = { episodes: [], selectedScene: 0 };\n        newEpisode(new PregameEpisode(new GameState([])));\n    }\n\n    public componentDidMount() {\n        document.addEventListener(\"keydown\", this.controller.handleKeyDown);\n    }\n\n    public componentWillUnmount() {\n        this.controller.destroy();\n    }\n\n    public render() {\n        return (\n            <div className=\"box\" style={{ minWidth: 140 }}>\n                {this.getEpisodes()}\n            </div>\n        );\n    }\n\n    private getHighlight(title: string, key: number) {\n        if (key === this.state.selectedScene) {\n            return <mark>{title}</mark>;\n        }\n        return title;\n    }\n\n    private getEpisodes() {\n        const result: JSX.Element[] = [];\n        // Weird OBOE to make keys start at 0\n        let episodeKey = -1;\n        let breakKey = 0;\n        this.state.episodes.forEach((episode: Episode) => {\n            const id = ++episodeKey;\n            result.push(\n                <b\n                    key={id}\n                    onClick={() => {\n                        this.controller.switchToScene(id);\n                    }}\n                >\n                    {this.getHighlight(episode.title, id)}\n                </b>\n            );\n            result.push(<br key={--breakKey} />);\n            episode.scenes.forEach((scene: Scene) => {\n                const id = ++episodeKey;\n                if (this.controller.getSelectedEpisode() === episode.gameState.phase) {\n                    result.push(\n                        <a key={id} onClick={() => this.controller.switchToScene(id)}>\n                            {this.getHighlight(scene.title, id)}\n                        </a>\n                    );\n                    result.push(<br key={--breakKey} />);\n                }\n            });\n        });\n        return result;\n    }\n}\n","import React from \"react\";\nimport { mainContentStream$ } from \"../../subjects/subjects\";\n\nexport class MainContentArea extends React.Component<{}, { content: any }> {\n    // a simple class that displays whatever it gets fed through the main content stream.\n\n    private contentStream: any;\n\n    public constructor(props: any) {\n        super(props);\n        this.state = { content: null };\n    }\n\n    public componentDidMount() {\n        this.contentStream = mainContentStream$.subscribe(content => {\n            this.setState({ content });\n        });\n    }\n\n    public componentDidUpdate(prevProps: never, prevState: any) {\n        if (prevState.content !== this.state.content) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    public componentWillUnmount() {\n        this.contentStream.unsubscribe();\n    }\n\n    public render() {\n        return <div className=\"box\">{this.state.content}</div>;\n    }\n}\n","import \"./mainPage.scss\";\nimport React from \"react\";\nimport { Sidebar } from \"../sidebar/sidebar\";\nimport { Topbar } from \"../topbar/topBar\";\nimport { MainContentArea } from \"./mainContentArea\";\nimport { MainPageController } from \"./mainPageController\";\n\ninterface MainPageProps {\n    controller: MainPageController;\n}\n\nexport class MainPage extends React.Component<MainPageProps, any> {\n    public constructor(props: MainPageProps) {\n        super(props);\n        props.controller.inject(this);\n    }\n\n    public render() {\n        return (\n            <div className=\"main-page\">\n                <Topbar />\n                <div className=\"columns\">\n                    <div className=\"column is-narrow\">\n                        <Sidebar />\n                    </div>\n                    <div className=\"column\">\n                        <MainContentArea />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import { MainPage } from \"./mainPage\";\n\nexport class MainPageController {\n    private view: MainPage = new MainPage({ controller: this });\n\n    public inject(page: MainPage) {\n        this.view = page;\n    }\n}\n","import React, { Component } from \"react\";\nimport { MainPage } from \"./components/mainPage/mainPage\";\nimport { MainPageController } from \"./components/mainPage/mainPageController\";\n\nclass App extends Component {\n    render() {\n        return <MainPage controller={new MainPageController()} />;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {});\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {});\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}