{"version":3,"sources":["model/playerProfile.ts","model/houseguest.ts","utils/utilities.ts","utils/relationshipMap.ts","components/mainPage/mainPageController.ts","utils/BbRandomGenerator.ts","components/playerPortrait/selectedPortrait.ts","components/playerPortrait/houseguestPortraitController.ts","components/playerPortrait/houseguestPortrait.tsx","utils/ai/classifyRelationship.ts","components/playerPortrait/subtitle.tsx","components/playerPortrait/houseguestToPortrait.tsx","components/playerPortrait/portraits.tsx","components/memoryWall/memoryWall.tsx","components/playerPortrait/setupPortrait.tsx","components/castingScreen/importLinks.tsx","components/episode/pregameEpisode.tsx","components/castingScreen/randomXButton.tsx","components/castingScreen/castingScreen.tsx","components/topbar/topBar.tsx","components/pregameScreen/pregameScreen.tsx","components/mainPage/mainContentArea.tsx","components/sidebar/sidebarController.ts","components/buttons/nextEpisodeButton.tsx","utils/ai/aiUtils.ts","utils/ai/aiApi.ts","components/episode/bigBrotherEpisode.tsx","model/season.ts","components/episode/bigBrotherFinale.tsx","components/episode/episodeFactory.ts","model/gameState.ts","components/sidebar/sidebar.tsx","components/mainPage/mainPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PlayerProfile","init","Object","classCallCheck","this","name","imageURL","assign","Houseguest","_PlayerProfile","_this","possibleConstructorReturn","getPrototypeOf","call","isEvicted","isJury","id","nominations","hohWins","povWins","popularity","deltaPopularity","relationships","superiors","Set","getFriendEnemyCount","Error","concat","assertThisInitialized","inherits","createClass","key","value","villain","roundTwoDigits","number","Math","round","newRelationshipMap","size","exclude","result","i","cast$","BehaviorSubject","getCast","MainPageController","view","MainPage","controller","page","BbRandomGenerator","seed","rng","prand","xorshift128plus","_this$rng$next","next","_this$rng$next2","slicedToArray","a","b","_prand$uniformIntDist","uniformIntDistribution","_prand$uniformIntDist2","_this$rng$next3","_this$rng$next4","rng$","selectedPlayer$","subscribe","cast","castNames","forEach","houseguest","string","hash","length","charCodeAt","hashcode","getSelectedPlayer","selectPlayer","player","maxPopularity","minPopularity","selectedColor","HouseguestPortraitController","subs","defaultState","refreshData","data","props","setState","rgbToHex","percent","x","xSquared","extremeValues","undefined","push","sub","unsubscribe","c","hex","toString","r","g","componentToHex","HouseguestPortrait","_React$Component","state","isNullOrUndefined","_this2","imageClass","getImageClass","subtitle","generateSubtitle","className","react_default","createElement","onClick","style","backgroundColor","src","width","height","React","Component","RelationshipType","RelationshipTypeToSymbol","FRIEND","ENEMY","PAWN","QUEEN","classifyRelationship","heroPopularity","villainPopularity","relationship","benefitsHero","benefitsVillain","Friend","Pawn","Queen","Enemy","_generateSubtitle","hero","detailed","popularitySubtitle","deltaPop","statePopularity","getDeltaPopularity","compWins","lineHeight","titles","friendOrEnemyTitle","map","txt","count","friends","enemies","Relationship","friendEnemyCountTitle","generateDetailedSubtitle","houseguestToPortrait","houseguestPortrait_HouseguestPortrait","Portrait","centered","Portraits","rows","houseguests","memoryWallPortrait","MemoryWall","margin","maxWidth","getPlayers","SetupPortrait","textAlign","onDoubleClick","onDelete","imageUrl","contentEditable","onChange","spellCheck","ImportLinks","text","lines","split","profiles","line","temp","pop","replace","substr","indexOf","onSubmit","event","target","PregameEpisodeType","eliminates","canPlayWith","n","PregameEpisode","gameState","title","scenes","render","type","PregameScreen","RandomButton","_useState","useState","_useState2","setNumber","disabled","random","parseInt","NumericInput","marginLeft","test","CastingScreen","appendProfiles","newState","objectSpread","profile","players","submit","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","newCast","mainContentStream$","newEpisode","GameState","stop","amount","shuffle","slice","handleUpload","handleFiles","files","handleDrop","newName","_this3","splice","_this4","setupPortrait_SetupPortrait","deleteMethod","handleChange","_this5","FileDrop","onDrop","importLinks_ImportLinks","multiple","getFiles","file","match","lastIndexOf","URL","createObjectURL","EditCastLink","castingScreen_CastingScreen","EditSeasonLink","Topbar","marginTop","NextEpisodeButton","MainContentArea","contentStream","content","prevProps","prevState","window","scrollTo","episodes$","switchEpisode$","Subject","episode","switchSceneRelative","SidebarController","subscriptions","season","Season","selectedEpisode","delta","selectedScene","renderedScenes","targetScene","lastEpisode","episodes","switchToScene","currentGameState","newPlayerCount","nonEvictedHouseguests","nextEpisodeType","whichEpisodeType","renderEpisode","onNewEpisode","scene","index","keyCode","favouriteIndex","options","callback","highestIndex","highestScore","Infinity","currentScore","lowestScore","lowestIndex","doesHeroWinTheFinale","hgs","jury","heroVotes","villainVotes","juror","heroShouldTargetSuperiors","remainingPlayers","castEvictionVote","nominees","inJury","nom0","nom1","zeroIsSuperior","has","oneIsSuperior","cutthroatVote","console","log","nonTarget","targetIsFriend","nonTargetIsNonFriend","cutthroatVoteJury","r0","r1","nominatePlayer","hitlist","filter","hg","hitList","trueOptions","useGoldenVetoPreJury","save","rel0","relationshipWith","rel1","max","BigBrotherVanilla","generateVetoCeremonyScene","initialGameState","HoH","initialNominees","povWinner","povTarget","descisionText","getById","useGoldenVeto","replacementSpeech","nameAReplacement","finalNominees","replacementNom","evictHouseguest","evictee","finalJurySize","delete","BigBrotherVanillaEpisode","hohCompScene","hoh","nomCeremonyScene","_generateHohCompScene","newGameState","MutableGameState","previousHoh","previousHOH","newHoH","randomPlayer","phase","generateHohCompScene","_generateHohCompScene2","vetoCompScene","_generateNomCeremonyS","nom2","noms","generateNomCeremonyScene","_generateNomCeremonyS2","vetoCeremonyScene","_generateVetoCompScen","choices","povPlayers","everyoneWillPlay","introText","extras","generateVetoCompScene","_generateVetoCompScen2","evictionScene","_generateVetoCeremony","_generateVetoCeremony2","_generateEvictionScen","votes","votesFor0","votesFor1","tieVote","tieBreaker","voteCountText","generateEvictionScene","_generateEvictionScen2","BigBrotherFinale","juryVoteScene","jurors","getJurors","finalists","voteCount","castJuryVote","voteBlocks","winner","BigBrotherFinaleEpisode","finalHoH","finalEviction","_finalHohCompScene","final3","enduranceWinner","enduranceLosers","skillWinner","finalHohCompScene","_finalHohCompScene2","voteScene","_finalEvictionScene","finalEvictionScene","_finalEvictionScene2","EpisodeFactory","episodeType","iMap","j","jMap","impression","randomFloat","firstImpressions","heroWinsTheFinale","add","generatePowerRankings","house","sum","targetId","calculatePopularity","updatePopularity","rel","updateFriendCounts","finalState","factory","nextEpisode","find","inclusions","exclusions","excludedIds","includes","arguments","randomInt","Array","copy","_","cloneDeep","Sidebar","document","addEventListener","handleKeyDown","destroy","minWidth","getEpisodes","episodeKey","breakKey","getHighlight","getSelectedEpisode","inject","sidebar_Sidebar","mainContentArea_MainContentArea","App","mainPage_MainPage","Boolean","location","hostname","ReactDOM","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f6911f1.chunk.js","sourcesContent":["export class PlayerProfile {\n    readonly name: string = \"\";\n    readonly imageURL: string = \"\";\n    constructor(init: PlayerProfile) {\n        if (!init) {\n            return;\n        }\n        Object.assign(this, init);\n    }\n}\n","import { PlayerProfile } from \"./playerProfile\";\nimport { RelationshipMap } from \"../utils\";\n\ninterface HouseguestInit extends PlayerProfile {\n    id: number;\n    relationships: RelationshipMap;\n}\n\nexport class Houseguest extends PlayerProfile {\n    public isEvicted: boolean = false;\n    public isJury: boolean = false;\n\n    readonly id: number = 0;\n\n    public nominations: number = 0;\n    public hohWins: number = 0;\n    public povWins: number = 0;\n\n    // Popularity ranges from -1 to 1\n    public popularity: number = 0;\n    public deltaPopularity: number = 0;\n    readonly relationships: RelationshipMap = {};\n    readonly superiors: Set<number> = new Set<number>();\n\n    public relationshipWith(villain: Houseguest): number {\n        return this.relationships[villain.id];\n    }\n\n    public getFriendEnemyCount: () => { friends: number; enemies: number } = () => {\n        throw new Error(`Failed to get friend / enemy count for houseguest ${this.id} (${this.name})`);\n    };\n\n    constructor(init: HouseguestInit) {\n        super(init);\n        Object.assign(this, init);\n    }\n}\n","// spits out the next episode given a gamestate, in addition to the new gamestate.\n// allows for re-use, because you can give it the initial gamestate, and then just keep asking for the next season.\nexport function hashcode(string: string): number {\n    var hash = 0,\n        i,\n        chr;\n    if (string.length === 0) return hash;\n    for (i = 0; i < string.length; i++) {\n        chr = string.charCodeAt(i);\n        hash = (hash << 5) - hash + chr;\n        hash |= 0;\n    }\n    return hash;\n}\n\nexport function roundTwoDigits(number: number | undefined) {\n    if (!number) {\n        return 0;\n    }\n    return Math.round(number * 100);\n}\n\nexport function extremeValues(x: number | undefined): number {\n    if (!x) {\n        return 0;\n    }\n    const xSquared = x * x;\n    if (x >= 0) {\n        return -xSquared + 2 * x;\n    } else {\n        return xSquared + 2 * x;\n    }\n}\n","export interface RelationshipMap {\n    [id: number]: number;\n}\n\nexport function newRelationshipMap(size: number, exclude: number): RelationshipMap {\n    const result: RelationshipMap = {};\n    for (let i = 0; i < size; i++) {\n        if (i !== exclude) result[i] = 0;\n    }\n    return result;\n}\n","import { MainPage } from \"./mainPage\";\nimport { PlayerProfile } from \"../../model\";\nimport { BehaviorSubject } from \"rxjs\";\n\nexport const cast$ = new BehaviorSubject<PlayerProfile[]>([]);\n\nexport function updateCast(newCast: PlayerProfile[]) {\n    cast$.next(newCast);\n}\n\nexport function getCast(): PlayerProfile[] {\n    return cast$.value;\n}\n\nexport class MainPageController {\n    private view: MainPage = new MainPage({ controller: this });\n\n    public inject(page: MainPage) {\n        this.view = page;\n    }\n}\n","import prand from \"pure-rand\";\nimport { cast$ } from \"../components/mainPage/mainPageController\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { hashcode } from \"./utilities\";\n\nexport class BbRandomGenerator {\n    private rng: prand.RandomGenerator;\n\n    public randomFloat(): number {\n        let result: number;\n        [result, this.rng] = this.rng.next();\n        return result / 2147483647.0;\n    }\n\n    public randomInt(a: number, b: number): number {\n        let result: number;\n        [result, this.rng] = prand.uniformIntDistribution(a, b, this.rng);\n        return result;\n    }\n\n    public flipCoin(): boolean {\n        let result: number;\n        [result, this.rng] = this.rng.next();\n        return result % 2 === 0;\n    }\n\n    public seed(seed: number) {\n        this.rng = prand.xorshift128plus(seed);\n    }\n\n    public constructor(seed: number) {\n        this.rng = prand.xorshift128plus(seed);\n    }\n}\n\nexport function rng() {\n    return rng$.value;\n}\n\nconst rng$ = new BehaviorSubject(new BbRandomGenerator(0));\n\nconst castSub = cast$.subscribe({\n    next: cast => {\n        let castNames = \"\";\n        cast.forEach(houseguest => (castNames += houseguest.name));\n        rng$.next(new BbRandomGenerator(hashcode(castNames)));\n    }\n});\n","import { BehaviorSubject } from \"rxjs\";\nimport { Houseguest } from \"../../model\";\nimport { RelationshipMap } from \"../../utils\";\n\nexport const selectedPlayer$ = new BehaviorSubject<SelectedPlayerData | null>(null);\n\nexport interface SelectedPlayerData {\n    id: number;\n    popularity: number; // TODO:  this is EXTREMELY bad. we are pushing a static object to something that NEEDS TO dynamically change\n    relationships: RelationshipMap; // this is bad and i dont know HOW TO FIX IT\n    isEvicted: boolean;\n    superiors?: Set<number>;\n}\n\nexport function getSelectedPlayer() {\n    return selectedPlayer$.value;\n}\n\nexport function selectPlayer(player: SelectedPlayerData | null) {\n    if (!player || (getSelectedPlayer() && (getSelectedPlayer() as Houseguest).id === player.id)) {\n        selectedPlayer$.next(null);\n    } else {\n        selectedPlayer$.next(player);\n    }\n}\n","import { extremeValues } from \"../../utils\";\nimport { PortraitProps, HouseguestPortrait, PortraitState } from \"../memoryWall\";\nimport { Subscription } from \"rxjs\";\nimport { selectedPlayer$, SelectedPlayerData } from \"./selectedPortrait\";\n\nconst maxPopularity = { r: 137, g: 252, b: 137 };\nconst minPopularity = { r: 252, g: 137, b: 137 };\nconst selectedColor = { r: 51, g: 255, b: 249 };\n\nexport class HouseguestPortraitController {\n    private subs: Subscription[] = [];\n    private view: HouseguestPortrait;\n    public readonly defaultState: PortraitState;\n    constructor(view: HouseguestPortrait) {\n        this.view = view;\n        this.defaultState = { popularity: this.view.props.popularity };\n    }\n\n    public backgroundColor(props: PortraitProps, popularity: number | undefined) {\n        if (popularity && (popularity > 1 || popularity < -1)) {\n            return this.rgbToHex(selectedColor.r, selectedColor.g, selectedColor.b);\n        }\n        const extremePopularity = extremeValues(popularity);\n        const percent = (extremePopularity + 1) / 2;\n        return props.isEvicted\n            ? undefined\n            : this.rgbToHex(\n                  minPopularity.r + percent * (maxPopularity.r - minPopularity.r),\n                  minPopularity.g + percent * (maxPopularity.g - minPopularity.g),\n                  minPopularity.b + percent * (maxPopularity.b - minPopularity.b)\n              );\n    }\n\n    public subscribe() {\n        const subs: Subscription[] = [];\n        subs.push(\n            selectedPlayer$.subscribe({\n                next: this.refreshData\n            })\n        );\n        this.subs = subs;\n    }\n\n    public unsubscribe() {\n        this.subs.forEach(sub => sub.unsubscribe());\n    }\n\n    private refreshData = (data: SelectedPlayerData | null) => {\n        // TODO: somehow refresh this heart thing every time selected player data updates\n        if (!data) {\n            this.view.setState(this.defaultState);\n        } else {\n            data = data as SelectedPlayerData;\n            if (data.id !== this.view.props.id) {\n                this.view.setState({\n                    popularity: data.relationships[this.view.props.id!]\n                });\n            } else {\n                this.view.setState({ popularity: 2 });\n            }\n        }\n    };\n\n    private componentToHex(c: any) {\n        var hex = Math.round(c).toString(16);\n        return hex.length == 1 ? \"0\" + hex : hex;\n    }\n\n    private rgbToHex(r: any, g: any, b: any) {\n        return \"#\" + this.componentToHex(r) + this.componentToHex(g) + this.componentToHex(b);\n    }\n}\n","import React from \"react\";\nimport { selectPlayer } from \"./selectedPortrait\";\nimport { isNullOrUndefined } from \"util\";\nimport { RelationshipMap } from \"../../utils\";\nimport _ from \"lodash\";\nimport { HouseguestPortraitController } from \"./houseguestPortraitController\";\n\nexport interface PortraitProps {\n    imageURL: string;\n    name: string;\n    id?: number;\n    relationships?: RelationshipMap;\n    isEvicted?: boolean;\n    isJury?: boolean;\n    popularity?: number;\n    deltaPopularity?: number;\n    generateSubtitle?: (props: PortraitProps, state: PortraitState) => string[];\n    tags?: string[];\n    superiors?: Set<number>;\n    getFriendEnemyCount?: () => { friends: number; enemies: number };\n}\n\nexport interface PortraitState {\n    popularity?: number;\n}\nexport class HouseguestPortrait extends React.Component<PortraitProps, PortraitState> {\n    private controller: HouseguestPortraitController;\n\n    public constructor(props: PortraitProps) {\n        super(props);\n        this.controller = new HouseguestPortraitController(this);\n        this.state = this.controller.defaultState;\n    }\n\n    public componentDidMount() {\n        if (isNullOrUndefined(this.props.id)) {\n            return;\n        }\n        this.controller.subscribe();\n    }\n\n    public componentWillUnmount() {\n        this.controller.unsubscribe();\n    }\n\n    private onClick(): void {\n        if (isNullOrUndefined(this.props.id) || !this.props.relationships) {\n            return;\n        }\n        const data = {\n            id: this.props.id,\n            relationships: this.props.relationships,\n            isEvicted: !!this.props.isEvicted,\n            popularity: this.props.popularity || 0,\n            superiors: this.props.superiors\n        };\n        selectPlayer(data);\n    }\n\n    public render() {\n        const props = this.props;\n        const imageClass = getImageClass(props);\n        let subtitle: any[] = [];\n        if (props.generateSubtitle) {\n            subtitle = props.generateSubtitle(this.props, this.state);\n        }\n        let className = \"\";\n        if (props.isJury) {\n            className = \"jury\";\n        } else if (props.isEvicted) {\n            className = \"evicted\";\n        }\n        return (\n            <div\n                onClick={() => this.onClick()}\n                style={{\n                    backgroundColor: this.controller.backgroundColor(props, this.state.popularity)\n                }}\n                className={`memory-wall-portrait ${className}`}\n            >\n                <img className={imageClass} src={props.imageURL} style={{ width: 100, height: 100 }} />\n                <br />\n                {props.name}\n                <br />\n                {!!props.generateSubtitle && <small className=\"portrait-history\">{subtitle}</small>}\n            </div>\n        );\n    }\n}\n\nfunction getImageClass(props: PortraitProps) {\n    let imageClass = props.isEvicted ? \"grayscale\" : \"\";\n    imageClass = props.isJury ? \"sepia\" : imageClass;\n    return imageClass;\n}\n","export enum RelationshipType {\n    Friend = \"FRIEND\",\n    Queen = \"QUEEN\",\n    Pawn = \"PAWN\",\n    Enemy = \"ENEMY\"\n}\n\nexport const RelationshipTypeToSymbol = { FRIEND: \"♥\", ENEMY: \"💔\", PAWN: \"PAWN\", QUEEN: \"QUEEN\" };\n\nexport function classifyRelationship(\n    heroPopularity: number,\n    villainPopularity: number,\n    relationship: number\n): RelationshipType {\n    const benefitsHero = relationship > heroPopularity;\n    const benefitsVillain = relationship > villainPopularity;\n    if (benefitsHero && benefitsVillain) {\n        return RelationshipType.Friend;\n    } else if (benefitsHero && !benefitsVillain) {\n        return RelationshipType.Pawn;\n    } else if (!benefitsHero && benefitsVillain) {\n        return RelationshipType.Queen;\n    }\n    return RelationshipType.Enemy;\n}\n","import React from \"react\";\nimport { roundTwoDigits } from \"../../utils\";\nimport { ProfileHouseguest, PortraitProps, PortraitState } from \"../memoryWall\";\nimport { getSelectedPlayer, SelectedPlayerData } from \"./selectedPortrait\";\nimport {\n    RelationshipTypeToSymbol,\n    RelationshipType as Relationship,\n    classifyRelationship\n} from \"../../utils/ai/classifyRelationship\";\n\nfunction _generateSubtitle(hero: PortraitProps, state: PortraitState, detailed: boolean): any[] {\n    let key = 0;\n    let popularity = state.popularity;\n    if (popularity && (popularity > 1 || popularity < -1)) {\n        popularity = hero.popularity;\n    }\n    let subtitle: any[] = [];\n    // popularity\n    if (popularity && !hero.isEvicted) {\n        let popularitySubtitle = `${roundTwoDigits(popularity)}%`;\n        const deltaPop = getDeltaPopularity(hero, popularity);\n        if (detailed && deltaPop !== 0) {\n            const arrow = deltaPop > 0 ? \" | ↑\" : \" | ↓\";\n            popularitySubtitle += `${arrow} ${deltaPop}%`;\n        }\n        subtitle.push(<div key={key++}>{popularitySubtitle}</div>);\n    }\n    // competition wins\n    if (compWins(hero)) {\n        subtitle.push(<div key={key++}>{`${compWins(hero)}`}</div>);\n    } else {\n        subtitle.push(<br key={key++} style={{ lineHeight: 1 }} />);\n    }\n    // friendship count / titles\n    if (!hero.isEvicted && getSelectedPlayer() !== null) {\n        const data = getSelectedPlayer() as SelectedPlayerData;\n        if (data.id !== hero.id) {\n            const titles = friendOrEnemyTitle(hero, data);\n            subtitle = subtitle.concat(titles.map(txt => <div key={key++}>{txt}</div>));\n        } else {\n            const titles = friendEnemyCountTitle(hero);\n            subtitle = subtitle.concat(titles.map(txt => <div key={key++}>{txt}</div>));\n        }\n    } else {\n        subtitle.push(<br key={key++} style={{ lineHeight: 1 }} />);\n    }\n    return subtitle;\n}\n\nexport function generateSubtitle(houseguest: PortraitProps, state: PortraitState): any[] {\n    return _generateSubtitle(houseguest, state, false);\n}\n\nexport function generateDetailedSubtitle(houseguest: PortraitProps, state: PortraitState): any[] {\n    return _generateSubtitle(houseguest, state, true);\n}\n\nfunction getDeltaPopularity(houseguest: PortraitProps, statePopularity: number) {\n    if (roundTwoDigits(houseguest.popularity) !== roundTwoDigits(statePopularity)) {\n        return 0;\n    }\n    return houseguest.deltaPopularity ? roundTwoDigits(houseguest.deltaPopularity) : 0;\n}\n\nfunction compWins(houseguest: ProfileHouseguest): string {\n    return `${houseguest.hohWins ? `♔ ${houseguest.hohWins}` : \"\"}${\n        houseguest.povWins && houseguest.hohWins\n            ? `|🛇 ${houseguest.povWins}`\n            : houseguest.povWins\n            ? `🛇 ${houseguest.povWins}`\n            : \"\"\n    }${(houseguest.hohWins || houseguest.povWins) && houseguest.nominations ? \"|\" : \"\"}${\n        houseguest.nominations ? `✘ ${houseguest.nominations}` : \"\"\n    }`;\n}\n\nfunction friendOrEnemyTitle(hero: PortraitProps, villain: SelectedPlayerData): string[] {\n    const titles: string[] = [];\n    titles.push(\n        RelationshipTypeToSymbol[\n            classifyRelationship(hero.popularity || 0, villain.popularity, hero.relationships![villain.id])\n        ]\n    );\n    return titles;\n}\n\nfunction friendEnemyCountTitle(hero: PortraitProps): string[] {\n    const titles: string[] = [];\n    const count = hero.getFriendEnemyCount ? hero.getFriendEnemyCount() : { friends: 0, enemies: 0 };\n    titles.push(\n        `${count.friends} ${RelationshipTypeToSymbol[Relationship.Friend]} | ${count.enemies} ${\n            RelationshipTypeToSymbol[Relationship.Enemy]\n        }`\n    );\n    return titles;\n}\n","import { ProfileHouseguest, HouseguestPortrait } from \"../memoryWall\";\nimport React from \"react\";\nimport { generateSubtitle, generateDetailedSubtitle } from \"./subtitle\";\n\nexport function houseguestToPortrait(houseguest: ProfileHouseguest, key?: any): JSX.Element {\n    return <HouseguestPortrait {...houseguest} key={key} generateSubtitle={generateSubtitle} />;\n}\n\nexport function memoryWallPortrait(houseguest: ProfileHouseguest, key?: any): JSX.Element {\n    return <HouseguestPortrait {...houseguest} key={key} generateSubtitle={generateDetailedSubtitle} />;\n}\n","import { ProfileHouseguest } from \"../memoryWall\";\nimport React from \"react\";\nimport { houseguestToPortrait, memoryWallPortrait } from \"./houseguestToPortrait\";\n\nlet key = -1;\n\nexport function Portrait(props: { houseguest: ProfileHouseguest; centered?: boolean }): JSX.Element {\n    return (\n        <div\n            key={key++}\n            className={`columns is-gapless is-mobile is-multiline ${props.centered && \"is-centered\"}`}\n        >\n            {houseguestToPortrait(props.houseguest)}\n        </div>\n    );\n}\n\nexport function Portraits(props: {\n    houseguests: ProfileHouseguest[];\n    centered?: boolean;\n    detailed?: boolean;\n}): JSX.Element {\n    const rows: JSX.Element[] = [];\n    if (!props.houseguests || props.houseguests.length === 0) {\n        return <div />;\n    }\n    props.houseguests.forEach((houseguest: ProfileHouseguest) => {\n        if (props.detailed) {\n            rows.push(memoryWallPortrait(houseguest, key++));\n        } else {\n            rows.push(houseguestToPortrait(houseguest, key++));\n        }\n    });\n\n    return (\n        <div className={`columns is-gapless is-mobile is-multiline ${props.centered && \"is-centered\"}`}>\n            {rows}\n        </div>\n    );\n}\n","import React from \"react\";\nimport \"./memoryWall.scss\";\nimport { PlayerProfile } from \"../../model\";\nimport { Portraits } from \"../playerPortrait/portraits\";\nimport { RelationshipMap } from \"../../utils\";\nexport interface IMemoryWallProps {\n    readonly houseguests: ProfileHouseguest[];\n}\n\nexport interface ProfileHouseguest extends PlayerProfile {\n    id?: number;\n    relationships?: RelationshipMap;\n    isEvicted?: boolean;\n    isJury?: boolean;\n    popularity?: number;\n    deltaPopularity?: number;\n    hohWins?: number;\n    povWins?: number;\n    nominations?: number;\n    getFriendEnemyCount?: () => { friends: number; enemies: number };\n}\n\nexport function MemoryWall(props: IMemoryWallProps): JSX.Element {\n    return <div className=\"memory-wall\">{getPlayers(props)}</div>;\n}\n\nfunction getPlayers(props: IMemoryWallProps): any {\n    if (!props.houseguests || props.houseguests.length === 0) {\n        return null;\n    }\n    return (\n        <div\n            style={{\n                margin: \"auto\",\n                maxWidth: props.houseguests.length < 26 ? 700 : -1\n            }}\n        >\n            <Portraits houseguests={props.houseguests} centered={true} detailed={true} />\n        </div>\n    );\n}\n","import React from \"react\";\n\ninterface SetupPortraitProps {\n    name: string;\n    imageUrl: string;\n    onDelete: () => void;\n    onChange: (arg0: Event) => void;\n}\n\ninterface SetupPortraitState {\n    name: string;\n}\n\nexport class SetupPortrait extends React.Component<SetupPortraitProps, SetupPortraitState> {\n    // TODO: When you click on the text, you can edit the text.\n\n    public constructor(props: SetupPortraitProps) {\n        super(props);\n        this.state = { name: props.name };\n    }\n\n    public componentWillReceiveProps(props: SetupPortraitProps) {\n        this.setState({ name: props.name });\n    }\n\n    public render() {\n        return (\n            <div className={`edit-portrait`}>\n                <div style={{ textAlign: \"center\" }}>\n                    <div className=\"x-button noselect\" onDoubleClick={() => this.props.onDelete()}>\n                        ✘\n                    </div>\n                    <img src={this.props.imageUrl} style={{ width: 100, height: 100 }} />\n                    <br />\n                    <input\n                        className=\"memory-wall-portrait\"\n                        contentEditable={true}\n                        onChange={() => this.props.onChange}\n                        spellCheck={false}\n                        value={this.state.name}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { PlayerProfile } from \"../../model\";\n\ninterface ImportLinksProps {\n    onSubmit: (profiles: PlayerProfile[]) => void;\n    className?: string;\n}\n\nexport class ImportLinks extends React.Component<ImportLinksProps, any> {\n    public constructor(props: ImportLinksProps) {\n        super(props);\n        this.state = { text: \"\" };\n    }\n\n    private onSubmit() {\n        const lines = this.state.text.split(/\\r?\\n/);\n        // ugly, but it works.\n        const profiles: PlayerProfile[] = [];\n        lines.forEach((line: string) => {\n            const temp = line.split(\"/\").pop();\n            let name = temp\n                ? temp\n                      .split(\"#\")[0]\n                      .split(\"?\")[0]\n                      .replace(/\\.[^/.]+$/, \"\")\n                      .replace(/[-_]/g, \" \")\n                : null;\n\n            if (line.substr(0, line.indexOf(\" \"))) {\n                name = line.substr(line.indexOf(\" \") + 1);\n            }\n            if (name) {\n                profiles.push({\n                    name,\n                    imageURL: line\n                });\n            }\n        });\n        this.props.onSubmit(profiles);\n        this.setState({ text: \"\" });\n    }\n\n    public render() {\n        return (\n            <div className={this.props.className}>\n                <textarea\n                    className=\"textarea\"\n                    onChange={event => {\n                        this.setState({ text: event.target.value });\n                    }}\n                    value={this.state.text}\n                />\n                <button onClick={() => this.onSubmit()}>Import links</button>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { Episode, EpisodeType } from \"./episodes\";\nimport { PregameScreen } from \"../pregameScreen/pregameScreen\";\nimport { GameState } from \"../../model/gameState\";\n\nconst PregameEpisodeType: EpisodeType = {\n    eliminates: 0,\n    canPlayWith: (n: number) => {\n        return n > 2;\n    }\n};\n\nexport class PregameEpisode implements Episode {\n    readonly title = \"Pregame\";\n    readonly scenes = [];\n    readonly render: JSX.Element;\n    readonly gameState: GameState;\n    readonly type = PregameEpisodeType;\n\n    public constructor(gameState: GameState) {\n        this.gameState = gameState;\n        this.render = <PregameScreen cast={gameState.houseguests} />;\n    }\n}\n","import React, { useState } from \"react\";\n\ninterface RandomButtonProps {\n    random: (n: number) => void;\n}\n\nexport function RandomButton(props: RandomButtonProps): JSX.Element {\n    const [number, setNumber] = useState(\"16\");\n    return (\n        <div>\n            <button\n                disabled={number === \"\"}\n                className=\"button is-primary\"\n                onClick={() => props.random(parseInt(number))}\n            >\n                Random\n            </button>\n            <NumericInput value={number} onChange={setNumber} />\n        </div>\n    );\n}\n\ninterface NumericInputProps {\n    value: string;\n    onChange: (newValue: string) => void;\n}\n\nfunction NumericInput(props: NumericInputProps) {\n    return (\n        <input\n            className=\"input\"\n            type=\"text\"\n            style={{ width: \"3em\", marginLeft: 5 }}\n            value={props.value}\n            onChange={event => {\n                const value = event.target.value;\n                if (/^\\d*$/g.test(value)) {\n                    props.onChange(value);\n                }\n            }}\n        />\n    );\n}\n","import React from \"react\";\nimport FileDrop from \"react-file-drop\";\nimport { PlayerProfile, GameState } from \"../../model\";\nimport { SetupPortrait } from \"../playerPortrait/setupPortrait\";\nimport { ImportLinks } from \"./importLinks\";\nimport { updateCast } from \"../mainPage/mainPageController\";\nimport { mainContentStream$ } from \"../mainPage/mainContentArea\";\nimport { PregameScreen } from \"../pregameScreen/pregameScreen\";\nimport { newEpisode } from \"../sidebar/sidebarController\";\nimport { PregameEpisode } from \"../episode/pregameEpisode\";\nimport { shuffle } from \"lodash\";\nimport { RandomButton } from \"./randomXButton\";\nimport { selectPlayer } from \"../playerPortrait/selectedPortrait\";\n\ninterface CastingScreenState {\n    players: PlayerProfile[];\n}\n\ninterface CastingScreenProps {\n    cast?: PlayerProfile[];\n}\n\nexport class CastingScreen extends React.Component<CastingScreenProps, CastingScreenState> {\n    constructor(props: CastingScreenProps) {\n        super(props);\n        this.state = { players: props.cast || [] };\n    }\n\n    private handleChange(i: number) {\n        return (event: any) => {\n            const newName = event.target.value.replace(/\\r?\\n|\\r/g, \"\");\n            const newState = { ...this.state };\n            newState.players[i] = new PlayerProfile({\n                imageURL: newState.players[i].imageURL,\n                name: newName\n            });\n            this.setState(newState);\n        };\n    }\n\n    private deleteMethod(i: number) {\n        return () => {\n            const newState = { ...this.state };\n            newState.players.splice(i, 1);\n            this.setState(newState);\n        };\n    }\n\n    private getFiles() {\n        const players = this.state.players;\n        if (!players) {\n            return;\n        }\n        const rows: JSX.Element[] = [];\n        let i = 0;\n        players.forEach(player =>\n            rows.push(\n                <SetupPortrait\n                    name={player.name}\n                    imageUrl={player.imageURL}\n                    onDelete={this.deleteMethod(i)}\n                    onChange={this.handleChange(i)}\n                    key={(++i).toString()}\n                />\n            )\n        );\n        return <div className=\"columns is-gapless is-mobile is-multiline is-centered\">{rows}</div>;\n    }\n\n    private appendProfiles = (profiles: PlayerProfile[]) => {\n        const newState = { ...this.state };\n        profiles.forEach(profile => newState.players.push(profile));\n        this.setState(newState);\n    };\n\n    private submit = async () => {\n        updateCast(this.state.players);\n        mainContentStream$.next(<PregameScreen cast={this.state.players} />);\n        selectPlayer(null);\n        await newEpisode(null);\n        await newEpisode(new PregameEpisode(new GameState(this.state.players)));\n    };\n\n    private random = (amount: number) => {\n        let players = this.state.players;\n        players = shuffle(players);\n        players = players.slice(0, amount);\n        this.setState({ players });\n    };\n\n    public render() {\n        return (\n            <FileDrop onDrop={this.handleDrop}>\n                <div className=\"level\">\n                    <ImportLinks onSubmit={this.appendProfiles} />\n                    <div className=\"level-item\">\n                        <button className=\"button is-danger\" onClick={() => this.setState({ players: [] })}>\n                            Delete all\n                        </button>\n                    </div>\n                    <div className=\"level-item\">\n                        <RandomButton random={this.random} />\n                    </div>\n                    <div className=\"level-item\">\n                        <button\n                            className=\"button is-primary\"\n                            disabled={this.state.players.length < 3}\n                            onClick={this.submit}\n                        >\n                            Submit\n                        </button>\n                    </div>\n                </div>\n                ~ Drop images ~<input type=\"file\" multiple onChange={this.handleUpload} />\n                {this.getFiles()}\n            </FileDrop>\n        );\n    }\n\n    private handleUpload = (event: any) => {\n        this.handleFiles(event.target.files);\n    };\n\n    private handleDrop = (files: FileList | null, event: React.DragEvent) => {\n        if (!files) return;\n        this.handleFiles(files);\n    };\n\n    private handleFiles(files: FileList) {\n        const newState = { ...this.state };\n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            if (file.type.match(/image\\/*/)) {\n                newState.players.push(\n                    new PlayerProfile({\n                        name: file.name.substr(0, file.name.lastIndexOf(\".\")) || file.name,\n                        imageURL: URL.createObjectURL(file)\n                    })\n                );\n            }\n        }\n        this.setState(newState);\n    }\n}\n","import React from \"react\";\nimport { mainContentStream$ } from \"../mainPage/mainContentArea\";\nimport { CastingScreen } from \"../castingScreen/castingScreen\";\nimport \"./topBar.scss\";\nimport { getCast } from \"../mainPage/mainPageController\";\n\nexport function EditCastLink(): JSX.Element {\n    return (\n        <div\n            className=\"topbar-link\"\n            onClick={() => {\n                mainContentStream$.next(<CastingScreen cast={getCast()} />);\n            }}\n        >\n            Edit Cast\n        </div>\n    );\n}\n\nexport function EditSeasonLink(): JSX.Element {\n    return (\n        <div\n            className=\"topbar-link\"\n            onClick={() => {\n                mainContentStream$.next(<CastingScreen cast={getCast()} />); // TODO: Proper edit season linking\n            }}\n        >\n            Edit Season\n        </div>\n    );\n}\n\nexport function Topbar(): JSX.Element {\n    return (\n        <div className=\"level box is-mobile\" style={{ marginTop: 30 }}>\n            <div className=\"level-item\">\n                <EditCastLink />\n            </div>\n            <div className=\"level-item\">\n                <EditSeasonLink />\n            </div>\n        </div>\n    );\n}\n","import React from \"react\";\nimport { PlayerProfile } from \"../../model\";\nimport { MemoryWall } from \"../memoryWall\";\nimport { NextEpisodeButton } from \"../buttons/nextEpisodeButton\";\nimport { EditCastLink } from \"../topbar/topBar\";\n\ninterface PregameScreenProps {\n    cast: PlayerProfile[];\n}\n\nexport function PregameScreen(props: PregameScreenProps): JSX.Element {\n    if (props.cast.length === 0) {\n        return (\n            <div>\n                Cast is empty. <EditCastLink />\n            </div>\n        );\n    }\n    return (\n        <div>\n            Welcome to Big Brother!\n            <MemoryWall houseguests={props.cast} />\n            <NextEpisodeButton />\n        </div>\n    );\n    // TODO: Custom season title.\n}\n","import React from \"react\";\nimport { BehaviorSubject } from \"rxjs\";\nimport { PregameScreen } from \"../pregameScreen/pregameScreen\";\n\nexport const mainContentStream$ = new BehaviorSubject(<PregameScreen cast={[]} />);\n\nexport class MainContentArea extends React.Component<{}, { content: any }> {\n    // a simple class that displays whatever it gets fed through the main content stream.\n\n    private contentStream: any;\n\n    public constructor(props: any) {\n        super(props);\n        this.state = { content: null };\n    }\n\n    public componentWillMount() {\n        this.contentStream = mainContentStream$.subscribe(content => {\n            this.setState({ content });\n        });\n    }\n\n    public componentDidUpdate(prevProps: never, prevState: any) {\n        if (prevState.content !== this.state.content) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    public componentWillUnmount() {\n        this.contentStream.unsubscribe();\n    }\n\n    public render() {\n        return <div className=\"box\">{this.state.content}</div>;\n    }\n}\n","import { Subject, Subscription, BehaviorSubject } from \"rxjs\";\nimport { Episode, Scene, nonEvictedHouseguests } from \"../../model\";\nimport { Sidebar } from \"./sidebar\";\nimport { Season } from \"../../model/season\";\nimport { mainContentStream$ } from \"../mainPage/mainContentArea\";\nimport { cast$ } from \"../mainPage/mainPageController\";\n\n// Null resets the season\nconst episodes$ = new BehaviorSubject<Episode | null>(null);\nconst switchEpisode$ = new Subject<number>();\n\nexport function newEpisode(episode: Episode | null) {\n    episodes$.next(episode);\n}\n\nexport function switchSceneRelative(n: number) {\n    switchEpisode$.next(n);\n}\n\ninterface IndexedScene {\n    scene: Scene;\n    index: number;\n}\n\nconst LEFT = 37;\nconst RIGHT = 39;\n\nexport class SidebarController {\n    private view: Sidebar;\n    private subscriptions: Subscription[] = [];\n    private season: Season = new Season();\n    private scenes: IndexedScene[] = [];\n    private selectedEpisode: number = 0;\n\n    public constructor(view: Sidebar) {\n        this.view = view;\n        this.subscriptions.push(\n            episodes$.subscribe({\n                next: episode => this.onNewEpisode(episode)\n            })\n        );\n        this.subscriptions.push(\n            switchEpisode$.subscribe({\n                next: (value: number) => this.switchSceneRelative(value)\n            })\n        );\n        this.subscriptions.push(\n            cast$.subscribe({\n                next: newCast => (this.season = new Season())\n            })\n        );\n    }\n\n    public getSelectedEpisode() {\n        return this.selectedEpisode;\n    }\n\n    public switchToScene(id: number) {\n        mainContentStream$.next(this.scenes[id].scene.render);\n        this.selectedEpisode = this.scenes[id].index;\n        this.view.setState({ selectedScene: id });\n    }\n\n    private switchSceneRelative = (delta: number) => {\n        const selectedScene = this.view.state.selectedScene;\n        const renderedScenes = this.scenes.length;\n        const targetScene = selectedScene + delta;\n\n        if (targetScene < 0) {\n            return;\n        }\n        const lastEpisode = this.view.state.episodes[this.view.state.episodes.length - 1];\n\n        if (targetScene < renderedScenes) {\n            this.switchToScene(targetScene);\n        } else if (targetScene === renderedScenes) {\n            const currentGameState = lastEpisode.gameState;\n            const newPlayerCount = nonEvictedHouseguests(lastEpisode.gameState).length;\n            const nextEpisodeType = this.season.whichEpisodeType(newPlayerCount);\n            if (newPlayerCount > 2) {\n                newEpisode(this.season.renderEpisode(currentGameState, nextEpisodeType));\n                this.switchSceneRelative(1);\n            }\n        }\n    };\n\n    public handleKeyDown(event: any) {\n        if (event.keyCode === LEFT) {\n            switchSceneRelative(-1);\n        } else if (event.keyCode === RIGHT) {\n            switchSceneRelative(1);\n        }\n    }\n\n    private onNewEpisode(episode: Episode | null) {\n        if (!episode) {\n            this.view.setState({ episodes: [], selectedScene: 0 });\n            this.scenes = [];\n        } else {\n            const newState = { ...this.view.state };\n            // starts at -1: prevent OBOE\n            const latestIndex = this.scenes.length === 0 ? -1 : this.scenes[this.scenes.length - 1].index;\n            const index = latestIndex + 1;\n            this.scenes.push({ scene: episode, index });\n            episode.scenes.forEach(scene => this.scenes.push({ scene, index }));\n            newState.episodes.push(episode);\n            this.view.setState(newState);\n        }\n    }\n\n    public destroy() {\n        this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n}\n","import { switchSceneRelative } from \"../sidebar/sidebarController\";\nimport React from \"react\";\n\nexport function NextEpisodeButton(): JSX.Element {\n    return (\n        <button className=\"button is-primary\" onClick={() => switchSceneRelative(1)}>\n            Continue\n        </button>\n    );\n}\n","import { Houseguest, inJury, GameState } from \"../../model\";\n\nexport const relationship = (hero: Houseguest, villain: Houseguest) => hero.relationships[villain.id];\n\nexport function favouriteIndex(hero: Houseguest, options: Houseguest[]) {\n    // Return the index of the houseguest that hero has the worst relationship with.\n    return highestScore(hero, options, relationship);\n}\n\nexport function highestScore(\n    hero: Houseguest,\n    options: Houseguest[],\n    callback: (hero: Houseguest, villain: Houseguest) => number\n) {\n    let highestIndex = 0;\n    let highestScore = -Infinity;\n    options.forEach((villain, i) => {\n        const currentScore = callback(hero, villain);\n        if (currentScore > highestScore) {\n            highestIndex = i;\n            highestScore = currentScore;\n        }\n    });\n    return highestIndex;\n}\nexport function lowestScore(\n    hero: Houseguest,\n    options: Houseguest[],\n    callback: (hero: Houseguest, villain: Houseguest) => number\n) {\n    let lowestIndex = 0;\n    let lowestScore = Infinity;\n    options.forEach((villain, i) => {\n        const currentScore = callback(hero, villain);\n        if (currentScore < lowestScore) {\n            lowestIndex = i;\n            lowestScore = currentScore;\n        }\n    });\n    return lowestIndex;\n}\n\nexport function doesHeroWinTheFinale(\n    hgs: { hero: Houseguest; villain: Houseguest },\n    jury: Houseguest[]\n): boolean {\n    const hero = hgs.hero;\n    const villain = hgs.villain;\n    let heroVotes = 0;\n    let villainVotes = 0;\n    jury.forEach(juror => {\n        if (juror.id === hero.id || juror.id === villain.id) {\n            return;\n        }\n        if (relationship(hero, juror) > relationship(villain, juror)) {\n            heroVotes++;\n        } else {\n            villainVotes++;\n        }\n    });\n    return heroVotes > villainVotes;\n}\n\nexport function heroShouldTargetSuperiors(hero: Houseguest, gameState: GameState): boolean {\n    return hero.superiors.size * 2 !== gameState.remainingPlayers - 1;\n}\n\nexport function hitList(hero: Houseguest, options: Houseguest[], gameState: GameState): Set<number> {\n    let result = options;\n    // jury logic is not affected by someone who is dead center in power rankings\n    if (inJury(gameState) && heroShouldTargetSuperiors(hero, gameState)) {\n        // TODO: logic to take into account that i never want to eliminate the last guy i can actually beat\n        if (hero.superiors.size * 2 < gameState.remainingPlayers - 1) {\n            result = options.filter(hg => !hero.superiors.has(hg.id));\n        } else {\n            result = options.filter(hg => hero.superiors.has(hg.id));\n        }\n    } else {\n    }\n    return new Set(result.map(hg => hg.id));\n}\n","import { Houseguest, GameState, nonEvictedHouseguests, inJury } from \"../../model\";\nimport { favouriteIndex, relationship, lowestScore, hitList, heroShouldTargetSuperiors } from \"./aiUtils\";\nimport { classifyRelationship, RelationshipType as Relationship } from \"./classifyRelationship\";\n\n// Return the index of the eviction target.\nexport function castEvictionVote(hero: Houseguest, nominees: Houseguest[], gameState: GameState): number {\n    // TODO: better jury logic\n    if (inJury(gameState)) {\n        return cutthroatVoteJury(hero, nominees, gameState);\n    } else {\n        return cutthroatVote(hero, nominees);\n    }\n}\n\nfunction cutthroatVoteJury(hero: Houseguest, nominees: Houseguest[], gameState: GameState): number {\n    const nom0 = nominees[0];\n    const nom1 = nominees[1];\n    const zeroIsSuperior = hero.superiors.has(nom0.id);\n    const oneIsSuperior = hero.superiors.has(nom1.id);\n\n    // if there is no sup/inf difference, no point in doing special logic for it\n    if (zeroIsSuperior === oneIsSuperior) {\n        return cutthroatVote(hero, nominees);\n    }\n    // never evict the last guy in the game who I can beat on finale night\n\n    // TODO: this logic is wRONG IT NEEDS TO BE INFERIORS MINUS 1 BUT THATS NOT IT REEEEEEEEEEEEEEEEEE\n    if (gameState.remainingPlayers - hero.superiors.size - 1 === 1 && (zeroIsSuperior || oneIsSuperior)) {\n        console.log(\n            `I, ${hero.name}, have only one inferior so I must evict nominee ${zeroIsSuperior ? 0 : 1}`\n        );\n        return zeroIsSuperior ? 0 : 1;\n    }\n    const target = heroShouldTargetSuperiors(hero, gameState) === zeroIsSuperior ? 0 : 1;\n    const nonTarget = target ? 0 : 1;\n    const targetIsFriend =\n        classifyRelationship(\n            hero.popularity,\n            nominees[target].popularity,\n            hero.relationships[nominees[target].id]\n        ) === Relationship.Friend;\n    const nonTargetIsNonFriend =\n        classifyRelationship(\n            hero.popularity,\n            nominees[nonTarget].popularity,\n            hero.relationships[nominees[nonTarget].id]\n        ) === Relationship.Friend;\n    // the only reason to not evict your target is if he is your only friend on the block\n    if (targetIsFriend && nonTargetIsNonFriend) {\n        return nonTarget;\n    } else {\n        return target;\n    }\n}\n\n// TODO: only works for 2 nominees\nfunction cutthroatVote(hero: Houseguest, nominees: Houseguest[]): number {\n    const nom0 = nominees[0];\n    const nom1 = nominees[1];\n    const r0 = classifyRelationship(hero.popularity, nom0.popularity, hero.relationships[nom0.id]);\n    const r1 = classifyRelationship(hero.popularity, nom1.popularity, hero.relationships[nom1.id]);\n    if (r0 === Relationship.Enemy && r1 === Relationship.Enemy) {\n        return nom0.popularity > nom1.popularity ? 0 : 1;\n    } else if (\n        (r0 === Relationship.Enemy && r1 !== Relationship.Enemy) ||\n        (r0 !== Relationship.Friend && r1 === Relationship.Friend)\n    ) {\n        return 0;\n    } else if (\n        (r1 === Relationship.Enemy && r0 !== Relationship.Enemy) ||\n        (r1 !== Relationship.Friend && r0 === Relationship.Friend)\n    ) {\n        return 1;\n    }\n    return lowestScore(hero, nominees, relationship);\n}\n\nexport function nominatePlayer(hero: Houseguest, options: Houseguest[], gameState: GameState): number {\n    // TODO: target and pawn based nominations, different pre and post jury. requires refactoring (nominate N players)\n    const hitlist = hitList(hero, options, gameState);\n    let trueOptions = options.filter(hg => hitlist.has(hg.id));\n    if (trueOptions.length === 0) {\n        // if there are no options, we must sadly deviate from the hit list\n        trueOptions = options;\n    }\n    return trueOptions[lowestScore(hero, trueOptions, relationship)].id;\n}\nexport function useGoldenVeto(\n    hero: Houseguest,\n    nominees: Houseguest[],\n    gameState: GameState\n): Houseguest | null {\n    let povTarget: Houseguest | null = null;\n    if (hero.id == nominees[0].id || hero.id == nominees[1].id) {\n        povTarget = hero;\n    } else {\n        if (inJury(gameState)) {\n            // TODO: jury logic goes right here once we're ready\n            povTarget = useGoldenVetoPreJury(hero, nominees);\n        } else {\n            povTarget = useGoldenVetoPreJury(hero, nominees);\n        }\n        if (nonEvictedHouseguests(gameState).length === 4) {\n            povTarget = null;\n        }\n    }\n    return povTarget || null;\n}\n\nfunction useGoldenVetoPreJury(hero: Houseguest, nominees: Houseguest[]) {\n    let save = -1;\n    const rel0 = classifyRelationship(\n        hero.popularity,\n        nominees[0].popularity,\n        hero.relationshipWith(nominees[0])\n    );\n    const rel1 = classifyRelationship(\n        hero.popularity,\n        nominees[1].popularity,\n        hero.relationshipWith(nominees[1])\n    );\n    // basic logic that only saves friends. Doesn't take into account jury stuff.\n    if (rel0 === Relationship.Friend && rel1 !== Relationship.Friend) {\n        save = 0;\n    } else if (rel1 === Relationship.Friend && rel0 !== Relationship.Friend) {\n        save = 1;\n    } else if (rel0 === Relationship.Friend && rel1 === Relationship.Friend) {\n        save = Math.max(nominees[0].popularity, nominees[1].popularity) === nominees[0].popularity ? 0 : 1;\n    }\n\n    return nominees[save];\n}\n\nexport function castJuryVote(juror: Houseguest, finalists: Houseguest[]): number {\n    return favouriteIndex(juror, finalists);\n}\n","import React from \"react\";\nimport { Episode, GameState, randomPlayer } from \"../../model\";\nimport { MemoryWall } from \"../memoryWall\";\nimport { NextEpisodeButton } from \"../buttons/nextEpisodeButton\";\nimport { EpisodeType, Scene } from \"./episodes\";\nimport { Houseguest } from \"../../model/houseguest\";\nimport _, { shuffle } from \"lodash\";\nimport { MutableGameState, getById, nonEvictedHouseguests, exclude, inJury } from \"../../model/gameState\";\nimport { Portraits, Portrait } from \"../playerPortrait/portraits\";\nimport { finalJurySize, getFinalists } from \"../../model/season\";\nimport { nominatePlayer, useGoldenVeto, castEvictionVote } from \"../../utils/ai/aiApi\";\n\nexport const BigBrotherVanilla: EpisodeType = {\n    canPlayWith: (n: number) => {\n        return n > 1;\n    },\n    eliminates: 1\n};\n\n// TODO: Refactoring ideas\n/**\n * Might be best to start passing ids instead of houseguests for HoH/nominees/veto winner\n */\n\nfunction generateHohCompScene(initialGameState: GameState): [GameState, Scene, Houseguest] {\n    const newGameState = new MutableGameState(initialGameState);\n\n    const previousHoh = initialGameState.previousHOH ? [initialGameState.previousHOH] : [];\n    const newHoH: Houseguest = randomPlayer(newGameState.houseguests, previousHoh);\n    newGameState.previousHOH = newHoH;\n    newGameState.phase++;\n    newHoH.hohWins += 1;\n\n    const scene = {\n        title: \"HoH Competition\",\n        gameState: initialGameState,\n        render: (\n            <div>\n                {previousHoh.length > 0 &&\n                    `Houseguests, it's time to find a new Head of Household. As outgoing HoH, ${\n                        previousHoh[0].name\n                    } will not compete. `}\n                <Portrait houseguest={newHoH} />\n                {newHoH.name} has won Head of Household!\n                <br />\n                <NextEpisodeButton />\n            </div>\n        )\n    };\n\n    return [new GameState(newGameState), scene, newHoH];\n}\n\nfunction generateNomCeremonyScene(\n    initialGameState: GameState,\n    HoH: Houseguest\n): [GameState, Scene, Houseguest[]] {\n    const newGameState = new MutableGameState(initialGameState);\n    const options = exclude(nonEvictedHouseguests(newGameState), [HoH]);\n    const nom1 = getById(newGameState, nominatePlayer(HoH, options, newGameState));\n    const nom2 = getById(newGameState, nominatePlayer(HoH, exclude(options, [nom1]), newGameState));\n    nom1.nominations++;\n    nom2.nominations++;\n    const noms = shuffle([nom1, nom2]);\n    const scene = {\n        title: \"Nomination Ceremony\",\n        gameState: newGameState,\n        render: (\n            <div>\n                <Portrait houseguest={HoH} />\n                <br />\n                This is the nomination ceremony. It is my responsibility as the Head of Household to nominate\n                two houseguests for eviction.\n                <br />\n                <b>\n                    My first nominee is...\n                    <br />\n                    <Portrait houseguest={noms[0]} />\n                    <br />\n                    My second nominee is...\n                    <br />\n                    <Portrait houseguest={noms[1]} />\n                    {`I have nominated you, ${noms[0].name} and you, ${noms[1].name} for eviction.`}\n                    <br />\n                </b>\n                <NextEpisodeButton />\n            </div>\n        )\n    };\n    return [new GameState(newGameState), scene, [nom1, nom2]];\n}\n\nfunction generateVetoCompScene(\n    initialGameState: GameState,\n    HoH: Houseguest,\n    nom1: Houseguest,\n    nom2: Houseguest\n): [GameState, Scene, Houseguest] {\n    const newGameState = new MutableGameState(initialGameState);\n\n    // pick players\n    const choices = nonEvictedHouseguests(newGameState);\n    let povPlayers: any[] = [];\n    const everyoneWillPlay = choices.length <= 6;\n\n    if (everyoneWillPlay) {\n        povPlayers.push({ ...HoH });\n        povPlayers.push({ ...nom1 });\n        povPlayers.push({ ...nom2 });\n        while (povPlayers.length < choices.length) {\n            povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n        }\n    } else {\n        // TODO: houseguests choice picks\n        povPlayers.push({ ...HoH });\n        povPlayers.push({ ...nom1 });\n        povPlayers.push({ ...nom2 });\n        povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n        povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n        povPlayers.push({ ...randomPlayer(choices, povPlayers) });\n    }\n    let povWinner = randomPlayer(povPlayers);\n    povWinner = getById(newGameState, povWinner.id);\n    povWinner.povWins++;\n\n    let introText: string;\n    if (everyoneWillPlay) {\n        introText = \"Everyone left in the house will compete in this challenge.\";\n    } else {\n        introText = `${HoH.name}, as Head of Household, and ${nom1.name} and ${\n            nom2.name\n        } as nominees, will compete, as well as 3 others chosen by random draw.`;\n    }\n\n    const extras = [povPlayers[3]];\n    povPlayers[4] && extras.push(povPlayers[4]);\n    povPlayers[5] && extras.push(povPlayers[5]);\n\n    const scene = {\n        title: \"Veto Competition\",\n        gameState: initialGameState,\n        render: (\n            <div>\n                It's time to pick players for the veto competition.\n                <br />\n                <Portraits houseguests={[HoH, nom1, nom2]} />\n                <br />\n                {introText}\n                <br />\n                <Portraits houseguests={extras} />\n                ...\n                <Portraits houseguests={[povWinner]} />\n                {`${povWinner.name} has won the Golden Power of Veto!`}\n                <br />\n                <NextEpisodeButton />\n            </div>\n        )\n    };\n\n    return [new GameState(newGameState), scene, povWinner];\n}\n\nfunction generateVetoCeremonyScene(\n    initialGameState: GameState,\n    HoH: Houseguest,\n    initialNominees: Houseguest[],\n    povWinner: Houseguest\n): [Scene, Houseguest[]] {\n    let povTarget: Houseguest | null = null;\n    let descisionText = \"\";\n    initialNominees[0] = getById(initialGameState, initialNominees[0].id);\n    initialNominees[1] = getById(initialGameState, initialNominees[1].id);\n    HoH = getById(initialGameState, HoH.id);\n\n    povTarget = useGoldenVeto(povWinner, initialNominees, initialGameState);\n\n    if (!povTarget) {\n        descisionText += \"... not to use the power of veto.\";\n    } else if (povWinner.id == initialNominees[0].id || povWinner.id == initialNominees[1].id) {\n        descisionText += \"...to use the power of veto on myself.\";\n    } else {\n        descisionText += `...to use the power of veto on ${povTarget.name}.`;\n    }\n\n    let replacementSpeech = \"\";\n    let nameAReplacement = \"\";\n    let finalNominees: any[] = initialNominees;\n    if (povTarget) {\n        finalNominees = initialNominees.filter(hg => hg.id != povTarget!.id);\n        nameAReplacement += ` ${\n            HoH.name\n        }, since I have just vetoed one of your nominations, you must name a replacement nominee.`;\n        const replacementNom = {\n            ...getById(\n                initialGameState,\n                nominatePlayer(\n                    HoH,\n                    exclude(initialGameState.houseguests, [\n                        HoH,\n                        initialNominees[0],\n                        initialNominees[1],\n                        povWinner\n                    ]),\n                    initialGameState\n                )\n            )\n        };\n        replacementNom.nominations++;\n        finalNominees.push(replacementNom);\n        getById(initialGameState, replacementNom.id).nominations++;\n        replacementSpeech = `My replacement nominee is ${replacementNom.name}.`;\n    }\n\n    const scene = {\n        title: \"Veto Ceremony\",\n        gameState: initialGameState,\n        render: (\n            <div>\n                This is the Veto Ceremony.\n                <br />\n                {`${initialNominees[0].name} and ${\n                    initialNominees[1].name\n                } have been nominated for eviction.`}\n                <Portraits houseguests={initialNominees} />\n                But I have the power to veto one of these nominations.\n                <br />\n                <b>\n                    I have decided...\n                    <Portrait houseguest={povWinner} />\n                    {descisionText}\n                </b>\n                {nameAReplacement}\n                {replacementSpeech && <Portrait houseguest={HoH} />}\n                <b>{replacementSpeech}</b>\n                <Portraits houseguests={finalNominees} />\n                <NextEpisodeButton />\n            </div>\n        )\n    };\n    return [scene, finalNominees];\n}\n\nexport function evictHouseguest(gameState: MutableGameState, id: number) {\n    const evictee = getById(gameState, id);\n    evictee.isEvicted = true;\n    if (gameState.remainingPlayers - getFinalists() <= finalJurySize()) {\n        evictee.isJury = true;\n    }\n    if (inJury(gameState)) {\n        nonEvictedHouseguests(gameState).forEach(hg => {\n            hg.superiors.delete(evictee.id);\n        });\n    }\n    gameState.remainingPlayers--;\n}\n\nfunction generateEvictionScene(\n    initialGameState: GameState,\n    HoH: Houseguest,\n    nominees: Houseguest[]\n): [GameState, Scene] {\n    const newGameState = new MutableGameState(initialGameState);\n    nominees = shuffle(nominees);\n    const votes: Array<Houseguest[]> = [[], []];\n    nonEvictedHouseguests(newGameState).forEach(hg => {\n        if (hg.id !== nominees[0].id && hg.id !== nominees[1].id && hg.id !== HoH.id) {\n            votes[castEvictionVote(hg, nominees, newGameState)].push(hg);\n        }\n    });\n    const votesFor0 = votes[0].length;\n    const votesFor1 = votes[1].length;\n\n    let tieVote = votesFor0 === votesFor1;\n    let tieBreaker: number = 0;\n    if (tieVote) {\n        tieBreaker = castEvictionVote(HoH, nominees, newGameState);\n    }\n    let evictee: Houseguest;\n    if (votesFor0 > votesFor1) {\n        evictee = nominees[0];\n    } else if (votesFor1 > votesFor0) {\n        evictee = nominees[1];\n    } else {\n        evictee = nominees[tieBreaker];\n    }\n    evictHouseguest(newGameState, evictee.id);\n\n    const isUnanimous = votesFor0 === 0 || votesFor1 === 0;\n    const voteCountText = isUnanimous\n        ? \"By a unanimous vote...\"\n        : `By a vote of ${votesFor0} to ${votesFor1}...`;\n\n    const scene = {\n        title: \"Live Eviction\",\n        gameState: initialGameState,\n        render: (\n            <div>\n                <p style={{ textAlign: \"center\" }}>\n                    <b>{voteCountText} </b>\n                </p>\n                <div className=\"columns is-centered\">\n                    <div className=\"column box\">\n                        <Portraits houseguests={votes[0]} centered={true} />\n                    </div>\n                    <div className=\"column box\">\n                        <Portraits houseguests={votes[1]} centered={true} />\n                    </div>\n                </div>\n                {tieVote && (\n                    <div>\n                        <p style={{ textAlign: \"center\" }}>\n                            <b> We have a tie.</b> <br />\n                            {`${\n                                HoH.name\n                            }, as current Head of Household, you must cast the sole vote to evict.`}\n                        </p>\n                        <Portraits houseguests={[HoH]} centered={true} />\n                        <p style={{ textAlign: \"center\" }}>\n                            <b>I vote to evict {`${evictee.name}.`}</b>\n                        </p>\n                    </div>\n                )}\n\n                <Portraits\n                    houseguests={[\n                        getById(newGameState, nominees[0].id),\n                        getById(newGameState, nominees[1].id)\n                    ]}\n                    centered={true}\n                />\n                <p style={{ textAlign: \"center\" }}>\n                    <b>{`${evictee.name}... you have been evicted from the Big Brother House.`}</b>\n                </p>\n                <NextEpisodeButton />\n            </div>\n        )\n    };\n    return [newGameState, scene];\n}\n\nexport class BigBrotherVanillaEpisode implements Episode {\n    readonly title: string;\n    readonly scenes: Scene[] = [];\n    readonly render: JSX.Element;\n    readonly gameState: GameState;\n    readonly type = BigBrotherVanilla;\n\n    public constructor(initialGameState: GameState) {\n        let currentGameState;\n        let hohCompScene;\n        let hoh: Houseguest;\n\n        [currentGameState, hohCompScene, hoh] = generateHohCompScene(initialGameState);\n        this.scenes.push(hohCompScene);\n\n        let nomCeremonyScene;\n        let nominees: Houseguest[];\n        [currentGameState, nomCeremonyScene, nominees] = generateNomCeremonyScene(currentGameState, hoh);\n        this.scenes.push(nomCeremonyScene);\n\n        let vetoCompScene;\n        let povWinner: Houseguest;\n        [currentGameState, vetoCompScene, povWinner] = generateVetoCompScene(\n            currentGameState,\n            hoh,\n            nominees[0],\n            nominees[1]\n        );\n        this.scenes.push(vetoCompScene);\n        let vetoCeremonyScene;\n\n        [vetoCeremonyScene, nominees] = generateVetoCeremonyScene(currentGameState, hoh, nominees, povWinner);\n        this.scenes.push(vetoCeremonyScene);\n\n        let evictionScene;\n        [currentGameState, evictionScene] = generateEvictionScene(currentGameState, hoh, nominees);\n        this.scenes.push(evictionScene);\n\n        this.title = `Week ${currentGameState.phase}`;\n        this.render = (\n            <div>\n                {/* TODO: custom title here*/}\n                {`Week ${currentGameState.phase}`}\n                <MemoryWall houseguests={initialGameState.houseguests} /> <br />\n                <NextEpisodeButton />\n            </div>\n        );\n        this.gameState = new GameState(currentGameState);\n    }\n}\n","import { BigBrotherVanilla } from \"../components/episode/bigBrotherEpisode\";\nimport { EpisodeFactory } from \"../components/episode/episodeFactory\";\nimport { GameState } from \"./gameState\";\nimport { EpisodeType, Episode } from \".\";\nimport { BigBrotherFinale } from \"../components/episode/bigBrotherFinale\";\nimport { cast$ } from \"../components/mainPage/mainPageController\";\n\nexport function finalJurySize() {\n    return jurors;\n}\n\nlet jurors = 7;\nconst sub = cast$.subscribe({\n    next: newCast => {\n        let players = newCast.length;\n        players = Math.round(players * 0.55);\n        if (players % 2 === 0) {\n            players--;\n        }\n        jurors = players;\n    }\n});\n\nexport function getFinalists() {\n    return 2;\n}\n\nexport class Season {\n    private factory: EpisodeFactory;\n\n    public constructor() {\n        this.factory = new EpisodeFactory();\n    }\n\n    // In the future, this would all be customizable,\n    // and not just all big brother episodes by default.\n\n    public renderEpisode(gameState: GameState, type: EpisodeType): Episode {\n        return this.factory.nextEpisode(gameState, type);\n    }\n\n    public whichEpisodeType(players: number) {\n        if (players === 3) {\n            return BigBrotherFinale;\n        }\n        return BigBrotherVanilla;\n    }\n}\n","import React from \"react\";\nimport { EpisodeType, Episode, Scene } from \"./episodes\";\nimport { GameState } from \"../../model\";\nimport { MemoryWall } from \"../memoryWall\";\nimport { NextEpisodeButton } from \"../buttons/nextEpisodeButton\";\nimport { Houseguest } from \"../../model/houseguest\";\nimport {\n    nonEvictedHouseguests,\n    MutableGameState,\n    randomPlayer,\n    getById,\n    getJurors\n} from \"../../model/gameState\";\nimport { Portraits, Portrait } from \"../playerPortrait/portraits\";\nimport { evictHouseguest } from \"./bigBrotherEpisode\";\nimport { castEvictionVote, castJuryVote } from \"../../utils/ai/aiApi\";\n\nexport const BigBrotherFinale: EpisodeType = {\n    canPlayWith: (n: number) => n === 3,\n    eliminates: 2\n};\n\nfunction finalHohCompScene(initialGameState: GameState): [GameState, Scene, Houseguest] {\n    const newGameState = new MutableGameState(initialGameState);\n    const final3 = nonEvictedHouseguests(initialGameState);\n    const enduranceWinner = randomPlayer(final3);\n    const enduranceLosers = final3.filter(hg => hg.id !== enduranceWinner.id);\n    const skillWinner = randomPlayer(final3, [enduranceWinner]);\n    const finalHoH = getById(newGameState, randomPlayer([enduranceWinner, skillWinner]).id);\n    finalHoH.hohWins++;\n    const scene: Scene = {\n        title: \"Final HoH Competition\",\n        gameState: newGameState,\n        render: (\n            <div>\n                <p>The final 3 houseguests compete in the endurance competition.</p>\n                <Portraits houseguests={final3} />\n                <Portrait houseguest={enduranceWinner} />\n                <p>\n                    <b>{`${enduranceWinner.name} has won the endurance competition!`}</b>\n                </p>\n                <hr />\n                <p>{`${enduranceLosers[0].name} and ${\n                    enduranceLosers[1].name\n                } compete in the skill competition.`}</p>\n                <Portraits houseguests={enduranceLosers} />\n                <Portrait houseguest={skillWinner} />\n                <p>\n                    <b>{`${skillWinner.name} has won the skill competition!`}</b>\n                </p>\n                <hr />\n                <p>{`${enduranceWinner.name} and ${skillWinner.name} compete in the quiz competition.`}</p>\n                <Portraits houseguests={[enduranceWinner, skillWinner]} />\n                <Portrait houseguest={finalHoH} />\n                <p>\n                    <b>{`Congratulations ${finalHoH.name}, you are the final Head of Household!`}</b>\n                </p>\n                <NextEpisodeButton />\n            </div>\n        )\n    };\n    newGameState.phase++;\n    return [new GameState(newGameState), scene, finalHoH];\n}\n\nfunction finalEvictionScene(initialGameState: GameState, HoH: Houseguest): [GameState, Scene] {\n    const newGameState = new MutableGameState(initialGameState);\n    const nominees = nonEvictedHouseguests(newGameState).filter(hg => hg.id !== HoH.id);\n    const vote = castEvictionVote(HoH, nominees, newGameState);\n    const evictee = nominees[vote];\n    evictHouseguest(newGameState, evictee.id);\n    const scene: Scene = {\n        title: \"Final Eviction\",\n        gameState: newGameState,\n        render: (\n            <div>\n                <div style={{ textAlign: \"center\" }}>\n                    {`As the final HoH of the season, ${HoH.name}, you may now cast the sole vote to evict.`}\n                    <Portrait houseguest={HoH} centered={true} />\n                    <b>\n                        <p>{`I vote to evict ${evictee.name}.`}</p>\n                    </b>\n                    <Portraits houseguests={nominees} centered={true} />\n                    <p>\n                        It's official... {evictee.name}, you will be the final person leaving the Big Brother\n                        House.\n                    </p>\n                </div>\n                <NextEpisodeButton />\n            </div>\n        )\n    };\n    return [new GameState(newGameState), scene];\n}\n\nfunction juryVoteScene(initialGameState: GameState): Scene {\n    const jurors = getJurors(initialGameState);\n    const finalists = nonEvictedHouseguests(initialGameState);\n    let voteCount = [0, 0];\n    const votes = jurors.map(juror => {\n        const result = castJuryVote(juror, finalists);\n        voteCount[result]++;\n        return result;\n    });\n    const voteBlocks = [];\n\n    // TODO: the formatting on this episode sucks...\n    for (let i = 0; i < votes.length; i++) {\n        voteBlocks.push(\n            <div className=\"columns\" key={`jury-vote${i}`}>\n                <Portrait houseguest={jurors[i]} />\n                <p>\n                    <b>{`${jurors[i].name} has voted for...`}</b>\n                </p>\n                <Portrait houseguest={finalists[votes[i]]} />\n            </div>\n        );\n    }\n    const winner = voteCount[0] > voteCount[1] ? finalists[0] : finalists[1];\n\n    const scene: Scene = {\n        title: \"Jury Votes\",\n        gameState: initialGameState,\n        render: (\n            <div>\n                {voteBlocks}\n                <Portrait houseguest={winner} />\n                {`Congratulations, ${winner.name}, you are the winner of Big Brother!!!`}\n            </div>\n        )\n    };\n    return scene;\n}\n\nexport class BigBrotherFinaleEpisode implements Episode {\n    readonly title: string;\n    readonly scenes: Scene[] = [];\n    readonly render: JSX.Element;\n    readonly gameState: GameState;\n    readonly type = BigBrotherFinale;\n\n    public constructor(initialGameState: GameState) {\n        this.title = \"Finale\";\n        this.render = (\n            <div>\n                {/* TODO: custom title here*/}\n                Finale Night\n                <MemoryWall houseguests={initialGameState.houseguests} /> <br />\n                <NextEpisodeButton />\n            </div>\n        );\n        let currentGameState;\n        let hohCompScene;\n        let finalHoH;\n        [currentGameState, hohCompScene, finalHoH] = finalHohCompScene(initialGameState);\n        this.scenes.push(hohCompScene);\n        let finalEviction;\n        [currentGameState, finalEviction] = finalEvictionScene(currentGameState, finalHoH);\n        this.scenes.push(finalEviction);\n\n        let voteScene;\n        voteScene = juryVoteScene(currentGameState);\n        this.scenes.push(voteScene);\n\n        this.gameState = currentGameState;\n    }\n}\n","import {\n    GameState,\n    MutableGameState,\n    calculatePopularity,\n    nonEvictedHouseguests,\n    inJury,\n    getJurors\n} from \"../../model/gameState\";\nimport { Episode, Houseguest } from \"../../model\";\nimport { EpisodeType } from \"./episodes\";\nimport { BigBrotherVanilla, BigBrotherVanillaEpisode } from \"./bigBrotherEpisode\";\nimport { BigBrotherFinale, BigBrotherFinaleEpisode } from \"./bigBrotherFinale\";\nimport { rng, roundTwoDigits } from \"../../utils\";\nimport { doesHeroWinTheFinale as heroWinsTheFinale } from \"../../utils/ai/aiUtils\";\nimport { classifyRelationship, RelationshipType as Relationship } from \"../../utils/ai/classifyRelationship\";\n\nfunction firstImpressions(houseguests: Houseguest[]) {\n    for (let i = 0; i < houseguests.length; i++) {\n        const iMap = houseguests[i].relationships;\n        for (let j = i + 1; j < houseguests.length; j++) {\n            // creates a bunch of 100% random mutual relationships\n            const jMap = houseguests[j].relationships;\n            const impression = rng().randomFloat();\n            jMap[i] = impression;\n            iMap[j] = impression;\n        }\n    }\n}\n\nfunction generatePowerRankings(houseguests: Houseguest[]) {\n    for (let i = 0; i < houseguests.length; i++) {\n        const hero = houseguests[i];\n        for (let j = i + 1; j < houseguests.length; j++) {\n            const villain = houseguests[j];\n            if (heroWinsTheFinale({ hero, villain }, houseguests)) {\n                villain.superiors.add(hero.id);\n            } else {\n                hero.superiors.add(villain.id);\n            }\n        }\n    }\n}\n\nfunction updatePopularity(gameState: GameState) {\n    const houseguests = nonEvictedHouseguests(gameState);\n    houseguests.forEach(hg => {\n        const result = calculatePopularity(hg, nonEvictedHouseguests(gameState));\n        hg.deltaPopularity = (roundTwoDigits(result) - roundTwoDigits(hg.popularity)) / 100;\n        hg.popularity = result;\n    });\n}\n\nfunction updateFriendCounts(gameState: GameState) {\n    const houseguests = nonEvictedHouseguests(gameState);\n    houseguests.forEach(hero => {\n        hero.getFriendEnemyCount = () => {\n            let friends = 0;\n            let enemies = 0;\n            houseguests.forEach(villain => {\n                const rel = classifyRelationship(\n                    hero.popularity,\n                    villain.popularity,\n                    hero.relationshipWith(villain)\n                );\n                if (hero.id === villain.id) {\n                    return;\n                } else if (rel === Relationship.Friend) {\n                    friends++;\n                } else if (rel === Relationship.Enemy) {\n                    enemies++;\n                }\n            });\n            return { friends, enemies };\n        };\n    });\n}\n\nexport class EpisodeFactory {\n    public nextEpisode(gameState: GameState, episodeType: EpisodeType): Episode {\n        let newState = new MutableGameState(gameState);\n        if (gameState.phase === 0) {\n            firstImpressions(newState.houseguests);\n        }\n        // If jury starts this episode, populate superior/inferior data. In the future, every jury ep. (dynamic rels)\n        if (inJury(gameState) && getJurors(gameState).length === 0) {\n            generatePowerRankings(nonEvictedHouseguests(newState));\n        }\n        updatePopularity(newState);\n        updateFriendCounts(newState);\n        const finalState = new GameState(newState);\n        switch (episodeType) {\n            case BigBrotherVanilla:\n                return new BigBrotherVanillaEpisode(finalState);\n            case BigBrotherFinale:\n                return new BigBrotherFinaleEpisode(finalState);\n            default:\n                throw new Error(\"Unsupported Episode Type\");\n        }\n    }\n}\n","import { Houseguest } from \"./houseguest\";\nimport { PlayerProfile } from \"./playerProfile\";\nimport _ from \"lodash\";\nimport { newRelationshipMap, rng } from \"../utils\";\nimport { finalJurySize, getFinalists } from \"./season\";\n\n// TODO: might want to make houseguests a dictionary. {id: houseguest}\nexport function getById(gameState: GameState, id: number): Houseguest {\n    const result = gameState.houseguests.find(hg => hg.id === id);\n    if (!result) {\n        throw new Error(`Failed to find houseguest with id ${id}`);\n    }\n    return result;\n}\n\nexport function exclude(inclusions: Houseguest[], exclusions: Houseguest[]) {\n    const excludedIds = exclusions.map(hg => hg.id);\n    return inclusions.filter(hg => !excludedIds.includes(hg.id) && !hg.isEvicted);\n}\n\nexport function randomPlayer(inclusions: Houseguest[], exclusions: Houseguest[] = []): Houseguest {\n    if (inclusions.length === 0) {\n        throw new Error(\"Tried to get a random player from a list of 0 players.\");\n    }\n    const options = exclude(inclusions, exclusions);\n    const choice = rng().randomInt(0, options.length - 1);\n\n    return options[choice];\n}\n\nexport function nonEvictedHouseguests(gameState: GameState) {\n    return gameState.houseguests.filter(hg => !hg.isEvicted);\n}\nexport function getJurors(gameState: GameState) {\n    return gameState.houseguests.filter(hg => hg.isJury);\n}\n\nexport function inJury(gameState: GameState): Boolean {\n    return gameState.remainingPlayers - getFinalists() <= finalJurySize();\n}\n\nexport function calculatePopularity(hero: Houseguest, house: Houseguest[]) {\n    let sum = 0;\n    let count = 0;\n    const targetId = hero.id;\n    house.forEach(houseguest => {\n        if (houseguest.id !== targetId) {\n            count++;\n            sum += houseguest.relationships[targetId];\n        }\n    });\n    return count === 0 ? 0 : sum / count;\n}\n\nexport class GameState {\n    // Current state of the game after a phase.\n\n    readonly houseguests: Houseguest[] = [];\n    readonly remainingPlayers: number = 0;\n    readonly phase: number = 0;\n    readonly previousHOH?: Houseguest;\n\n    public constructor(init: PlayerProfile[] | GameState) {\n        if (!(init instanceof Array)) {\n            Object.assign(this, init);\n        } else {\n            const profiles = init as PlayerProfile[];\n            this.remainingPlayers = profiles.length;\n            let id = -1;\n            profiles.forEach(profile => {\n                this.houseguests.push(\n                    new Houseguest({\n                        ...profile,\n                        id: ++id,\n                        // popularity: 0,\n                        // deltaPopularity: 0,\n                        relationships: newRelationshipMap(profiles.length, id)\n                    })\n                );\n            });\n        }\n    }\n}\n\nexport class MutableGameState {\n    public houseguests: Houseguest[] = [];\n    public remainingPlayers: number = 0;\n    public phase: number = 0;\n    public previousHOH?: Houseguest;\n\n    public constructor(init: GameState | MutableGameState) {\n        const copy = _.cloneDeep(init);\n        Object.assign(this, copy);\n    }\n}\n","import React from \"react\";\nimport { Episode, Scene, GameState } from \"../../model\";\nimport { SidebarController, newEpisode } from \"./sidebarController\";\nimport { PregameEpisode } from \"../episode/pregameEpisode\";\ninterface SidebarState {\n    episodes: Episode[];\n    selectedScene: number;\n}\n\nexport class Sidebar extends React.Component<{}, SidebarState> {\n    private controller: SidebarController;\n    public constructor(props: {}) {\n        super(props);\n        this.controller = new SidebarController(this);\n        this.state = { episodes: [], selectedScene: 0 };\n        newEpisode(new PregameEpisode(new GameState([])));\n    }\n\n    public componentDidMount() {\n        document.addEventListener(\"keydown\", this.controller.handleKeyDown);\n    }\n\n    public componentWillUnmount() {\n        this.controller.destroy();\n    }\n\n    public render() {\n        return (\n            <div className=\"box\" style={{ minWidth: 140 }}>\n                {this.getEpisodes()}\n            </div>\n        );\n    }\n\n    private getHighlight(title: string, key: number) {\n        if (key === this.state.selectedScene) {\n            return <mark>{title}</mark>;\n        }\n        return title;\n    }\n\n    private getEpisodes() {\n        const result: JSX.Element[] = [];\n        // Weird OBOE to make keys start at 0\n        let episodeKey = -1;\n        let breakKey = 0;\n        this.state.episodes.forEach((episode: Episode) => {\n            const id = ++episodeKey;\n            result.push(\n                <b\n                    key={id}\n                    onClick={() => {\n                        this.controller.switchToScene(id);\n                    }}\n                >\n                    {this.getHighlight(episode.title, id)}\n                </b>\n            );\n            result.push(<br key={--breakKey} />);\n            episode.scenes.forEach((scene: Scene) => {\n                const id = ++episodeKey;\n                if (this.controller.getSelectedEpisode() === episode.gameState.phase) {\n                    result.push(\n                        <a key={id} onClick={() => this.controller.switchToScene(id)}>\n                            {this.getHighlight(scene.title, id)}\n                        </a>\n                    );\n                    result.push(<br key={--breakKey} />);\n                }\n            });\n        });\n        return result;\n    }\n}\n","import \"./mainPage.scss\";\nimport React from \"react\";\nimport { Sidebar } from \"../sidebar/sidebar\";\nimport { Topbar } from \"../topbar/topBar\";\nimport { MainContentArea } from \"./mainContentArea\";\nimport { MainPageController } from \"./mainPageController\";\n\ninterface MainPageProps {\n    controller: MainPageController;\n}\n\nexport class MainPage extends React.Component<MainPageProps, any> {\n    public constructor(props: MainPageProps) {\n        super(props);\n        props.controller.inject(this);\n    }\n\n    public render() {\n        return (\n            <div className=\"main-page\">\n                <Topbar />\n                <div className=\"columns\">\n                    <div className=\"column is-narrow\">\n                        <Sidebar />\n                    </div>\n                    <div className=\"column\">\n                        <MainContentArea />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","import React, { Component } from \"react\";\nimport { MainPage } from \"./components/mainPage/mainPage\";\nimport { MainPageController } from \"./components/mainPage/mainPageController\";\n\nclass App extends Component {\n    render() {\n        return <MainPage controller={new MainPageController()} />;\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {});\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {});\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}